// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Computes a hash of the document’s content. You can use this hash for content fingerprinting.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/fingerprint-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const fingerprint = elasticstack.getIngestProcessorFingerprint({
 *     fields: ["user"],
 * });
 * const myIngestPipeline = new elasticstack.IngestPipeline("myIngestPipeline", {processors: [fingerprint.then(fingerprint => fingerprint.json)]});
 * ```
 */
export function getIngestProcessorFingerprint(args: GetIngestProcessorFingerprintArgs, opts?: pulumi.InvokeOptions): Promise<GetIngestProcessorFingerprintResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getIngestProcessorFingerprint:getIngestProcessorFingerprint", {
        "description": args.description,
        "fields": args.fields,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "ignoreMissing": args.ignoreMissing,
        "method": args.method,
        "onFailures": args.onFailures,
        "salt": args.salt,
        "tag": args.tag,
        "targetField": args.targetField,
    }, opts);
}

/**
 * A collection of arguments for invoking getIngestProcessorFingerprint.
 */
export interface GetIngestProcessorFingerprintArgs {
    /**
     * Description of the processor.
     */
    description?: string;
    /**
     * Array of fields to include in the fingerprint.
     */
    fields: string[];
    /**
     * Conditionally execute the processor
     */
    if?: string;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: boolean;
    /**
     * If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.
     */
    ignoreMissing?: boolean;
    /**
     * The hash method used to compute the fingerprint.
     */
    method?: string;
    /**
     * Handle failures for the processor.
     */
    onFailures?: string[];
    /**
     * Salt value for the hash function.
     */
    salt?: string;
    /**
     * Identifier for the processor.
     */
    tag?: string;
    /**
     * Output field for the fingerprint.
     */
    targetField?: string;
}

/**
 * A collection of values returned by getIngestProcessorFingerprint.
 */
export interface GetIngestProcessorFingerprintResult {
    /**
     * Description of the processor.
     */
    readonly description?: string;
    /**
     * Array of fields to include in the fingerprint.
     */
    readonly fields: string[];
    /**
     * Internal identifier of the resource
     */
    readonly id: string;
    /**
     * Conditionally execute the processor
     */
    readonly if?: string;
    /**
     * Ignore failures for the processor.
     */
    readonly ignoreFailure?: boolean;
    /**
     * If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.
     */
    readonly ignoreMissing?: boolean;
    /**
     * JSON representation of this data source.
     */
    readonly json: string;
    /**
     * The hash method used to compute the fingerprint.
     */
    readonly method?: string;
    /**
     * Handle failures for the processor.
     */
    readonly onFailures?: string[];
    /**
     * Salt value for the hash function.
     */
    readonly salt?: string;
    /**
     * Identifier for the processor.
     */
    readonly tag?: string;
    /**
     * Output field for the fingerprint.
     */
    readonly targetField?: string;
}
/**
 * Computes a hash of the document’s content. You can use this hash for content fingerprinting.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/fingerprint-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const fingerprint = elasticstack.getIngestProcessorFingerprint({
 *     fields: ["user"],
 * });
 * const myIngestPipeline = new elasticstack.IngestPipeline("myIngestPipeline", {processors: [fingerprint.then(fingerprint => fingerprint.json)]});
 * ```
 */
export function getIngestProcessorFingerprintOutput(args: GetIngestProcessorFingerprintOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIngestProcessorFingerprintResult> {
    return pulumi.output(args).apply((a: any) => getIngestProcessorFingerprint(a, opts))
}

/**
 * A collection of arguments for invoking getIngestProcessorFingerprint.
 */
export interface GetIngestProcessorFingerprintOutputArgs {
    /**
     * Description of the processor.
     */
    description?: pulumi.Input<string>;
    /**
     * Array of fields to include in the fingerprint.
     */
    fields: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Conditionally execute the processor
     */
    if?: pulumi.Input<string>;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: pulumi.Input<boolean>;
    /**
     * If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.
     */
    ignoreMissing?: pulumi.Input<boolean>;
    /**
     * The hash method used to compute the fingerprint.
     */
    method?: pulumi.Input<string>;
    /**
     * Handle failures for the processor.
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Salt value for the hash function.
     */
    salt?: pulumi.Input<string>;
    /**
     * Identifier for the processor.
     */
    tag?: pulumi.Input<string>;
    /**
     * Output field for the fingerprint.
     */
    targetField?: pulumi.Input<string>;
}
