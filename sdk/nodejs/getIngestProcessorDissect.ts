// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Similar to the Grok Processor, dissect also extracts structured fields out of a single text field within a document. However unlike the Grok Processor, dissect does not use Regular Expressions. This allows dissect’s syntax to be simple and for some cases faster than the Grok Processor.
 *
 * Dissect matches a single text field against a defined pattern.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/dissect-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const dissect = elasticstack.getIngestProcessorDissect({
 *     field: "message",
 *     pattern: `%{clientip} %{ident} %{auth} [%{@timestamp}] "%{verb} %{request} HTTP/%{httpversion}" %{status} %{size}`,
 * });
 * const myIngestPipeline = new elasticstack.IngestPipeline("myIngestPipeline", {processors: [dissect.then(dissect => dissect.json)]});
 * ```
 */
export function getIngestProcessorDissect(args: GetIngestProcessorDissectArgs, opts?: pulumi.InvokeOptions): Promise<GetIngestProcessorDissectResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getIngestProcessorDissect:getIngestProcessorDissect", {
        "appendSeparator": args.appendSeparator,
        "description": args.description,
        "field": args.field,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "ignoreMissing": args.ignoreMissing,
        "onFailures": args.onFailures,
        "pattern": args.pattern,
        "tag": args.tag,
    }, opts);
}

/**
 * A collection of arguments for invoking getIngestProcessorDissect.
 */
export interface GetIngestProcessorDissectArgs {
    /**
     * The character(s) that separate the appended fields.
     */
    appendSeparator?: string;
    /**
     * Description of the processor.
     */
    description?: string;
    /**
     * The field to dissect.
     */
    field: string;
    /**
     * Conditionally execute the processor
     */
    if?: string;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: boolean;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    ignoreMissing?: boolean;
    /**
     * Handle failures for the processor.
     */
    onFailures?: string[];
    /**
     * The pattern to apply to the field.
     */
    pattern: string;
    /**
     * Identifier for the processor.
     */
    tag?: string;
}

/**
 * A collection of values returned by getIngestProcessorDissect.
 */
export interface GetIngestProcessorDissectResult {
    /**
     * The character(s) that separate the appended fields.
     */
    readonly appendSeparator?: string;
    /**
     * Description of the processor.
     */
    readonly description?: string;
    /**
     * The field to dissect.
     */
    readonly field: string;
    /**
     * Internal identifier of the resource
     */
    readonly id: string;
    /**
     * Conditionally execute the processor
     */
    readonly if?: string;
    /**
     * Ignore failures for the processor.
     */
    readonly ignoreFailure?: boolean;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    readonly ignoreMissing?: boolean;
    /**
     * JSON representation of this data source.
     */
    readonly json: string;
    /**
     * Handle failures for the processor.
     */
    readonly onFailures?: string[];
    /**
     * The pattern to apply to the field.
     */
    readonly pattern: string;
    /**
     * Identifier for the processor.
     */
    readonly tag?: string;
}
/**
 * Similar to the Grok Processor, dissect also extracts structured fields out of a single text field within a document. However unlike the Grok Processor, dissect does not use Regular Expressions. This allows dissect’s syntax to be simple and for some cases faster than the Grok Processor.
 *
 * Dissect matches a single text field against a defined pattern.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/dissect-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const dissect = elasticstack.getIngestProcessorDissect({
 *     field: "message",
 *     pattern: `%{clientip} %{ident} %{auth} [%{@timestamp}] "%{verb} %{request} HTTP/%{httpversion}" %{status} %{size}`,
 * });
 * const myIngestPipeline = new elasticstack.IngestPipeline("myIngestPipeline", {processors: [dissect.then(dissect => dissect.json)]});
 * ```
 */
export function getIngestProcessorDissectOutput(args: GetIngestProcessorDissectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIngestProcessorDissectResult> {
    return pulumi.output(args).apply((a: any) => getIngestProcessorDissect(a, opts))
}

/**
 * A collection of arguments for invoking getIngestProcessorDissect.
 */
export interface GetIngestProcessorDissectOutputArgs {
    /**
     * The character(s) that separate the appended fields.
     */
    appendSeparator?: pulumi.Input<string>;
    /**
     * Description of the processor.
     */
    description?: pulumi.Input<string>;
    /**
     * The field to dissect.
     */
    field: pulumi.Input<string>;
    /**
     * Conditionally execute the processor
     */
    if?: pulumi.Input<string>;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: pulumi.Input<boolean>;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    ignoreMissing?: pulumi.Input<boolean>;
    /**
     * Handle failures for the processor.
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The pattern to apply to the field.
     */
    pattern: pulumi.Input<string>;
    /**
     * Identifier for the processor.
     */
    tag?: pulumi.Input<string>;
}
