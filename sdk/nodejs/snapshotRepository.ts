// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Registers or updates a snapshot repository. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/put-snapshot-repo-api.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const myUrlRepo = new elasticstack.SnapshotRepository("myUrlRepo", {url: {
 *     url: "https://example.com/repo",
 * }});
 * const myFsRepo = new elasticstack.SnapshotRepository("myFsRepo", {fs: {
 *     compress: true,
 *     location: "/tmp",
 *     maxRestoreBytesPerSec: "10mb",
 * }});
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import elasticstack:index/snapshotRepository:SnapshotRepository my_repository <cluster_uuid>/<repository name>
 * ```
 */
export class SnapshotRepository extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotRepositoryState, opts?: pulumi.CustomResourceOptions): SnapshotRepository {
        return new SnapshotRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/snapshotRepository:SnapshotRepository';

    /**
     * Returns true if the given object is an instance of SnapshotRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotRepository.__pulumiType;
    }

    /**
     * Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
     */
    public readonly azure!: pulumi.Output<outputs.SnapshotRepositoryAzure | undefined>;
    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.SnapshotRepositoryElasticsearchConnection | undefined>;
    /**
     * Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
     */
    public readonly fs!: pulumi.Output<outputs.SnapshotRepositoryFs | undefined>;
    /**
     * Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
     */
    public readonly gcs!: pulumi.Output<outputs.SnapshotRepositoryGcs | undefined>;
    /**
     * Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
     */
    public readonly hdfs!: pulumi.Output<outputs.SnapshotRepositoryHdfs | undefined>;
    /**
     * Name of the snapshot repository to register or update.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
     */
    public readonly s3!: pulumi.Output<outputs.SnapshotRepositoryS3 | undefined>;
    /**
     * URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
     */
    public readonly url!: pulumi.Output<outputs.SnapshotRepositoryUrl | undefined>;
    /**
     * If true, the request verifies the repository is functional on all master and data nodes in the cluster.
     */
    public readonly verify!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SnapshotRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnapshotRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotRepositoryArgs | SnapshotRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotRepositoryState | undefined;
            resourceInputs["azure"] = state ? state.azure : undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["fs"] = state ? state.fs : undefined;
            resourceInputs["gcs"] = state ? state.gcs : undefined;
            resourceInputs["hdfs"] = state ? state.hdfs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["verify"] = state ? state.verify : undefined;
        } else {
            const args = argsOrState as SnapshotRepositoryArgs | undefined;
            resourceInputs["azure"] = args ? args.azure : undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["fs"] = args ? args.fs : undefined;
            resourceInputs["gcs"] = args ? args.gcs : undefined;
            resourceInputs["hdfs"] = args ? args.hdfs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["verify"] = args ? args.verify : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnapshotRepository resources.
 */
export interface SnapshotRepositoryState {
    /**
     * Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
     */
    azure?: pulumi.Input<inputs.SnapshotRepositoryAzure>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.SnapshotRepositoryElasticsearchConnection>;
    /**
     * Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
     */
    fs?: pulumi.Input<inputs.SnapshotRepositoryFs>;
    /**
     * Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
     */
    gcs?: pulumi.Input<inputs.SnapshotRepositoryGcs>;
    /**
     * Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
     */
    hdfs?: pulumi.Input<inputs.SnapshotRepositoryHdfs>;
    /**
     * Name of the snapshot repository to register or update.
     */
    name?: pulumi.Input<string>;
    /**
     * Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
     */
    s3?: pulumi.Input<inputs.SnapshotRepositoryS3>;
    /**
     * URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
     */
    url?: pulumi.Input<inputs.SnapshotRepositoryUrl>;
    /**
     * If true, the request verifies the repository is functional on all master and data nodes in the cluster.
     */
    verify?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SnapshotRepository resource.
 */
export interface SnapshotRepositoryArgs {
    /**
     * Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
     */
    azure?: pulumi.Input<inputs.SnapshotRepositoryAzure>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.SnapshotRepositoryElasticsearchConnection>;
    /**
     * Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
     */
    fs?: pulumi.Input<inputs.SnapshotRepositoryFs>;
    /**
     * Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
     */
    gcs?: pulumi.Input<inputs.SnapshotRepositoryGcs>;
    /**
     * Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
     */
    hdfs?: pulumi.Input<inputs.SnapshotRepositoryHdfs>;
    /**
     * Name of the snapshot repository to register or update.
     */
    name?: pulumi.Input<string>;
    /**
     * Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
     */
    s3?: pulumi.Input<inputs.SnapshotRepositoryS3>;
    /**
     * URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
     */
    url?: pulumi.Input<inputs.SnapshotRepositoryUrl>;
    /**
     * If true, the request verifies the repository is functional on all master and data nodes in the cluster.
     */
    verify?: pulumi.Input<boolean>;
}
