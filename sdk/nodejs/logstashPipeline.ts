// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates or updates centrally managed logstash pipelines. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-apis.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const example = new elasticstack.LogstashPipeline("example", {
 *     pipelineId: "test_pipeline",
 *     description: "This is an example pipeline",
 *     pipeline: `input{}
 * filter{}
 * output{}
 * `,
 *     pipelineMetadata: {
 *         type: "logstash_pipeline",
 *         version: "1",
 *     },
 *     pipelineBatchDelay: 50,
 *     pipelineBatchSize: 125,
 *     pipelineEcsCompatibility: "disabled",
 *     pipelineOrdered: "auto",
 *     pipelinePluginClassloaders: false,
 *     pipelineUnsafeShutdown: false,
 *     pipelineWorkers: 1,
 *     queueCheckpointAcks: 1024,
 *     queueCheckpointRetry: true,
 *     queueCheckpointWrites: 1024,
 *     queueDrain: false,
 *     queueMaxBytesNumber: 1,
 *     queueMaxBytesUnits: "gb",
 *     queueMaxEvents: 0,
 *     queuePageCapacity: "64mb",
 *     queueType: "persisted",
 * });
 * export const pipeline = example.pipelineId;
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import elasticstack:index/logstashPipeline:LogstashPipeline my_pipeline <cluster_uuid>/<pipeline ID>
 * ```
 */
export class LogstashPipeline extends pulumi.CustomResource {
    /**
     * Get an existing LogstashPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogstashPipelineState, opts?: pulumi.CustomResourceOptions): LogstashPipeline {
        return new LogstashPipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/logstashPipeline:LogstashPipeline';

    /**
     * Returns true if the given object is an instance of LogstashPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogstashPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogstashPipeline.__pulumiType;
    }

    /**
     * Description of the pipeline.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.LogstashPipelineElasticsearchConnection | undefined>;
    /**
     * Date the pipeline was last updated.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * Configuration for the pipeline.
     */
    public readonly pipeline!: pulumi.Output<string>;
    /**
     * Time in milliseconds to wait for each event before sending an undersized batch to pipeline workers.
     */
    public readonly pipelineBatchDelay!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of events an individual worker thread collects before executing filters and outputs.
     */
    public readonly pipelineBatchSize!: pulumi.Output<number | undefined>;
    /**
     * Sets the pipeline default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.
     */
    public readonly pipelineEcsCompatibility!: pulumi.Output<string | undefined>;
    /**
     * Identifier for the pipeline.
     */
    public readonly pipelineId!: pulumi.Output<string>;
    /**
     * Optional metadata about the pipeline.
     */
    public readonly pipelineMetadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Set the pipeline event ordering.
     */
    public readonly pipelineOrdered!: pulumi.Output<string | undefined>;
    /**
     * (Beta) Load Java plugins in independent classloaders to isolate their dependencies.
     */
    public readonly pipelinePluginClassloaders!: pulumi.Output<boolean | undefined>;
    /**
     * Forces Logstash to exit during shutdown even if there are still inflight events in memory.
     */
    public readonly pipelineUnsafeShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * The number of parallel workers used to run the filter and output stages of the pipeline.
     */
    public readonly pipelineWorkers!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled.
     */
    public readonly queueCheckpointAcks!: pulumi.Output<number | undefined>;
    /**
     * When enabled, Logstash will retry four times per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried.
     */
    public readonly queueCheckpointRetry!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of written events before forcing a checkpoint when persistent queues are enabled.
     */
    public readonly queueCheckpointWrites!: pulumi.Output<number | undefined>;
    /**
     * When enabled, Logstash waits until the persistent queue is drained before shutting down.
     */
    public readonly queueDrain!: pulumi.Output<boolean | undefined>;
    /**
     * The total capacity of the queue when persistent queues are enabled.
     */
    public readonly queueMaxBytesNumber!: pulumi.Output<number | undefined>;
    /**
     * Units for the total capacity of the queue when persistent queues are enabled.
     */
    public readonly queueMaxBytesUnits!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of unread events in the queue when persistent queues are enabled.
     */
    public readonly queueMaxEvents!: pulumi.Output<number | undefined>;
    /**
     * The size of the page data files used when persistent queues are enabled. The queue data consists of append-only data files separated into pages.
     */
    public readonly queuePageCapacity!: pulumi.Output<string | undefined>;
    /**
     * The internal queueing model for event buffering. Options are memory for in-memory queueing, or persisted for disk-based acknowledged queueing.
     */
    public readonly queueType!: pulumi.Output<string | undefined>;
    /**
     * User who last updated the pipeline.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a LogstashPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogstashPipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogstashPipelineArgs | LogstashPipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogstashPipelineState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["pipeline"] = state ? state.pipeline : undefined;
            resourceInputs["pipelineBatchDelay"] = state ? state.pipelineBatchDelay : undefined;
            resourceInputs["pipelineBatchSize"] = state ? state.pipelineBatchSize : undefined;
            resourceInputs["pipelineEcsCompatibility"] = state ? state.pipelineEcsCompatibility : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["pipelineMetadata"] = state ? state.pipelineMetadata : undefined;
            resourceInputs["pipelineOrdered"] = state ? state.pipelineOrdered : undefined;
            resourceInputs["pipelinePluginClassloaders"] = state ? state.pipelinePluginClassloaders : undefined;
            resourceInputs["pipelineUnsafeShutdown"] = state ? state.pipelineUnsafeShutdown : undefined;
            resourceInputs["pipelineWorkers"] = state ? state.pipelineWorkers : undefined;
            resourceInputs["queueCheckpointAcks"] = state ? state.queueCheckpointAcks : undefined;
            resourceInputs["queueCheckpointRetry"] = state ? state.queueCheckpointRetry : undefined;
            resourceInputs["queueCheckpointWrites"] = state ? state.queueCheckpointWrites : undefined;
            resourceInputs["queueDrain"] = state ? state.queueDrain : undefined;
            resourceInputs["queueMaxBytesNumber"] = state ? state.queueMaxBytesNumber : undefined;
            resourceInputs["queueMaxBytesUnits"] = state ? state.queueMaxBytesUnits : undefined;
            resourceInputs["queueMaxEvents"] = state ? state.queueMaxEvents : undefined;
            resourceInputs["queuePageCapacity"] = state ? state.queuePageCapacity : undefined;
            resourceInputs["queueType"] = state ? state.queueType : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as LogstashPipelineArgs | undefined;
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.pipelineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["pipeline"] = args ? args.pipeline : undefined;
            resourceInputs["pipelineBatchDelay"] = args ? args.pipelineBatchDelay : undefined;
            resourceInputs["pipelineBatchSize"] = args ? args.pipelineBatchSize : undefined;
            resourceInputs["pipelineEcsCompatibility"] = args ? args.pipelineEcsCompatibility : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["pipelineMetadata"] = args ? args.pipelineMetadata : undefined;
            resourceInputs["pipelineOrdered"] = args ? args.pipelineOrdered : undefined;
            resourceInputs["pipelinePluginClassloaders"] = args ? args.pipelinePluginClassloaders : undefined;
            resourceInputs["pipelineUnsafeShutdown"] = args ? args.pipelineUnsafeShutdown : undefined;
            resourceInputs["pipelineWorkers"] = args ? args.pipelineWorkers : undefined;
            resourceInputs["queueCheckpointAcks"] = args ? args.queueCheckpointAcks : undefined;
            resourceInputs["queueCheckpointRetry"] = args ? args.queueCheckpointRetry : undefined;
            resourceInputs["queueCheckpointWrites"] = args ? args.queueCheckpointWrites : undefined;
            resourceInputs["queueDrain"] = args ? args.queueDrain : undefined;
            resourceInputs["queueMaxBytesNumber"] = args ? args.queueMaxBytesNumber : undefined;
            resourceInputs["queueMaxBytesUnits"] = args ? args.queueMaxBytesUnits : undefined;
            resourceInputs["queueMaxEvents"] = args ? args.queueMaxEvents : undefined;
            resourceInputs["queuePageCapacity"] = args ? args.queuePageCapacity : undefined;
            resourceInputs["queueType"] = args ? args.queueType : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["lastModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogstashPipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogstashPipeline resources.
 */
export interface LogstashPipelineState {
    /**
     * Description of the pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.LogstashPipelineElasticsearchConnection>;
    /**
     * Date the pipeline was last updated.
     */
    lastModified?: pulumi.Input<string>;
    /**
     * Configuration for the pipeline.
     */
    pipeline?: pulumi.Input<string>;
    /**
     * Time in milliseconds to wait for each event before sending an undersized batch to pipeline workers.
     */
    pipelineBatchDelay?: pulumi.Input<number>;
    /**
     * The maximum number of events an individual worker thread collects before executing filters and outputs.
     */
    pipelineBatchSize?: pulumi.Input<number>;
    /**
     * Sets the pipeline default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.
     */
    pipelineEcsCompatibility?: pulumi.Input<string>;
    /**
     * Identifier for the pipeline.
     */
    pipelineId?: pulumi.Input<string>;
    /**
     * Optional metadata about the pipeline.
     */
    pipelineMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set the pipeline event ordering.
     */
    pipelineOrdered?: pulumi.Input<string>;
    /**
     * (Beta) Load Java plugins in independent classloaders to isolate their dependencies.
     */
    pipelinePluginClassloaders?: pulumi.Input<boolean>;
    /**
     * Forces Logstash to exit during shutdown even if there are still inflight events in memory.
     */
    pipelineUnsafeShutdown?: pulumi.Input<boolean>;
    /**
     * The number of parallel workers used to run the filter and output stages of the pipeline.
     */
    pipelineWorkers?: pulumi.Input<number>;
    /**
     * The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled.
     */
    queueCheckpointAcks?: pulumi.Input<number>;
    /**
     * When enabled, Logstash will retry four times per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried.
     */
    queueCheckpointRetry?: pulumi.Input<boolean>;
    /**
     * The maximum number of written events before forcing a checkpoint when persistent queues are enabled.
     */
    queueCheckpointWrites?: pulumi.Input<number>;
    /**
     * When enabled, Logstash waits until the persistent queue is drained before shutting down.
     */
    queueDrain?: pulumi.Input<boolean>;
    /**
     * The total capacity of the queue when persistent queues are enabled.
     */
    queueMaxBytesNumber?: pulumi.Input<number>;
    /**
     * Units for the total capacity of the queue when persistent queues are enabled.
     */
    queueMaxBytesUnits?: pulumi.Input<string>;
    /**
     * The maximum number of unread events in the queue when persistent queues are enabled.
     */
    queueMaxEvents?: pulumi.Input<number>;
    /**
     * The size of the page data files used when persistent queues are enabled. The queue data consists of append-only data files separated into pages.
     */
    queuePageCapacity?: pulumi.Input<string>;
    /**
     * The internal queueing model for event buffering. Options are memory for in-memory queueing, or persisted for disk-based acknowledged queueing.
     */
    queueType?: pulumi.Input<string>;
    /**
     * User who last updated the pipeline.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogstashPipeline resource.
 */
export interface LogstashPipelineArgs {
    /**
     * Description of the pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.LogstashPipelineElasticsearchConnection>;
    /**
     * Configuration for the pipeline.
     */
    pipeline: pulumi.Input<string>;
    /**
     * Time in milliseconds to wait for each event before sending an undersized batch to pipeline workers.
     */
    pipelineBatchDelay?: pulumi.Input<number>;
    /**
     * The maximum number of events an individual worker thread collects before executing filters and outputs.
     */
    pipelineBatchSize?: pulumi.Input<number>;
    /**
     * Sets the pipeline default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.
     */
    pipelineEcsCompatibility?: pulumi.Input<string>;
    /**
     * Identifier for the pipeline.
     */
    pipelineId: pulumi.Input<string>;
    /**
     * Optional metadata about the pipeline.
     */
    pipelineMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set the pipeline event ordering.
     */
    pipelineOrdered?: pulumi.Input<string>;
    /**
     * (Beta) Load Java plugins in independent classloaders to isolate their dependencies.
     */
    pipelinePluginClassloaders?: pulumi.Input<boolean>;
    /**
     * Forces Logstash to exit during shutdown even if there are still inflight events in memory.
     */
    pipelineUnsafeShutdown?: pulumi.Input<boolean>;
    /**
     * The number of parallel workers used to run the filter and output stages of the pipeline.
     */
    pipelineWorkers?: pulumi.Input<number>;
    /**
     * The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled.
     */
    queueCheckpointAcks?: pulumi.Input<number>;
    /**
     * When enabled, Logstash will retry four times per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried.
     */
    queueCheckpointRetry?: pulumi.Input<boolean>;
    /**
     * The maximum number of written events before forcing a checkpoint when persistent queues are enabled.
     */
    queueCheckpointWrites?: pulumi.Input<number>;
    /**
     * When enabled, Logstash waits until the persistent queue is drained before shutting down.
     */
    queueDrain?: pulumi.Input<boolean>;
    /**
     * The total capacity of the queue when persistent queues are enabled.
     */
    queueMaxBytesNumber?: pulumi.Input<number>;
    /**
     * Units for the total capacity of the queue when persistent queues are enabled.
     */
    queueMaxBytesUnits?: pulumi.Input<string>;
    /**
     * The maximum number of unread events in the queue when persistent queues are enabled.
     */
    queueMaxEvents?: pulumi.Input<number>;
    /**
     * The size of the page data files used when persistent queues are enabled. The queue data consists of append-only data files separated into pages.
     */
    queuePageCapacity?: pulumi.Input<string>;
    /**
     * The internal queueing model for event buffering. Options are memory for in-memory queueing, or persisted for disk-based acknowledged queueing.
     */
    queueType?: pulumi.Input<string>;
    /**
     * User who last updated the pipeline.
     */
    username?: pulumi.Input<string>;
}
