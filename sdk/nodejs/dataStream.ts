// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages data streams. This resource can create, delete and show the information about the created data stream. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/data-stream-apis.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * // Create an ILM policy for our data stream
 * const myIlm = new elasticstack.IndexLifecycle("myIlm", {
 *     hot: {
 *         minAge: "1h",
 *         setPriority: {
 *             priority: 10,
 *         },
 *         rollover: {
 *             maxAge: "1d",
 *         },
 *         readonly: {},
 *     },
 *     "delete": {
 *         minAge: "2d",
 *         "delete": {},
 *     },
 * });
 * // First we must have a index template created
 * const myDataStreamTemplate = new elasticstack.IndexTemplate("myDataStreamTemplate", {
 *     indexPatterns: ["my-stream*"],
 *     template: {
 *         settings: myIlm.name.apply(name => JSON.stringify({
 *             "lifecycle.name": name,
 *         })),
 *     },
 *     dataStream: {},
 * });
 * // and now we can create data stream based on the index template
 * const myDataStream = new elasticstack.DataStream("myDataStream", {}, {
 *     dependsOn: [myDataStreamTemplate],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import elasticstack:index/dataStream:DataStream my_data_stream <cluster_uuid>/<data_stream_name>
 * ```
 */
export class DataStream extends pulumi.CustomResource {
    /**
     * Get an existing DataStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataStreamState, opts?: pulumi.CustomResourceOptions): DataStream {
        return new DataStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/dataStream:DataStream';

    /**
     * Returns true if the given object is an instance of DataStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataStream.__pulumiType;
    }

    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.DataStreamElasticsearchConnection | undefined>;
    /**
     * Current generation for the data stream.
     */
    public /*out*/ readonly generation!: pulumi.Output<number>;
    /**
     * If `true`, the data stream is hidden.
     */
    public /*out*/ readonly hidden!: pulumi.Output<boolean>;
    /**
     * Name of the current ILM lifecycle policy in the stream’s matching index template.
     */
    public /*out*/ readonly ilmPolicy!: pulumi.Output<string>;
    /**
     * Array of objects containing information about the data stream’s backing indices. The last item in this array contains information about the stream’s current write index.
     */
    public /*out*/ readonly indices!: pulumi.Output<outputs.DataStreamIndex[]>;
    /**
     * Custom metadata for the stream, copied from the _meta object of the stream’s matching index template.
     */
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    /**
     * Name of the data stream to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If `true`, the data stream is created and managed by cross-cluster replication and the local cluster can not write into this data stream or change its mappings.
     */
    public /*out*/ readonly replicated!: pulumi.Output<boolean>;
    /**
     * Health status of the data stream.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * If `true`, the data stream is created and managed by an Elastic stack component and cannot be modified through normal user interaction.
     */
    public /*out*/ readonly system!: pulumi.Output<boolean>;
    /**
     * Name of the index template used to create the data stream’s backing indices.
     */
    public /*out*/ readonly template!: pulumi.Output<string>;
    /**
     * Contains information about the data stream’s @timestamp field.
     */
    public /*out*/ readonly timestampField!: pulumi.Output<string>;

    /**
     * Create a DataStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DataStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataStreamArgs | DataStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataStreamState | undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["ilmPolicy"] = state ? state.ilmPolicy : undefined;
            resourceInputs["indices"] = state ? state.indices : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replicated"] = state ? state.replicated : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["timestampField"] = state ? state.timestampField : undefined;
        } else {
            const args = argsOrState as DataStreamArgs | undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["hidden"] = undefined /*out*/;
            resourceInputs["ilmPolicy"] = undefined /*out*/;
            resourceInputs["indices"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["replicated"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["template"] = undefined /*out*/;
            resourceInputs["timestampField"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataStream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataStream resources.
 */
export interface DataStreamState {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.DataStreamElasticsearchConnection>;
    /**
     * Current generation for the data stream.
     */
    generation?: pulumi.Input<number>;
    /**
     * If `true`, the data stream is hidden.
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * Name of the current ILM lifecycle policy in the stream’s matching index template.
     */
    ilmPolicy?: pulumi.Input<string>;
    /**
     * Array of objects containing information about the data stream’s backing indices. The last item in this array contains information about the stream’s current write index.
     */
    indices?: pulumi.Input<pulumi.Input<inputs.DataStreamIndex>[]>;
    /**
     * Custom metadata for the stream, copied from the _meta object of the stream’s matching index template.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Name of the data stream to create.
     */
    name?: pulumi.Input<string>;
    /**
     * If `true`, the data stream is created and managed by cross-cluster replication and the local cluster can not write into this data stream or change its mappings.
     */
    replicated?: pulumi.Input<boolean>;
    /**
     * Health status of the data stream.
     */
    status?: pulumi.Input<string>;
    /**
     * If `true`, the data stream is created and managed by an Elastic stack component and cannot be modified through normal user interaction.
     */
    system?: pulumi.Input<boolean>;
    /**
     * Name of the index template used to create the data stream’s backing indices.
     */
    template?: pulumi.Input<string>;
    /**
     * Contains information about the data stream’s @timestamp field.
     */
    timestampField?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataStream resource.
 */
export interface DataStreamArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.DataStreamElasticsearchConnection>;
    /**
     * Name of the data stream to create.
     */
    name?: pulumi.Input<string>;
}
