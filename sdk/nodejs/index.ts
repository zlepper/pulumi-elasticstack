// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterSettingsArgs, ClusterSettingsState } from "./clusterSettings";
export type ClusterSettings = import("./clusterSettings").ClusterSettings;
export const ClusterSettings: typeof import("./clusterSettings").ClusterSettings = null as any;
utilities.lazyLoad(exports, ["ClusterSettings"], () => require("./clusterSettings"));

export { ComponentTemplateArgs, ComponentTemplateState } from "./componentTemplate";
export type ComponentTemplate = import("./componentTemplate").ComponentTemplate;
export const ComponentTemplate: typeof import("./componentTemplate").ComponentTemplate = null as any;
utilities.lazyLoad(exports, ["ComponentTemplate"], () => require("./componentTemplate"));

export { DataStreamArgs, DataStreamState } from "./dataStream";
export type DataStream = import("./dataStream").DataStream;
export const DataStream: typeof import("./dataStream").DataStream = null as any;
utilities.lazyLoad(exports, ["DataStream"], () => require("./dataStream"));

export { GetIngestProcessorAppendArgs, GetIngestProcessorAppendResult, GetIngestProcessorAppendOutputArgs } from "./getIngestProcessorAppend";
export const getIngestProcessorAppend: typeof import("./getIngestProcessorAppend").getIngestProcessorAppend = null as any;
export const getIngestProcessorAppendOutput: typeof import("./getIngestProcessorAppend").getIngestProcessorAppendOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorAppend","getIngestProcessorAppendOutput"], () => require("./getIngestProcessorAppend"));

export { GetIngestProcessorBytesArgs, GetIngestProcessorBytesResult, GetIngestProcessorBytesOutputArgs } from "./getIngestProcessorBytes";
export const getIngestProcessorBytes: typeof import("./getIngestProcessorBytes").getIngestProcessorBytes = null as any;
export const getIngestProcessorBytesOutput: typeof import("./getIngestProcessorBytes").getIngestProcessorBytesOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorBytes","getIngestProcessorBytesOutput"], () => require("./getIngestProcessorBytes"));

export { GetIngestProcessorCircleArgs, GetIngestProcessorCircleResult, GetIngestProcessorCircleOutputArgs } from "./getIngestProcessorCircle";
export const getIngestProcessorCircle: typeof import("./getIngestProcessorCircle").getIngestProcessorCircle = null as any;
export const getIngestProcessorCircleOutput: typeof import("./getIngestProcessorCircle").getIngestProcessorCircleOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorCircle","getIngestProcessorCircleOutput"], () => require("./getIngestProcessorCircle"));

export { GetIngestProcessorCommunityIdArgs, GetIngestProcessorCommunityIdResult, GetIngestProcessorCommunityIdOutputArgs } from "./getIngestProcessorCommunityId";
export const getIngestProcessorCommunityId: typeof import("./getIngestProcessorCommunityId").getIngestProcessorCommunityId = null as any;
export const getIngestProcessorCommunityIdOutput: typeof import("./getIngestProcessorCommunityId").getIngestProcessorCommunityIdOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorCommunityId","getIngestProcessorCommunityIdOutput"], () => require("./getIngestProcessorCommunityId"));

export { GetIngestProcessorConvertArgs, GetIngestProcessorConvertResult, GetIngestProcessorConvertOutputArgs } from "./getIngestProcessorConvert";
export const getIngestProcessorConvert: typeof import("./getIngestProcessorConvert").getIngestProcessorConvert = null as any;
export const getIngestProcessorConvertOutput: typeof import("./getIngestProcessorConvert").getIngestProcessorConvertOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorConvert","getIngestProcessorConvertOutput"], () => require("./getIngestProcessorConvert"));

export { GetIngestProcessorCsvArgs, GetIngestProcessorCsvResult, GetIngestProcessorCsvOutputArgs } from "./getIngestProcessorCsv";
export const getIngestProcessorCsv: typeof import("./getIngestProcessorCsv").getIngestProcessorCsv = null as any;
export const getIngestProcessorCsvOutput: typeof import("./getIngestProcessorCsv").getIngestProcessorCsvOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorCsv","getIngestProcessorCsvOutput"], () => require("./getIngestProcessorCsv"));

export { GetIngestProcessorDateArgs, GetIngestProcessorDateResult, GetIngestProcessorDateOutputArgs } from "./getIngestProcessorDate";
export const getIngestProcessorDate: typeof import("./getIngestProcessorDate").getIngestProcessorDate = null as any;
export const getIngestProcessorDateOutput: typeof import("./getIngestProcessorDate").getIngestProcessorDateOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorDate","getIngestProcessorDateOutput"], () => require("./getIngestProcessorDate"));

export { GetIngestProcessorDateIndexNameArgs, GetIngestProcessorDateIndexNameResult, GetIngestProcessorDateIndexNameOutputArgs } from "./getIngestProcessorDateIndexName";
export const getIngestProcessorDateIndexName: typeof import("./getIngestProcessorDateIndexName").getIngestProcessorDateIndexName = null as any;
export const getIngestProcessorDateIndexNameOutput: typeof import("./getIngestProcessorDateIndexName").getIngestProcessorDateIndexNameOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorDateIndexName","getIngestProcessorDateIndexNameOutput"], () => require("./getIngestProcessorDateIndexName"));

export { GetIngestProcessorDissectArgs, GetIngestProcessorDissectResult, GetIngestProcessorDissectOutputArgs } from "./getIngestProcessorDissect";
export const getIngestProcessorDissect: typeof import("./getIngestProcessorDissect").getIngestProcessorDissect = null as any;
export const getIngestProcessorDissectOutput: typeof import("./getIngestProcessorDissect").getIngestProcessorDissectOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorDissect","getIngestProcessorDissectOutput"], () => require("./getIngestProcessorDissect"));

export { GetIngestProcessorDotExpanderArgs, GetIngestProcessorDotExpanderResult, GetIngestProcessorDotExpanderOutputArgs } from "./getIngestProcessorDotExpander";
export const getIngestProcessorDotExpander: typeof import("./getIngestProcessorDotExpander").getIngestProcessorDotExpander = null as any;
export const getIngestProcessorDotExpanderOutput: typeof import("./getIngestProcessorDotExpander").getIngestProcessorDotExpanderOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorDotExpander","getIngestProcessorDotExpanderOutput"], () => require("./getIngestProcessorDotExpander"));

export { GetIngestProcessorDropArgs, GetIngestProcessorDropResult, GetIngestProcessorDropOutputArgs } from "./getIngestProcessorDrop";
export const getIngestProcessorDrop: typeof import("./getIngestProcessorDrop").getIngestProcessorDrop = null as any;
export const getIngestProcessorDropOutput: typeof import("./getIngestProcessorDrop").getIngestProcessorDropOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorDrop","getIngestProcessorDropOutput"], () => require("./getIngestProcessorDrop"));

export { GetIngestProcessorEnrichArgs, GetIngestProcessorEnrichResult, GetIngestProcessorEnrichOutputArgs } from "./getIngestProcessorEnrich";
export const getIngestProcessorEnrich: typeof import("./getIngestProcessorEnrich").getIngestProcessorEnrich = null as any;
export const getIngestProcessorEnrichOutput: typeof import("./getIngestProcessorEnrich").getIngestProcessorEnrichOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorEnrich","getIngestProcessorEnrichOutput"], () => require("./getIngestProcessorEnrich"));

export { GetIngestProcessorFailArgs, GetIngestProcessorFailResult, GetIngestProcessorFailOutputArgs } from "./getIngestProcessorFail";
export const getIngestProcessorFail: typeof import("./getIngestProcessorFail").getIngestProcessorFail = null as any;
export const getIngestProcessorFailOutput: typeof import("./getIngestProcessorFail").getIngestProcessorFailOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorFail","getIngestProcessorFailOutput"], () => require("./getIngestProcessorFail"));

export { GetIngestProcessorFingerprintArgs, GetIngestProcessorFingerprintResult, GetIngestProcessorFingerprintOutputArgs } from "./getIngestProcessorFingerprint";
export const getIngestProcessorFingerprint: typeof import("./getIngestProcessorFingerprint").getIngestProcessorFingerprint = null as any;
export const getIngestProcessorFingerprintOutput: typeof import("./getIngestProcessorFingerprint").getIngestProcessorFingerprintOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorFingerprint","getIngestProcessorFingerprintOutput"], () => require("./getIngestProcessorFingerprint"));

export { GetIngestProcessorForeachArgs, GetIngestProcessorForeachResult, GetIngestProcessorForeachOutputArgs } from "./getIngestProcessorForeach";
export const getIngestProcessorForeach: typeof import("./getIngestProcessorForeach").getIngestProcessorForeach = null as any;
export const getIngestProcessorForeachOutput: typeof import("./getIngestProcessorForeach").getIngestProcessorForeachOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorForeach","getIngestProcessorForeachOutput"], () => require("./getIngestProcessorForeach"));

export { GetIngestProcessorGeoipArgs, GetIngestProcessorGeoipResult, GetIngestProcessorGeoipOutputArgs } from "./getIngestProcessorGeoip";
export const getIngestProcessorGeoip: typeof import("./getIngestProcessorGeoip").getIngestProcessorGeoip = null as any;
export const getIngestProcessorGeoipOutput: typeof import("./getIngestProcessorGeoip").getIngestProcessorGeoipOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorGeoip","getIngestProcessorGeoipOutput"], () => require("./getIngestProcessorGeoip"));

export { GetIngestProcessorGrokArgs, GetIngestProcessorGrokResult, GetIngestProcessorGrokOutputArgs } from "./getIngestProcessorGrok";
export const getIngestProcessorGrok: typeof import("./getIngestProcessorGrok").getIngestProcessorGrok = null as any;
export const getIngestProcessorGrokOutput: typeof import("./getIngestProcessorGrok").getIngestProcessorGrokOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorGrok","getIngestProcessorGrokOutput"], () => require("./getIngestProcessorGrok"));

export { GetIngestProcessorGsubArgs, GetIngestProcessorGsubResult, GetIngestProcessorGsubOutputArgs } from "./getIngestProcessorGsub";
export const getIngestProcessorGsub: typeof import("./getIngestProcessorGsub").getIngestProcessorGsub = null as any;
export const getIngestProcessorGsubOutput: typeof import("./getIngestProcessorGsub").getIngestProcessorGsubOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorGsub","getIngestProcessorGsubOutput"], () => require("./getIngestProcessorGsub"));

export { GetIngestProcessorHtmlStripArgs, GetIngestProcessorHtmlStripResult, GetIngestProcessorHtmlStripOutputArgs } from "./getIngestProcessorHtmlStrip";
export const getIngestProcessorHtmlStrip: typeof import("./getIngestProcessorHtmlStrip").getIngestProcessorHtmlStrip = null as any;
export const getIngestProcessorHtmlStripOutput: typeof import("./getIngestProcessorHtmlStrip").getIngestProcessorHtmlStripOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorHtmlStrip","getIngestProcessorHtmlStripOutput"], () => require("./getIngestProcessorHtmlStrip"));

export { GetIngestProcessorJoinArgs, GetIngestProcessorJoinResult, GetIngestProcessorJoinOutputArgs } from "./getIngestProcessorJoin";
export const getIngestProcessorJoin: typeof import("./getIngestProcessorJoin").getIngestProcessorJoin = null as any;
export const getIngestProcessorJoinOutput: typeof import("./getIngestProcessorJoin").getIngestProcessorJoinOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorJoin","getIngestProcessorJoinOutput"], () => require("./getIngestProcessorJoin"));

export { GetIngestProcessorJsonArgs, GetIngestProcessorJsonResult, GetIngestProcessorJsonOutputArgs } from "./getIngestProcessorJson";
export const getIngestProcessorJson: typeof import("./getIngestProcessorJson").getIngestProcessorJson = null as any;
export const getIngestProcessorJsonOutput: typeof import("./getIngestProcessorJson").getIngestProcessorJsonOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorJson","getIngestProcessorJsonOutput"], () => require("./getIngestProcessorJson"));

export { GetIngestProcessorKvArgs, GetIngestProcessorKvResult, GetIngestProcessorKvOutputArgs } from "./getIngestProcessorKv";
export const getIngestProcessorKv: typeof import("./getIngestProcessorKv").getIngestProcessorKv = null as any;
export const getIngestProcessorKvOutput: typeof import("./getIngestProcessorKv").getIngestProcessorKvOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorKv","getIngestProcessorKvOutput"], () => require("./getIngestProcessorKv"));

export { GetIngestProcessorLowercaseArgs, GetIngestProcessorLowercaseResult, GetIngestProcessorLowercaseOutputArgs } from "./getIngestProcessorLowercase";
export const getIngestProcessorLowercase: typeof import("./getIngestProcessorLowercase").getIngestProcessorLowercase = null as any;
export const getIngestProcessorLowercaseOutput: typeof import("./getIngestProcessorLowercase").getIngestProcessorLowercaseOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorLowercase","getIngestProcessorLowercaseOutput"], () => require("./getIngestProcessorLowercase"));

export { GetIngestProcessorNetworkDirectionArgs, GetIngestProcessorNetworkDirectionResult, GetIngestProcessorNetworkDirectionOutputArgs } from "./getIngestProcessorNetworkDirection";
export const getIngestProcessorNetworkDirection: typeof import("./getIngestProcessorNetworkDirection").getIngestProcessorNetworkDirection = null as any;
export const getIngestProcessorNetworkDirectionOutput: typeof import("./getIngestProcessorNetworkDirection").getIngestProcessorNetworkDirectionOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorNetworkDirection","getIngestProcessorNetworkDirectionOutput"], () => require("./getIngestProcessorNetworkDirection"));

export { GetIngestProcessorPipelineArgs, GetIngestProcessorPipelineResult, GetIngestProcessorPipelineOutputArgs } from "./getIngestProcessorPipeline";
export const getIngestProcessorPipeline: typeof import("./getIngestProcessorPipeline").getIngestProcessorPipeline = null as any;
export const getIngestProcessorPipelineOutput: typeof import("./getIngestProcessorPipeline").getIngestProcessorPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorPipeline","getIngestProcessorPipelineOutput"], () => require("./getIngestProcessorPipeline"));

export { GetIngestProcessorRegisteredDomainArgs, GetIngestProcessorRegisteredDomainResult, GetIngestProcessorRegisteredDomainOutputArgs } from "./getIngestProcessorRegisteredDomain";
export const getIngestProcessorRegisteredDomain: typeof import("./getIngestProcessorRegisteredDomain").getIngestProcessorRegisteredDomain = null as any;
export const getIngestProcessorRegisteredDomainOutput: typeof import("./getIngestProcessorRegisteredDomain").getIngestProcessorRegisteredDomainOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorRegisteredDomain","getIngestProcessorRegisteredDomainOutput"], () => require("./getIngestProcessorRegisteredDomain"));

export { GetIngestProcessorRemoveArgs, GetIngestProcessorRemoveResult, GetIngestProcessorRemoveOutputArgs } from "./getIngestProcessorRemove";
export const getIngestProcessorRemove: typeof import("./getIngestProcessorRemove").getIngestProcessorRemove = null as any;
export const getIngestProcessorRemoveOutput: typeof import("./getIngestProcessorRemove").getIngestProcessorRemoveOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorRemove","getIngestProcessorRemoveOutput"], () => require("./getIngestProcessorRemove"));

export { GetIngestProcessorRenameArgs, GetIngestProcessorRenameResult, GetIngestProcessorRenameOutputArgs } from "./getIngestProcessorRename";
export const getIngestProcessorRename: typeof import("./getIngestProcessorRename").getIngestProcessorRename = null as any;
export const getIngestProcessorRenameOutput: typeof import("./getIngestProcessorRename").getIngestProcessorRenameOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorRename","getIngestProcessorRenameOutput"], () => require("./getIngestProcessorRename"));

export { GetIngestProcessorScriptArgs, GetIngestProcessorScriptResult, GetIngestProcessorScriptOutputArgs } from "./getIngestProcessorScript";
export const getIngestProcessorScript: typeof import("./getIngestProcessorScript").getIngestProcessorScript = null as any;
export const getIngestProcessorScriptOutput: typeof import("./getIngestProcessorScript").getIngestProcessorScriptOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorScript","getIngestProcessorScriptOutput"], () => require("./getIngestProcessorScript"));

export { GetIngestProcessorSetArgs, GetIngestProcessorSetResult, GetIngestProcessorSetOutputArgs } from "./getIngestProcessorSet";
export const getIngestProcessorSet: typeof import("./getIngestProcessorSet").getIngestProcessorSet = null as any;
export const getIngestProcessorSetOutput: typeof import("./getIngestProcessorSet").getIngestProcessorSetOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorSet","getIngestProcessorSetOutput"], () => require("./getIngestProcessorSet"));

export { GetIngestProcessorSetSecurityUserArgs, GetIngestProcessorSetSecurityUserResult, GetIngestProcessorSetSecurityUserOutputArgs } from "./getIngestProcessorSetSecurityUser";
export const getIngestProcessorSetSecurityUser: typeof import("./getIngestProcessorSetSecurityUser").getIngestProcessorSetSecurityUser = null as any;
export const getIngestProcessorSetSecurityUserOutput: typeof import("./getIngestProcessorSetSecurityUser").getIngestProcessorSetSecurityUserOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorSetSecurityUser","getIngestProcessorSetSecurityUserOutput"], () => require("./getIngestProcessorSetSecurityUser"));

export { GetIngestProcessorSortArgs, GetIngestProcessorSortResult, GetIngestProcessorSortOutputArgs } from "./getIngestProcessorSort";
export const getIngestProcessorSort: typeof import("./getIngestProcessorSort").getIngestProcessorSort = null as any;
export const getIngestProcessorSortOutput: typeof import("./getIngestProcessorSort").getIngestProcessorSortOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorSort","getIngestProcessorSortOutput"], () => require("./getIngestProcessorSort"));

export { GetIngestProcessorSplitArgs, GetIngestProcessorSplitResult, GetIngestProcessorSplitOutputArgs } from "./getIngestProcessorSplit";
export const getIngestProcessorSplit: typeof import("./getIngestProcessorSplit").getIngestProcessorSplit = null as any;
export const getIngestProcessorSplitOutput: typeof import("./getIngestProcessorSplit").getIngestProcessorSplitOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorSplit","getIngestProcessorSplitOutput"], () => require("./getIngestProcessorSplit"));

export { GetIngestProcessorTrimArgs, GetIngestProcessorTrimResult, GetIngestProcessorTrimOutputArgs } from "./getIngestProcessorTrim";
export const getIngestProcessorTrim: typeof import("./getIngestProcessorTrim").getIngestProcessorTrim = null as any;
export const getIngestProcessorTrimOutput: typeof import("./getIngestProcessorTrim").getIngestProcessorTrimOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorTrim","getIngestProcessorTrimOutput"], () => require("./getIngestProcessorTrim"));

export { GetIngestProcessorUppercaseArgs, GetIngestProcessorUppercaseResult, GetIngestProcessorUppercaseOutputArgs } from "./getIngestProcessorUppercase";
export const getIngestProcessorUppercase: typeof import("./getIngestProcessorUppercase").getIngestProcessorUppercase = null as any;
export const getIngestProcessorUppercaseOutput: typeof import("./getIngestProcessorUppercase").getIngestProcessorUppercaseOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorUppercase","getIngestProcessorUppercaseOutput"], () => require("./getIngestProcessorUppercase"));

export { GetIngestProcessorUriPartsArgs, GetIngestProcessorUriPartsResult, GetIngestProcessorUriPartsOutputArgs } from "./getIngestProcessorUriParts";
export const getIngestProcessorUriParts: typeof import("./getIngestProcessorUriParts").getIngestProcessorUriParts = null as any;
export const getIngestProcessorUriPartsOutput: typeof import("./getIngestProcessorUriParts").getIngestProcessorUriPartsOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorUriParts","getIngestProcessorUriPartsOutput"], () => require("./getIngestProcessorUriParts"));

export { GetIngestProcessorUrldecodeArgs, GetIngestProcessorUrldecodeResult, GetIngestProcessorUrldecodeOutputArgs } from "./getIngestProcessorUrldecode";
export const getIngestProcessorUrldecode: typeof import("./getIngestProcessorUrldecode").getIngestProcessorUrldecode = null as any;
export const getIngestProcessorUrldecodeOutput: typeof import("./getIngestProcessorUrldecode").getIngestProcessorUrldecodeOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorUrldecode","getIngestProcessorUrldecodeOutput"], () => require("./getIngestProcessorUrldecode"));

export { GetIngestProcessorUserAgentArgs, GetIngestProcessorUserAgentResult, GetIngestProcessorUserAgentOutputArgs } from "./getIngestProcessorUserAgent";
export const getIngestProcessorUserAgent: typeof import("./getIngestProcessorUserAgent").getIngestProcessorUserAgent = null as any;
export const getIngestProcessorUserAgentOutput: typeof import("./getIngestProcessorUserAgent").getIngestProcessorUserAgentOutput = null as any;
utilities.lazyLoad(exports, ["getIngestProcessorUserAgent","getIngestProcessorUserAgentOutput"], () => require("./getIngestProcessorUserAgent"));

export { GetSecurityRoleArgs, GetSecurityRoleResult, GetSecurityRoleOutputArgs } from "./getSecurityRole";
export const getSecurityRole: typeof import("./getSecurityRole").getSecurityRole = null as any;
export const getSecurityRoleOutput: typeof import("./getSecurityRole").getSecurityRoleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRole","getSecurityRoleOutput"], () => require("./getSecurityRole"));

export { GetSecurityRoleMappingArgs, GetSecurityRoleMappingResult, GetSecurityRoleMappingOutputArgs } from "./getSecurityRoleMapping";
export const getSecurityRoleMapping: typeof import("./getSecurityRoleMapping").getSecurityRoleMapping = null as any;
export const getSecurityRoleMappingOutput: typeof import("./getSecurityRoleMapping").getSecurityRoleMappingOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRoleMapping","getSecurityRoleMappingOutput"], () => require("./getSecurityRoleMapping"));

export { GetSecurityUserArgs, GetSecurityUserResult, GetSecurityUserOutputArgs } from "./getSecurityUser";
export const getSecurityUser: typeof import("./getSecurityUser").getSecurityUser = null as any;
export const getSecurityUserOutput: typeof import("./getSecurityUser").getSecurityUserOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityUser","getSecurityUserOutput"], () => require("./getSecurityUser"));

export { GetSnapshotRepositoryArgs, GetSnapshotRepositoryResult, GetSnapshotRepositoryOutputArgs } from "./getSnapshotRepository";
export const getSnapshotRepository: typeof import("./getSnapshotRepository").getSnapshotRepository = null as any;
export const getSnapshotRepositoryOutput: typeof import("./getSnapshotRepository").getSnapshotRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotRepository","getSnapshotRepositoryOutput"], () => require("./getSnapshotRepository"));

export { IndexLifecycleArgs, IndexLifecycleState } from "./indexLifecycle";
export type IndexLifecycle = import("./indexLifecycle").IndexLifecycle;
export const IndexLifecycle: typeof import("./indexLifecycle").IndexLifecycle = null as any;
utilities.lazyLoad(exports, ["IndexLifecycle"], () => require("./indexLifecycle"));

export { IndexTemplateArgs, IndexTemplateState } from "./indexTemplate";
export type IndexTemplate = import("./indexTemplate").IndexTemplate;
export const IndexTemplate: typeof import("./indexTemplate").IndexTemplate = null as any;
utilities.lazyLoad(exports, ["IndexTemplate"], () => require("./indexTemplate"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { IngestPipelineArgs, IngestPipelineState } from "./ingestPipeline";
export type IngestPipeline = import("./ingestPipeline").IngestPipeline;
export const IngestPipeline: typeof import("./ingestPipeline").IngestPipeline = null as any;
utilities.lazyLoad(exports, ["IngestPipeline"], () => require("./ingestPipeline"));

export { LogstashPipelineArgs, LogstashPipelineState } from "./logstashPipeline";
export type LogstashPipeline = import("./logstashPipeline").LogstashPipeline;
export const LogstashPipeline: typeof import("./logstashPipeline").LogstashPipeline = null as any;
utilities.lazyLoad(exports, ["LogstashPipeline"], () => require("./logstashPipeline"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { SecurityApiKeyArgs, SecurityApiKeyState } from "./securityApiKey";
export type SecurityApiKey = import("./securityApiKey").SecurityApiKey;
export const SecurityApiKey: typeof import("./securityApiKey").SecurityApiKey = null as any;
utilities.lazyLoad(exports, ["SecurityApiKey"], () => require("./securityApiKey"));

export { SecurityRoleArgs, SecurityRoleState } from "./securityRole";
export type SecurityRole = import("./securityRole").SecurityRole;
export const SecurityRole: typeof import("./securityRole").SecurityRole = null as any;
utilities.lazyLoad(exports, ["SecurityRole"], () => require("./securityRole"));

export { SecurityRoleMappingArgs, SecurityRoleMappingState } from "./securityRoleMapping";
export type SecurityRoleMapping = import("./securityRoleMapping").SecurityRoleMapping;
export const SecurityRoleMapping: typeof import("./securityRoleMapping").SecurityRoleMapping = null as any;
utilities.lazyLoad(exports, ["SecurityRoleMapping"], () => require("./securityRoleMapping"));

export { SecuritySystemUserArgs, SecuritySystemUserState } from "./securitySystemUser";
export type SecuritySystemUser = import("./securitySystemUser").SecuritySystemUser;
export const SecuritySystemUser: typeof import("./securitySystemUser").SecuritySystemUser = null as any;
utilities.lazyLoad(exports, ["SecuritySystemUser"], () => require("./securitySystemUser"));

export { SecurityUserArgs, SecurityUserState } from "./securityUser";
export type SecurityUser = import("./securityUser").SecurityUser;
export const SecurityUser: typeof import("./securityUser").SecurityUser = null as any;
utilities.lazyLoad(exports, ["SecurityUser"], () => require("./securityUser"));

export { SnapshotLifecycleArgs, SnapshotLifecycleState } from "./snapshotLifecycle";
export type SnapshotLifecycle = import("./snapshotLifecycle").SnapshotLifecycle;
export const SnapshotLifecycle: typeof import("./snapshotLifecycle").SnapshotLifecycle = null as any;
utilities.lazyLoad(exports, ["SnapshotLifecycle"], () => require("./snapshotLifecycle"));

export { SnapshotRepositoryArgs, SnapshotRepositoryState } from "./snapshotRepository";
export type SnapshotRepository = import("./snapshotRepository").SnapshotRepository;
export const SnapshotRepository: typeof import("./snapshotRepository").SnapshotRepository = null as any;
utilities.lazyLoad(exports, ["SnapshotRepository"], () => require("./snapshotRepository"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "elasticstack:index/clusterSettings:ClusterSettings":
                return new ClusterSettings(name, <any>undefined, { urn })
            case "elasticstack:index/componentTemplate:ComponentTemplate":
                return new ComponentTemplate(name, <any>undefined, { urn })
            case "elasticstack:index/dataStream:DataStream":
                return new DataStream(name, <any>undefined, { urn })
            case "elasticstack:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "elasticstack:index/indexLifecycle:IndexLifecycle":
                return new IndexLifecycle(name, <any>undefined, { urn })
            case "elasticstack:index/indexTemplate:IndexTemplate":
                return new IndexTemplate(name, <any>undefined, { urn })
            case "elasticstack:index/ingestPipeline:IngestPipeline":
                return new IngestPipeline(name, <any>undefined, { urn })
            case "elasticstack:index/logstashPipeline:LogstashPipeline":
                return new LogstashPipeline(name, <any>undefined, { urn })
            case "elasticstack:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "elasticstack:index/securityApiKey:SecurityApiKey":
                return new SecurityApiKey(name, <any>undefined, { urn })
            case "elasticstack:index/securityRole:SecurityRole":
                return new SecurityRole(name, <any>undefined, { urn })
            case "elasticstack:index/securityRoleMapping:SecurityRoleMapping":
                return new SecurityRoleMapping(name, <any>undefined, { urn })
            case "elasticstack:index/securitySystemUser:SecuritySystemUser":
                return new SecuritySystemUser(name, <any>undefined, { urn })
            case "elasticstack:index/securityUser:SecurityUser":
                return new SecurityUser(name, <any>undefined, { urn })
            case "elasticstack:index/snapshotLifecycle:SnapshotLifecycle":
                return new SnapshotLifecycle(name, <any>undefined, { urn })
            case "elasticstack:index/snapshotRepository:SnapshotRepository":
                return new SnapshotRepository(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("elasticstack", "index/clusterSettings", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/componentTemplate", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/dataStream", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/index", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/indexLifecycle", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/indexTemplate", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/ingestPipeline", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/logstashPipeline", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/script", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityApiKey", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityRole", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityRoleMapping", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securitySystemUser", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/securityUser", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/snapshotLifecycle", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/snapshotRepository", _module)
pulumi.runtime.registerResourcePackage("elasticstack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:elasticstack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
