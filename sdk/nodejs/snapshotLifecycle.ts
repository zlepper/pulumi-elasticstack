// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates or updates a snapshot lifecycle policy. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * // create a repository for snapshots
 * const repo = new elasticstack.SnapshotRepository("repo", {fs: {
 *     location: "/tmp/snapshots",
 *     compress: true,
 *     maxRestoreBytesPerSec: "20mb",
 * }});
 * // create a SLM policy and use the above created repository
 * const slmPolicy = new elasticstack.SnapshotLifecycle("slmPolicy", {
 *     schedule: "0 30 1 * * ?",
 *     snapshotName: "<daily-snap-{now/d}>",
 *     repository: repo.name,
 *     indices: [
 *         "data-*",
 *         "important",
 *     ],
 *     ignoreUnavailable: false,
 *     includeGlobalState: false,
 *     expireAfter: "30d",
 *     minCount: 5,
 *     maxCount: 50,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import elasticstack:index/snapshotLifecycle:SnapshotLifecycle my_policy <cluster_uuid>/<slm policy name>
 * ```
 */
export class SnapshotLifecycle extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotLifecycle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotLifecycleState, opts?: pulumi.CustomResourceOptions): SnapshotLifecycle {
        return new SnapshotLifecycle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/snapshotLifecycle:SnapshotLifecycle';

    /**
     * Returns true if the given object is an instance of SnapshotLifecycle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotLifecycle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotLifecycle.__pulumiType;
    }

    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.SnapshotLifecycleElasticsearchConnection | undefined>;
    /**
     * Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
     */
    public readonly expandWildcards!: pulumi.Output<string | undefined>;
    /**
     * Time period after which a snapshot is considered expired and eligible for deletion.
     */
    public readonly expireAfter!: pulumi.Output<string | undefined>;
    /**
     * Feature states to include in the snapshot.
     */
    public readonly featureStates!: pulumi.Output<string[]>;
    /**
     * If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
     */
    public readonly ignoreUnavailable!: pulumi.Output<boolean | undefined>;
    /**
     * If `true`, include the cluster state in the snapshot.
     */
    public readonly includeGlobalState!: pulumi.Output<boolean | undefined>;
    /**
     * Comma-separated list of data streams and indices to include in the snapshot.
     */
    public readonly indices!: pulumi.Output<string[]>;
    /**
     * Maximum number of snapshots to retain, even if the snapshots have not yet expired.
     */
    public readonly maxCount!: pulumi.Output<number | undefined>;
    /**
     * Attaches arbitrary metadata to the snapshot.
     */
    public readonly metadata!: pulumi.Output<string>;
    /**
     * Minimum number of snapshots to retain, even if the snapshots have expired.
     */
    public readonly minCount!: pulumi.Output<number | undefined>;
    /**
     * ID for the snapshot lifecycle policy you want to create or update.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
     */
    public readonly partial!: pulumi.Output<boolean | undefined>;
    /**
     * Repository used to store snapshots created by this policy.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * Periodic or absolute schedule at which the policy creates snapshots.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Name automatically assigned to each snapshot created by the policy.
     */
    public readonly snapshotName!: pulumi.Output<string | undefined>;

    /**
     * Create a SnapshotLifecycle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotLifecycleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotLifecycleArgs | SnapshotLifecycleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotLifecycleState | undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["expandWildcards"] = state ? state.expandWildcards : undefined;
            resourceInputs["expireAfter"] = state ? state.expireAfter : undefined;
            resourceInputs["featureStates"] = state ? state.featureStates : undefined;
            resourceInputs["ignoreUnavailable"] = state ? state.ignoreUnavailable : undefined;
            resourceInputs["includeGlobalState"] = state ? state.includeGlobalState : undefined;
            resourceInputs["indices"] = state ? state.indices : undefined;
            resourceInputs["maxCount"] = state ? state.maxCount : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["minCount"] = state ? state.minCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partial"] = state ? state.partial : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
        } else {
            const args = argsOrState as SnapshotLifecycleArgs | undefined;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["expandWildcards"] = args ? args.expandWildcards : undefined;
            resourceInputs["expireAfter"] = args ? args.expireAfter : undefined;
            resourceInputs["featureStates"] = args ? args.featureStates : undefined;
            resourceInputs["ignoreUnavailable"] = args ? args.ignoreUnavailable : undefined;
            resourceInputs["includeGlobalState"] = args ? args.includeGlobalState : undefined;
            resourceInputs["indices"] = args ? args.indices : undefined;
            resourceInputs["maxCount"] = args ? args.maxCount : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["minCount"] = args ? args.minCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partial"] = args ? args.partial : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotLifecycle.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnapshotLifecycle resources.
 */
export interface SnapshotLifecycleState {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.SnapshotLifecycleElasticsearchConnection>;
    /**
     * Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
     */
    expandWildcards?: pulumi.Input<string>;
    /**
     * Time period after which a snapshot is considered expired and eligible for deletion.
     */
    expireAfter?: pulumi.Input<string>;
    /**
     * Feature states to include in the snapshot.
     */
    featureStates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
     */
    ignoreUnavailable?: pulumi.Input<boolean>;
    /**
     * If `true`, include the cluster state in the snapshot.
     */
    includeGlobalState?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of data streams and indices to include in the snapshot.
     */
    indices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of snapshots to retain, even if the snapshots have not yet expired.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * Attaches arbitrary metadata to the snapshot.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Minimum number of snapshots to retain, even if the snapshots have expired.
     */
    minCount?: pulumi.Input<number>;
    /**
     * ID for the snapshot lifecycle policy you want to create or update.
     */
    name?: pulumi.Input<string>;
    /**
     * If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
     */
    partial?: pulumi.Input<boolean>;
    /**
     * Repository used to store snapshots created by this policy.
     */
    repository?: pulumi.Input<string>;
    /**
     * Periodic or absolute schedule at which the policy creates snapshots.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Name automatically assigned to each snapshot created by the policy.
     */
    snapshotName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnapshotLifecycle resource.
 */
export interface SnapshotLifecycleArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.SnapshotLifecycleElasticsearchConnection>;
    /**
     * Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
     */
    expandWildcards?: pulumi.Input<string>;
    /**
     * Time period after which a snapshot is considered expired and eligible for deletion.
     */
    expireAfter?: pulumi.Input<string>;
    /**
     * Feature states to include in the snapshot.
     */
    featureStates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
     */
    ignoreUnavailable?: pulumi.Input<boolean>;
    /**
     * If `true`, include the cluster state in the snapshot.
     */
    includeGlobalState?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of data streams and indices to include in the snapshot.
     */
    indices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of snapshots to retain, even if the snapshots have not yet expired.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * Attaches arbitrary metadata to the snapshot.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Minimum number of snapshots to retain, even if the snapshots have expired.
     */
    minCount?: pulumi.Input<number>;
    /**
     * ID for the snapshot lifecycle policy you want to create or update.
     */
    name?: pulumi.Input<string>;
    /**
     * If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
     */
    partial?: pulumi.Input<boolean>;
    /**
     * Repository used to store snapshots created by this policy.
     */
    repository: pulumi.Input<string>;
    /**
     * Periodic or absolute schedule at which the policy creates snapshots.
     */
    schedule: pulumi.Input<string>;
    /**
     * Name automatically assigned to each snapshot created by the policy.
     */
    snapshotName?: pulumi.Input<string>;
}
