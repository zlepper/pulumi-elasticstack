// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage role mappings. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role-mapping.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const example = new elasticstack.SecurityRoleMapping("example", {
 *     enabled: true,
 *     roles: ["admin"],
 *     rules: JSON.stringify({
 *         any: [
 *             {
 *                 field: {
 *                     username: "esadmin",
 *                 },
 *             },
 *             {
 *                 field: {
 *                     groups: "cn=admins,dc=example,dc=com",
 *                 },
 *             },
 *         ],
 *     }),
 * });
 * export const role = example.name;
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import elasticstack:index/securityRoleMapping:SecurityRoleMapping my_role_mapping <cluster_uuid>/<role mapping name>
 * ```
 */
export class SecurityRoleMapping extends pulumi.CustomResource {
    /**
     * Get an existing SecurityRoleMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityRoleMappingState, opts?: pulumi.CustomResourceOptions): SecurityRoleMapping {
        return new SecurityRoleMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/securityRoleMapping:SecurityRoleMapping';

    /**
     * Returns true if the given object is an instance of SecurityRoleMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityRoleMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityRoleMapping.__pulumiType;
    }

    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.SecurityRoleMappingElasticsearchConnection | undefined>;
    /**
     * Mappings that have `enabled` set to `false` are ignored when role mapping is performed.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * The distinct name that identifies the role mapping, used solely as an identifier.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.
     */
    public readonly roleTemplates!: pulumi.Output<string | undefined>;
    /**
     * A list of role names that are granted to the users that match the role mapping rules.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.
     */
    public readonly rules!: pulumi.Output<string>;

    /**
     * Create a SecurityRoleMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityRoleMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityRoleMappingArgs | SecurityRoleMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityRoleMappingState | undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleTemplates"] = state ? state.roleTemplates : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as SecurityRoleMappingArgs | undefined;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleTemplates"] = args ? args.roleTemplates : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityRoleMapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityRoleMapping resources.
 */
export interface SecurityRoleMappingState {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.SecurityRoleMappingElasticsearchConnection>;
    /**
     * Mappings that have `enabled` set to `false` are ignored when role mapping is performed.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The distinct name that identifies the role mapping, used solely as an identifier.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.
     */
    roleTemplates?: pulumi.Input<string>;
    /**
     * A list of role names that are granted to the users that match the role mapping rules.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.
     */
    rules?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityRoleMapping resource.
 */
export interface SecurityRoleMappingArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.SecurityRoleMappingElasticsearchConnection>;
    /**
     * Mappings that have `enabled` set to `false` are ignored when role mapping is performed.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The distinct name that identifies the role mapping, used solely as an identifier.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.
     */
    roleTemplates?: pulumi.Input<string>;
    /**
     * A list of role names that are granted to the users that match the role mapping rules.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.
     */
    rules: pulumi.Input<string>;
}
