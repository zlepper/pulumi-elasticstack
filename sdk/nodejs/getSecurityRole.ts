// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about an existing Elasticsearch role. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const roleSecurityRole = elasticstack.getSecurityRole({
 *     name: "testrole",
 * });
 * export const role = roleSecurityRole.then(roleSecurityRole => roleSecurityRole.name);
 * ```
 */
export function getSecurityRole(args: GetSecurityRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityRoleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getSecurityRole:getSecurityRole", {
        "elasticsearchConnection": args.elasticsearchConnection,
        "name": args.name,
        "runAs": args.runAs,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityRole.
 */
export interface GetSecurityRoleArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: inputs.GetSecurityRoleElasticsearchConnection;
    /**
     * The name of the role.
     */
    name: string;
    /**
     * A list of users that the owners of this role can impersonate.
     */
    runAs?: string[];
}

/**
 * A collection of values returned by getSecurityRole.
 */
export interface GetSecurityRoleResult {
    /**
     * A list of application privilege entries.
     */
    readonly applications: outputs.GetSecurityRoleApplication[];
    /**
     * A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
     */
    readonly clusters: string[];
    /**
     * Elasticsearch connection configuration block.
     */
    readonly elasticsearchConnection?: outputs.GetSecurityRoleElasticsearchConnection;
    /**
     * An object defining global privileges.
     */
    readonly global: string;
    /**
     * Internal identifier of the resource
     */
    readonly id: string;
    /**
     * A list of indices permissions entries.
     */
    readonly indices: outputs.GetSecurityRoleIndex[];
    /**
     * Optional meta-data.
     */
    readonly metadata: string;
    /**
     * The name of the role.
     */
    readonly name: string;
    /**
     * A list of users that the owners of this role can impersonate.
     */
    readonly runAs?: string[];
}
/**
 * Use this data source to get information about an existing Elasticsearch role. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const roleSecurityRole = elasticstack.getSecurityRole({
 *     name: "testrole",
 * });
 * export const role = roleSecurityRole.then(roleSecurityRole => roleSecurityRole.name);
 * ```
 */
export function getSecurityRoleOutput(args: GetSecurityRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityRoleResult> {
    return pulumi.output(args).apply((a: any) => getSecurityRole(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityRole.
 */
export interface GetSecurityRoleOutputArgs {
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.GetSecurityRoleElasticsearchConnectionArgs>;
    /**
     * The name of the role.
     */
    name: pulumi.Input<string>;
    /**
     * A list of users that the owners of this role can impersonate.
     */
    runAs?: pulumi.Input<pulumi.Input<string>[]>;
}
