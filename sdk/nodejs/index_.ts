// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html
 *
 * ## Import
 *
 * You can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too You can later adjust the index configuration to account for those imported settings
 *
 * ```sh
 *  $ pulumi import elasticstack:index/index:Index my_index <cluster_uuid>/<index_name>
 * ```
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexState, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/index:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    /**
     * Aliases for the index.
     */
    public readonly aliases!: pulumi.Output<outputs.IndexAlias[] | undefined>;
    /**
     * A JSON string describing the analyzers applied to the index.
     */
    public readonly analysisAnalyzer!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the charFilters applied to the index.
     */
    public readonly analysisCharFilter!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the filters applied to the index.
     */
    public readonly analysisFilter!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the normalizers applied to the index.
     */
    public readonly analysisNormalizer!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the tokenizers applied to the index.
     */
    public readonly analysisTokenizer!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of tokens that can be produced using _analyze API.
     */
    public readonly analyzeMaxTokenCount!: pulumi.Output<number | undefined>;
    /**
     * Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
     */
    public readonly autoExpandReplicas!: pulumi.Output<string | undefined>;
    /**
     * Set to `true` to disable index metadata reads and writes.
     */
    public readonly blocksMetadata!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `true` to disable read operations against the index.
     */
    public readonly blocksRead!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
     */
    public readonly blocksReadOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
     */
    public readonly blocksReadOnlyAllowDelete!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `true` to disable data write operations against the index. This setting does not affect metadata.
     */
    public readonly blocksWrite!: pulumi.Output<boolean | undefined>;
    /**
     * The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
     */
    public readonly codec!: pulumi.Output<string | undefined>;
    /**
     * The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
     */
    public readonly defaultPipeline!: pulumi.Output<string | undefined>;
    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.IndexElasticsearchConnection | undefined>;
    /**
     * Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
     */
    public readonly finalPipeline!: pulumi.Output<string | undefined>;
    /**
     * The length of time that a deleted document's version number remains available for further versioned operations.
     */
    public readonly gcDeletes!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of characters that will be analyzed for a highlight request.
     */
    public readonly highlightMaxAnalyzedOffset!: pulumi.Output<number | undefined>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    public readonly indexingSlowlogLevel!: pulumi.Output<string | undefined>;
    /**
     * Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
     */
    public readonly indexingSlowlogSource!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
     */
    public readonly indexingSlowlogThresholdIndexDebug!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
     */
    public readonly indexingSlowlogThresholdIndexInfo!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
     */
    public readonly indexingSlowlogThresholdIndexTrace!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
     */
    public readonly indexingSlowlogThresholdIndexWarn!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
     */
    public readonly loadFixedBitsetFiltersEagerly!: pulumi.Output<boolean | undefined>;
    /**
     * Mapping for fields in the index.
     * If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
     * **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
     */
    public readonly mappings!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of `docvalueFields` that are allowed in a query.
     */
    public readonly maxDocvalueFieldsSearch!: pulumi.Output<number | undefined>;
    /**
     * The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
     */
    public readonly maxInnerResultWindow!: pulumi.Output<number | undefined>;
    /**
     * The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
     */
    public readonly maxNgramDiff!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of refresh listeners available on each shard of the index.
     */
    public readonly maxRefreshListeners!: pulumi.Output<number | undefined>;
    /**
     * The maximum length of regex that can be used in Regexp Query.
     */
    public readonly maxRegexLength!: pulumi.Output<number | undefined>;
    /**
     * The maximum value of `windowSize` for `rescore` requests in searches of this index.
     */
    public readonly maxRescoreWindow!: pulumi.Output<number | undefined>;
    /**
     * The maximum value of `from + size` for searches to this index.
     */
    public readonly maxResultWindow!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of `scriptFields` that are allowed in a query.
     */
    public readonly maxScriptFields!: pulumi.Output<number | undefined>;
    /**
     * The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
     */
    public readonly maxShingleDiff!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of terms that can be used in Terms Query.
     */
    public readonly maxTermsCount!: pulumi.Output<number | undefined>;
    /**
     * Name of the index you wish to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of shard replicas.
     */
    public readonly numberOfReplicas!: pulumi.Output<number>;
    /**
     * Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
     */
    public readonly numberOfRoutingShards!: pulumi.Output<number | undefined>;
    /**
     * Number of shards for the index. This can be set only on creation.
     */
    public readonly numberOfShards!: pulumi.Output<number | undefined>;
    /**
     * Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
     */
    public readonly queryDefaultFields!: pulumi.Output<string[] | undefined>;
    /**
     * How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
     */
    public readonly refreshInterval!: pulumi.Output<string | undefined>;
    /**
     * Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
     */
    public readonly routingAllocationEnable!: pulumi.Output<string | undefined>;
    /**
     * The number of shards a custom routing value can go to. This can be set only on creation.
     */
    public readonly routingPartitionSize!: pulumi.Output<number | undefined>;
    /**
     * Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
     */
    public readonly routingRebalanceEnable!: pulumi.Output<string | undefined>;
    /**
     * How long a shard can not receive a search or get request until it’s considered search idle.
     */
    public readonly searchIdleAfter!: pulumi.Output<string | undefined>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    public readonly searchSlowlogLevel!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
     */
    public readonly searchSlowlogThresholdFetchDebug!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
     */
    public readonly searchSlowlogThresholdFetchInfo!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
     */
    public readonly searchSlowlogThresholdFetchTrace!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
     */
    public readonly searchSlowlogThresholdFetchWarn!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
     */
    public readonly searchSlowlogThresholdQueryDebug!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
     */
    public readonly searchSlowlogThresholdQueryInfo!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
     */
    public readonly searchSlowlogThresholdQueryTrace!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
     */
    public readonly searchSlowlogThresholdQueryWarn!: pulumi.Output<string | undefined>;
    /**
     * DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
     * **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
     *
     * @deprecated Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
     */
    public readonly settings!: pulumi.Output<outputs.IndexSettings | undefined>;
    /**
     * All raw settings fetched from the cluster.
     */
    public /*out*/ readonly settingsRaw!: pulumi.Output<string>;
    /**
     * Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
     */
    public readonly shardCheckOnStartup!: pulumi.Output<string | undefined>;
    /**
     * The field to sort shards in this index by.
     */
    public readonly sortFields!: pulumi.Output<string[] | undefined>;
    /**
     * The direction to sort shards in. Accepts `asc`, `desc`.
     */
    public readonly sortOrders!: pulumi.Output<string[] | undefined>;
    /**
     * Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
     */
    public readonly unassignedNodeLeftDelayedTimeout!: pulumi.Output<string | undefined>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexArgs | IndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexState | undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["analysisAnalyzer"] = state ? state.analysisAnalyzer : undefined;
            resourceInputs["analysisCharFilter"] = state ? state.analysisCharFilter : undefined;
            resourceInputs["analysisFilter"] = state ? state.analysisFilter : undefined;
            resourceInputs["analysisNormalizer"] = state ? state.analysisNormalizer : undefined;
            resourceInputs["analysisTokenizer"] = state ? state.analysisTokenizer : undefined;
            resourceInputs["analyzeMaxTokenCount"] = state ? state.analyzeMaxTokenCount : undefined;
            resourceInputs["autoExpandReplicas"] = state ? state.autoExpandReplicas : undefined;
            resourceInputs["blocksMetadata"] = state ? state.blocksMetadata : undefined;
            resourceInputs["blocksRead"] = state ? state.blocksRead : undefined;
            resourceInputs["blocksReadOnly"] = state ? state.blocksReadOnly : undefined;
            resourceInputs["blocksReadOnlyAllowDelete"] = state ? state.blocksReadOnlyAllowDelete : undefined;
            resourceInputs["blocksWrite"] = state ? state.blocksWrite : undefined;
            resourceInputs["codec"] = state ? state.codec : undefined;
            resourceInputs["defaultPipeline"] = state ? state.defaultPipeline : undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["finalPipeline"] = state ? state.finalPipeline : undefined;
            resourceInputs["gcDeletes"] = state ? state.gcDeletes : undefined;
            resourceInputs["highlightMaxAnalyzedOffset"] = state ? state.highlightMaxAnalyzedOffset : undefined;
            resourceInputs["indexingSlowlogLevel"] = state ? state.indexingSlowlogLevel : undefined;
            resourceInputs["indexingSlowlogSource"] = state ? state.indexingSlowlogSource : undefined;
            resourceInputs["indexingSlowlogThresholdIndexDebug"] = state ? state.indexingSlowlogThresholdIndexDebug : undefined;
            resourceInputs["indexingSlowlogThresholdIndexInfo"] = state ? state.indexingSlowlogThresholdIndexInfo : undefined;
            resourceInputs["indexingSlowlogThresholdIndexTrace"] = state ? state.indexingSlowlogThresholdIndexTrace : undefined;
            resourceInputs["indexingSlowlogThresholdIndexWarn"] = state ? state.indexingSlowlogThresholdIndexWarn : undefined;
            resourceInputs["loadFixedBitsetFiltersEagerly"] = state ? state.loadFixedBitsetFiltersEagerly : undefined;
            resourceInputs["mappings"] = state ? state.mappings : undefined;
            resourceInputs["maxDocvalueFieldsSearch"] = state ? state.maxDocvalueFieldsSearch : undefined;
            resourceInputs["maxInnerResultWindow"] = state ? state.maxInnerResultWindow : undefined;
            resourceInputs["maxNgramDiff"] = state ? state.maxNgramDiff : undefined;
            resourceInputs["maxRefreshListeners"] = state ? state.maxRefreshListeners : undefined;
            resourceInputs["maxRegexLength"] = state ? state.maxRegexLength : undefined;
            resourceInputs["maxRescoreWindow"] = state ? state.maxRescoreWindow : undefined;
            resourceInputs["maxResultWindow"] = state ? state.maxResultWindow : undefined;
            resourceInputs["maxScriptFields"] = state ? state.maxScriptFields : undefined;
            resourceInputs["maxShingleDiff"] = state ? state.maxShingleDiff : undefined;
            resourceInputs["maxTermsCount"] = state ? state.maxTermsCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfReplicas"] = state ? state.numberOfReplicas : undefined;
            resourceInputs["numberOfRoutingShards"] = state ? state.numberOfRoutingShards : undefined;
            resourceInputs["numberOfShards"] = state ? state.numberOfShards : undefined;
            resourceInputs["queryDefaultFields"] = state ? state.queryDefaultFields : undefined;
            resourceInputs["refreshInterval"] = state ? state.refreshInterval : undefined;
            resourceInputs["routingAllocationEnable"] = state ? state.routingAllocationEnable : undefined;
            resourceInputs["routingPartitionSize"] = state ? state.routingPartitionSize : undefined;
            resourceInputs["routingRebalanceEnable"] = state ? state.routingRebalanceEnable : undefined;
            resourceInputs["searchIdleAfter"] = state ? state.searchIdleAfter : undefined;
            resourceInputs["searchSlowlogLevel"] = state ? state.searchSlowlogLevel : undefined;
            resourceInputs["searchSlowlogThresholdFetchDebug"] = state ? state.searchSlowlogThresholdFetchDebug : undefined;
            resourceInputs["searchSlowlogThresholdFetchInfo"] = state ? state.searchSlowlogThresholdFetchInfo : undefined;
            resourceInputs["searchSlowlogThresholdFetchTrace"] = state ? state.searchSlowlogThresholdFetchTrace : undefined;
            resourceInputs["searchSlowlogThresholdFetchWarn"] = state ? state.searchSlowlogThresholdFetchWarn : undefined;
            resourceInputs["searchSlowlogThresholdQueryDebug"] = state ? state.searchSlowlogThresholdQueryDebug : undefined;
            resourceInputs["searchSlowlogThresholdQueryInfo"] = state ? state.searchSlowlogThresholdQueryInfo : undefined;
            resourceInputs["searchSlowlogThresholdQueryTrace"] = state ? state.searchSlowlogThresholdQueryTrace : undefined;
            resourceInputs["searchSlowlogThresholdQueryWarn"] = state ? state.searchSlowlogThresholdQueryWarn : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["settingsRaw"] = state ? state.settingsRaw : undefined;
            resourceInputs["shardCheckOnStartup"] = state ? state.shardCheckOnStartup : undefined;
            resourceInputs["sortFields"] = state ? state.sortFields : undefined;
            resourceInputs["sortOrders"] = state ? state.sortOrders : undefined;
            resourceInputs["unassignedNodeLeftDelayedTimeout"] = state ? state.unassignedNodeLeftDelayedTimeout : undefined;
        } else {
            const args = argsOrState as IndexArgs | undefined;
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["analysisAnalyzer"] = args ? args.analysisAnalyzer : undefined;
            resourceInputs["analysisCharFilter"] = args ? args.analysisCharFilter : undefined;
            resourceInputs["analysisFilter"] = args ? args.analysisFilter : undefined;
            resourceInputs["analysisNormalizer"] = args ? args.analysisNormalizer : undefined;
            resourceInputs["analysisTokenizer"] = args ? args.analysisTokenizer : undefined;
            resourceInputs["analyzeMaxTokenCount"] = args ? args.analyzeMaxTokenCount : undefined;
            resourceInputs["autoExpandReplicas"] = args ? args.autoExpandReplicas : undefined;
            resourceInputs["blocksMetadata"] = args ? args.blocksMetadata : undefined;
            resourceInputs["blocksRead"] = args ? args.blocksRead : undefined;
            resourceInputs["blocksReadOnly"] = args ? args.blocksReadOnly : undefined;
            resourceInputs["blocksReadOnlyAllowDelete"] = args ? args.blocksReadOnlyAllowDelete : undefined;
            resourceInputs["blocksWrite"] = args ? args.blocksWrite : undefined;
            resourceInputs["codec"] = args ? args.codec : undefined;
            resourceInputs["defaultPipeline"] = args ? args.defaultPipeline : undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["finalPipeline"] = args ? args.finalPipeline : undefined;
            resourceInputs["gcDeletes"] = args ? args.gcDeletes : undefined;
            resourceInputs["highlightMaxAnalyzedOffset"] = args ? args.highlightMaxAnalyzedOffset : undefined;
            resourceInputs["indexingSlowlogLevel"] = args ? args.indexingSlowlogLevel : undefined;
            resourceInputs["indexingSlowlogSource"] = args ? args.indexingSlowlogSource : undefined;
            resourceInputs["indexingSlowlogThresholdIndexDebug"] = args ? args.indexingSlowlogThresholdIndexDebug : undefined;
            resourceInputs["indexingSlowlogThresholdIndexInfo"] = args ? args.indexingSlowlogThresholdIndexInfo : undefined;
            resourceInputs["indexingSlowlogThresholdIndexTrace"] = args ? args.indexingSlowlogThresholdIndexTrace : undefined;
            resourceInputs["indexingSlowlogThresholdIndexWarn"] = args ? args.indexingSlowlogThresholdIndexWarn : undefined;
            resourceInputs["loadFixedBitsetFiltersEagerly"] = args ? args.loadFixedBitsetFiltersEagerly : undefined;
            resourceInputs["mappings"] = args ? args.mappings : undefined;
            resourceInputs["maxDocvalueFieldsSearch"] = args ? args.maxDocvalueFieldsSearch : undefined;
            resourceInputs["maxInnerResultWindow"] = args ? args.maxInnerResultWindow : undefined;
            resourceInputs["maxNgramDiff"] = args ? args.maxNgramDiff : undefined;
            resourceInputs["maxRefreshListeners"] = args ? args.maxRefreshListeners : undefined;
            resourceInputs["maxRegexLength"] = args ? args.maxRegexLength : undefined;
            resourceInputs["maxRescoreWindow"] = args ? args.maxRescoreWindow : undefined;
            resourceInputs["maxResultWindow"] = args ? args.maxResultWindow : undefined;
            resourceInputs["maxScriptFields"] = args ? args.maxScriptFields : undefined;
            resourceInputs["maxShingleDiff"] = args ? args.maxShingleDiff : undefined;
            resourceInputs["maxTermsCount"] = args ? args.maxTermsCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfReplicas"] = args ? args.numberOfReplicas : undefined;
            resourceInputs["numberOfRoutingShards"] = args ? args.numberOfRoutingShards : undefined;
            resourceInputs["numberOfShards"] = args ? args.numberOfShards : undefined;
            resourceInputs["queryDefaultFields"] = args ? args.queryDefaultFields : undefined;
            resourceInputs["refreshInterval"] = args ? args.refreshInterval : undefined;
            resourceInputs["routingAllocationEnable"] = args ? args.routingAllocationEnable : undefined;
            resourceInputs["routingPartitionSize"] = args ? args.routingPartitionSize : undefined;
            resourceInputs["routingRebalanceEnable"] = args ? args.routingRebalanceEnable : undefined;
            resourceInputs["searchIdleAfter"] = args ? args.searchIdleAfter : undefined;
            resourceInputs["searchSlowlogLevel"] = args ? args.searchSlowlogLevel : undefined;
            resourceInputs["searchSlowlogThresholdFetchDebug"] = args ? args.searchSlowlogThresholdFetchDebug : undefined;
            resourceInputs["searchSlowlogThresholdFetchInfo"] = args ? args.searchSlowlogThresholdFetchInfo : undefined;
            resourceInputs["searchSlowlogThresholdFetchTrace"] = args ? args.searchSlowlogThresholdFetchTrace : undefined;
            resourceInputs["searchSlowlogThresholdFetchWarn"] = args ? args.searchSlowlogThresholdFetchWarn : undefined;
            resourceInputs["searchSlowlogThresholdQueryDebug"] = args ? args.searchSlowlogThresholdQueryDebug : undefined;
            resourceInputs["searchSlowlogThresholdQueryInfo"] = args ? args.searchSlowlogThresholdQueryInfo : undefined;
            resourceInputs["searchSlowlogThresholdQueryTrace"] = args ? args.searchSlowlogThresholdQueryTrace : undefined;
            resourceInputs["searchSlowlogThresholdQueryWarn"] = args ? args.searchSlowlogThresholdQueryWarn : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["shardCheckOnStartup"] = args ? args.shardCheckOnStartup : undefined;
            resourceInputs["sortFields"] = args ? args.sortFields : undefined;
            resourceInputs["sortOrders"] = args ? args.sortOrders : undefined;
            resourceInputs["unassignedNodeLeftDelayedTimeout"] = args ? args.unassignedNodeLeftDelayedTimeout : undefined;
            resourceInputs["settingsRaw"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Index.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Index resources.
 */
export interface IndexState {
    /**
     * Aliases for the index.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.IndexAlias>[]>;
    /**
     * A JSON string describing the analyzers applied to the index.
     */
    analysisAnalyzer?: pulumi.Input<string>;
    /**
     * A JSON string describing the charFilters applied to the index.
     */
    analysisCharFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the filters applied to the index.
     */
    analysisFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the normalizers applied to the index.
     */
    analysisNormalizer?: pulumi.Input<string>;
    /**
     * A JSON string describing the tokenizers applied to the index.
     */
    analysisTokenizer?: pulumi.Input<string>;
    /**
     * The maximum number of tokens that can be produced using _analyze API.
     */
    analyzeMaxTokenCount?: pulumi.Input<number>;
    /**
     * Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
     */
    autoExpandReplicas?: pulumi.Input<string>;
    /**
     * Set to `true` to disable index metadata reads and writes.
     */
    blocksMetadata?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable read operations against the index.
     */
    blocksRead?: pulumi.Input<boolean>;
    /**
     * Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
     */
    blocksReadOnly?: pulumi.Input<boolean>;
    /**
     * Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
     */
    blocksReadOnlyAllowDelete?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable data write operations against the index. This setting does not affect metadata.
     */
    blocksWrite?: pulumi.Input<boolean>;
    /**
     * The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
     */
    codec?: pulumi.Input<string>;
    /**
     * The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
     */
    defaultPipeline?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.IndexElasticsearchConnection>;
    /**
     * Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
     */
    finalPipeline?: pulumi.Input<string>;
    /**
     * The length of time that a deleted document's version number remains available for further versioned operations.
     */
    gcDeletes?: pulumi.Input<string>;
    /**
     * The maximum number of characters that will be analyzed for a highlight request.
     */
    highlightMaxAnalyzedOffset?: pulumi.Input<number>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    indexingSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
     */
    indexingSlowlogSource?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
     */
    indexingSlowlogThresholdIndexDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
     */
    indexingSlowlogThresholdIndexInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
     */
    indexingSlowlogThresholdIndexTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
     */
    indexingSlowlogThresholdIndexWarn?: pulumi.Input<string>;
    /**
     * Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
     */
    loadFixedBitsetFiltersEagerly?: pulumi.Input<boolean>;
    /**
     * Mapping for fields in the index.
     * If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
     * **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
     */
    mappings?: pulumi.Input<string>;
    /**
     * The maximum number of `docvalueFields` that are allowed in a query.
     */
    maxDocvalueFieldsSearch?: pulumi.Input<number>;
    /**
     * The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
     */
    maxInnerResultWindow?: pulumi.Input<number>;
    /**
     * The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
     */
    maxNgramDiff?: pulumi.Input<number>;
    /**
     * Maximum number of refresh listeners available on each shard of the index.
     */
    maxRefreshListeners?: pulumi.Input<number>;
    /**
     * The maximum length of regex that can be used in Regexp Query.
     */
    maxRegexLength?: pulumi.Input<number>;
    /**
     * The maximum value of `windowSize` for `rescore` requests in searches of this index.
     */
    maxRescoreWindow?: pulumi.Input<number>;
    /**
     * The maximum value of `from + size` for searches to this index.
     */
    maxResultWindow?: pulumi.Input<number>;
    /**
     * The maximum number of `scriptFields` that are allowed in a query.
     */
    maxScriptFields?: pulumi.Input<number>;
    /**
     * The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
     */
    maxShingleDiff?: pulumi.Input<number>;
    /**
     * The maximum number of terms that can be used in Terms Query.
     */
    maxTermsCount?: pulumi.Input<number>;
    /**
     * Name of the index you wish to create.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of shard replicas.
     */
    numberOfReplicas?: pulumi.Input<number>;
    /**
     * Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
     */
    numberOfRoutingShards?: pulumi.Input<number>;
    /**
     * Number of shards for the index. This can be set only on creation.
     */
    numberOfShards?: pulumi.Input<number>;
    /**
     * Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
     */
    queryDefaultFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
     */
    refreshInterval?: pulumi.Input<string>;
    /**
     * Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
     */
    routingAllocationEnable?: pulumi.Input<string>;
    /**
     * The number of shards a custom routing value can go to. This can be set only on creation.
     */
    routingPartitionSize?: pulumi.Input<number>;
    /**
     * Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
     */
    routingRebalanceEnable?: pulumi.Input<string>;
    /**
     * How long a shard can not receive a search or get request until it’s considered search idle.
     */
    searchIdleAfter?: pulumi.Input<string>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    searchSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdFetchDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdFetchInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdFetchTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdFetchWarn?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdQueryDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdQueryInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdQueryTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdQueryWarn?: pulumi.Input<string>;
    /**
     * DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
     * **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
     *
     * @deprecated Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
     */
    settings?: pulumi.Input<inputs.IndexSettings>;
    /**
     * All raw settings fetched from the cluster.
     */
    settingsRaw?: pulumi.Input<string>;
    /**
     * Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
     */
    shardCheckOnStartup?: pulumi.Input<string>;
    /**
     * The field to sort shards in this index by.
     */
    sortFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The direction to sort shards in. Accepts `asc`, `desc`.
     */
    sortOrders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
     */
    unassignedNodeLeftDelayedTimeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * Aliases for the index.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.IndexAlias>[]>;
    /**
     * A JSON string describing the analyzers applied to the index.
     */
    analysisAnalyzer?: pulumi.Input<string>;
    /**
     * A JSON string describing the charFilters applied to the index.
     */
    analysisCharFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the filters applied to the index.
     */
    analysisFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the normalizers applied to the index.
     */
    analysisNormalizer?: pulumi.Input<string>;
    /**
     * A JSON string describing the tokenizers applied to the index.
     */
    analysisTokenizer?: pulumi.Input<string>;
    /**
     * The maximum number of tokens that can be produced using _analyze API.
     */
    analyzeMaxTokenCount?: pulumi.Input<number>;
    /**
     * Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
     */
    autoExpandReplicas?: pulumi.Input<string>;
    /**
     * Set to `true` to disable index metadata reads and writes.
     */
    blocksMetadata?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable read operations against the index.
     */
    blocksRead?: pulumi.Input<boolean>;
    /**
     * Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
     */
    blocksReadOnly?: pulumi.Input<boolean>;
    /**
     * Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
     */
    blocksReadOnlyAllowDelete?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable data write operations against the index. This setting does not affect metadata.
     */
    blocksWrite?: pulumi.Input<boolean>;
    /**
     * The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
     */
    codec?: pulumi.Input<string>;
    /**
     * The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
     */
    defaultPipeline?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.IndexElasticsearchConnection>;
    /**
     * Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
     */
    finalPipeline?: pulumi.Input<string>;
    /**
     * The length of time that a deleted document's version number remains available for further versioned operations.
     */
    gcDeletes?: pulumi.Input<string>;
    /**
     * The maximum number of characters that will be analyzed for a highlight request.
     */
    highlightMaxAnalyzedOffset?: pulumi.Input<number>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    indexingSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
     */
    indexingSlowlogSource?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
     */
    indexingSlowlogThresholdIndexDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
     */
    indexingSlowlogThresholdIndexInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
     */
    indexingSlowlogThresholdIndexTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
     */
    indexingSlowlogThresholdIndexWarn?: pulumi.Input<string>;
    /**
     * Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
     */
    loadFixedBitsetFiltersEagerly?: pulumi.Input<boolean>;
    /**
     * Mapping for fields in the index.
     * If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
     * **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
     */
    mappings?: pulumi.Input<string>;
    /**
     * The maximum number of `docvalueFields` that are allowed in a query.
     */
    maxDocvalueFieldsSearch?: pulumi.Input<number>;
    /**
     * The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
     */
    maxInnerResultWindow?: pulumi.Input<number>;
    /**
     * The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
     */
    maxNgramDiff?: pulumi.Input<number>;
    /**
     * Maximum number of refresh listeners available on each shard of the index.
     */
    maxRefreshListeners?: pulumi.Input<number>;
    /**
     * The maximum length of regex that can be used in Regexp Query.
     */
    maxRegexLength?: pulumi.Input<number>;
    /**
     * The maximum value of `windowSize` for `rescore` requests in searches of this index.
     */
    maxRescoreWindow?: pulumi.Input<number>;
    /**
     * The maximum value of `from + size` for searches to this index.
     */
    maxResultWindow?: pulumi.Input<number>;
    /**
     * The maximum number of `scriptFields` that are allowed in a query.
     */
    maxScriptFields?: pulumi.Input<number>;
    /**
     * The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
     */
    maxShingleDiff?: pulumi.Input<number>;
    /**
     * The maximum number of terms that can be used in Terms Query.
     */
    maxTermsCount?: pulumi.Input<number>;
    /**
     * Name of the index you wish to create.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of shard replicas.
     */
    numberOfReplicas?: pulumi.Input<number>;
    /**
     * Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
     */
    numberOfRoutingShards?: pulumi.Input<number>;
    /**
     * Number of shards for the index. This can be set only on creation.
     */
    numberOfShards?: pulumi.Input<number>;
    /**
     * Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
     */
    queryDefaultFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
     */
    refreshInterval?: pulumi.Input<string>;
    /**
     * Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
     */
    routingAllocationEnable?: pulumi.Input<string>;
    /**
     * The number of shards a custom routing value can go to. This can be set only on creation.
     */
    routingPartitionSize?: pulumi.Input<number>;
    /**
     * Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
     */
    routingRebalanceEnable?: pulumi.Input<string>;
    /**
     * How long a shard can not receive a search or get request until it’s considered search idle.
     */
    searchIdleAfter?: pulumi.Input<string>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    searchSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdFetchDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdFetchInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdFetchTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdFetchWarn?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdQueryDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdQueryInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdQueryTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdQueryWarn?: pulumi.Input<string>;
    /**
     * DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
     * **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
     *
     * @deprecated Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
     */
    settings?: pulumi.Input<inputs.IndexSettings>;
    /**
     * Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
     */
    shardCheckOnStartup?: pulumi.Input<string>;
    /**
     * The field to sort shards in this index by.
     */
    sortFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The direction to sort shards in. Accepts `asc`, `desc`.
     */
    sortOrders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
     */
    unassignedNodeLeftDelayedTimeout?: pulumi.Input<string>;
}
