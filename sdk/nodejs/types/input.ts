// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterSettingsElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ClusterSettingsPersistent {
    /**
     * Defines the setting in the cluster.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ClusterSettingsPersistentSetting>[]>;
}

export interface ClusterSettingsPersistentSetting {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    valueLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterSettingsTransient {
    /**
     * Defines the setting in the cluster.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ClusterSettingsTransientSetting>[]>;
}

export interface ClusterSettingsTransientSetting {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    valueLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComponentTemplateElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ComponentTemplateTemplate {
    /**
     * Alias to add.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.ComponentTemplateTemplateAlias>[]>;
    /**
     * Mapping for fields in the index.
     */
    mappings?: pulumi.Input<string>;
    /**
     * Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings
     */
    settings?: pulumi.Input<string>;
}

export interface ComponentTemplateTemplateAlias {
    filter?: pulumi.Input<string>;
    indexRouting?: pulumi.Input<string>;
    isHidden?: pulumi.Input<boolean>;
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Name of the component template to create.
     */
    name: pulumi.Input<string>;
    routing?: pulumi.Input<string>;
    searchRouting?: pulumi.Input<string>;
}

export interface DataStreamElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface DataStreamIndex {
    indexName?: pulumi.Input<string>;
    indexUuid?: pulumi.Input<string>;
}

export interface GetSecurityRoleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetSecurityRoleElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface GetSecurityRoleMappingElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetSecurityRoleMappingElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface GetSecurityUserElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetSecurityUserElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface GetSnapshotRepositoryElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetSnapshotRepositoryElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface IndexAlias {
    /**
     * Query used to limit documents the alias can access.
     */
    filter?: pulumi.Input<string>;
    /**
     * Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.
     */
    indexRouting?: pulumi.Input<string>;
    /**
     * If true, the alias is hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * If true, the index is the write index for the alias.
     */
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Index alias name.
     */
    name: pulumi.Input<string>;
    /**
     * Value used to route indexing and search operations to a specific shard.
     */
    routing?: pulumi.Input<string>;
    /**
     * Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.
     */
    searchRouting?: pulumi.Input<string>;
}

export interface IndexElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface IndexLifecycleCold {
    /**
     * Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
     */
    allocate?: pulumi.Input<inputs.IndexLifecycleColdAllocate>;
    /**
     * Freeze the index to minimize its memory footprint.
     */
    freeze?: pulumi.Input<inputs.IndexLifecycleColdFreeze>;
    /**
     * Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include.*tier*preference" index setting.
     */
    migrate?: pulumi.Input<inputs.IndexLifecycleColdMigrate>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.IndexLifecycleColdReadonly>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.IndexLifecycleColdSearchableSnapshot>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    setPriority?: pulumi.Input<inputs.IndexLifecycleColdSetPriority>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.IndexLifecycleColdUnfollow>;
}

export interface IndexLifecycleColdAllocate {
    exclude?: pulumi.Input<string>;
    include?: pulumi.Input<string>;
    numberOfReplicas?: pulumi.Input<number>;
    require?: pulumi.Input<string>;
    totalShardsPerNode?: pulumi.Input<number>;
}

export interface IndexLifecycleColdFreeze {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleColdMigrate {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleColdReadonly {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleColdSearchableSnapshot {
    forceMergeIndex?: pulumi.Input<boolean>;
    snapshotRepository: pulumi.Input<string>;
}

export interface IndexLifecycleColdSetPriority {
    priority: pulumi.Input<number>;
}

export interface IndexLifecycleColdUnfollow {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleDelete {
    /**
     * Permanently removes the index.
     */
    delete?: pulumi.Input<inputs.IndexLifecycleDeleteDelete>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.
     */
    waitForSnapshot?: pulumi.Input<inputs.IndexLifecycleDeleteWaitForSnapshot>;
}

export interface IndexLifecycleDeleteDelete {
    deleteSearchableSnapshot?: pulumi.Input<boolean>;
}

export interface IndexLifecycleDeleteWaitForSnapshot {
    policy: pulumi.Input<string>;
}

export interface IndexLifecycleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface IndexLifecycleFrozen {
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.IndexLifecycleFrozenSearchableSnapshot>;
}

export interface IndexLifecycleFrozenSearchableSnapshot {
    forceMergeIndex?: pulumi.Input<boolean>;
    snapshotRepository: pulumi.Input<string>;
}

export interface IndexLifecycleHot {
    /**
     * Force merges the index into the specified maximum number of segments. This action makes the index read-only.
     */
    forcemerge?: pulumi.Input<inputs.IndexLifecycleHotForcemerge>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.IndexLifecycleHotReadonly>;
    /**
     * Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.
     */
    rollover?: pulumi.Input<inputs.IndexLifecycleHotRollover>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.IndexLifecycleHotSearchableSnapshot>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    setPriority?: pulumi.Input<inputs.IndexLifecycleHotSetPriority>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    shrink?: pulumi.Input<inputs.IndexLifecycleHotShrink>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.IndexLifecycleHotUnfollow>;
}

export interface IndexLifecycleHotForcemerge {
    indexCodec?: pulumi.Input<string>;
    maxNumSegments: pulumi.Input<number>;
}

export interface IndexLifecycleHotReadonly {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleHotRollover {
    maxAge?: pulumi.Input<string>;
    maxDocs?: pulumi.Input<number>;
    maxPrimaryShardSize?: pulumi.Input<string>;
    maxSize?: pulumi.Input<string>;
}

export interface IndexLifecycleHotSearchableSnapshot {
    forceMergeIndex?: pulumi.Input<boolean>;
    snapshotRepository: pulumi.Input<string>;
}

export interface IndexLifecycleHotSetPriority {
    priority: pulumi.Input<number>;
}

export interface IndexLifecycleHotShrink {
    maxPrimaryShardSize?: pulumi.Input<string>;
    numberOfShards?: pulumi.Input<number>;
}

export interface IndexLifecycleHotUnfollow {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleWarm {
    /**
     * Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
     */
    allocate?: pulumi.Input<inputs.IndexLifecycleWarmAllocate>;
    /**
     * Force merges the index into the specified maximum number of segments. This action makes the index read-only.
     */
    forcemerge?: pulumi.Input<inputs.IndexLifecycleWarmForcemerge>;
    /**
     * Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include.*tier*preference" index setting.
     */
    migrate?: pulumi.Input<inputs.IndexLifecycleWarmMigrate>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.IndexLifecycleWarmReadonly>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    setPriority?: pulumi.Input<inputs.IndexLifecycleWarmSetPriority>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    shrink?: pulumi.Input<inputs.IndexLifecycleWarmShrink>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.IndexLifecycleWarmUnfollow>;
}

export interface IndexLifecycleWarmAllocate {
    exclude?: pulumi.Input<string>;
    include?: pulumi.Input<string>;
    numberOfReplicas?: pulumi.Input<number>;
    require?: pulumi.Input<string>;
    totalShardsPerNode?: pulumi.Input<number>;
}

export interface IndexLifecycleWarmForcemerge {
    indexCodec?: pulumi.Input<string>;
    maxNumSegments: pulumi.Input<number>;
}

export interface IndexLifecycleWarmMigrate {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleWarmReadonly {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexLifecycleWarmSetPriority {
    priority: pulumi.Input<number>;
}

export interface IndexLifecycleWarmShrink {
    maxPrimaryShardSize?: pulumi.Input<string>;
    numberOfShards?: pulumi.Input<number>;
}

export interface IndexLifecycleWarmUnfollow {
    enabled?: pulumi.Input<boolean>;
}

export interface IndexSettings {
    /**
     * Defines the setting for the index.
     */
    settings: pulumi.Input<pulumi.Input<inputs.IndexSettingsSetting>[]>;
}

export interface IndexSettingsSetting {
    /**
     * Name of the index you wish to create.
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface IndexTemplateDataStream {
    /**
     * If `true`, the data stream supports custom routing. Defaults to `false`. Available only in **8.x**
     */
    allowCustomRouting?: pulumi.Input<boolean>;
    /**
     * If true, the data stream is hidden.
     */
    hidden?: pulumi.Input<boolean>;
}

export interface IndexTemplateElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface IndexTemplateTemplate {
    /**
     * Alias to add.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.IndexTemplateTemplateAlias>[]>;
    /**
     * Mapping for fields in the index.
     */
    mappings?: pulumi.Input<string>;
    /**
     * Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings
     */
    settings?: pulumi.Input<string>;
}

export interface IndexTemplateTemplateAlias {
    filter?: pulumi.Input<string>;
    indexRouting?: pulumi.Input<string>;
    isHidden?: pulumi.Input<boolean>;
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Name of the index template to create.
     */
    name: pulumi.Input<string>;
    routing?: pulumi.Input<string>;
    searchRouting?: pulumi.Input<string>;
}

export interface IngestPipelineElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface LogstashPipelineElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderElasticsearch {
    apiKey?: pulumi.Input<string>;
    caData?: pulumi.Input<string>;
    caFile?: pulumi.Input<string>;
    certData?: pulumi.Input<string>;
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    insecure?: pulumi.Input<boolean>;
    keyData?: pulumi.Input<string>;
    keyFile?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ScriptElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SecurityApiKeyElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SecurityRoleApplication {
    /**
     * The name of the application to which this entry applies.
     */
    application: pulumi.Input<string>;
    /**
     * A list of strings, where each element is the name of an application privilege or action.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list resources to which the privileges are applied.
     */
    resources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityRoleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SecurityRoleIndex {
    /**
     * Include matching restricted indices in names parameter. Usage is strongly discouraged as it can grant unrestricted operations on critical data, make the entire system unstable or leak sensitive information.
     */
    allowRestrictedIndices?: pulumi.Input<boolean>;
    /**
     * The document fields that the owners of the role have read access to.
     */
    fieldSecurity?: pulumi.Input<inputs.SecurityRoleIndexFieldSecurity>;
    /**
     * A list of indices (or index name patterns) to which the permissions in this entry apply.
     */
    names: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The index level privileges that the owners of the role have on the specified indices.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A search query that defines the documents the owners of the role have read access to.
     */
    query?: pulumi.Input<string>;
}

export interface SecurityRoleIndexFieldSecurity {
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
    grants?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityRoleMappingElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SecuritySystemUserElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SecurityUserElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SnapshotLifecycleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SnapshotRepositoryAzure {
    /**
     * Specifies the path within the container to the repository data.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * Azure named client to use.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Container name. You must create the Azure container before creating the repository.
     */
    container: pulumi.Input<string>;
    /**
     * Location mode. `primaryOnly` or `secondaryOnly`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
     */
    locationMode?: pulumi.Input<string>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface SnapshotRepositoryElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface SnapshotRepositoryFs {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Location of the shared filesystem used to store and retrieve snapshots.
     */
    location: pulumi.Input<string>;
    /**
     * Maximum number of snapshots the repository can contain.
     */
    maxNumberOfSnapshots?: pulumi.Input<number>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface SnapshotRepositoryGcs {
    /**
     * Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The name of the bucket to be used for snapshots.
     */
    bucket: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * The name of the client to use to connect to Google Cloud Storage.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface SnapshotRepositoryHdfs {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Whether to load the default Hadoop configuration or not.
     */
    loadDefaults?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * The file path within the filesystem where data is stored/loaded.
     */
    path: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * The uri address for hdfs. ex: "hdfs://\n\n:\n\n/".
     */
    uri: pulumi.Input<string>;
}

export interface SnapshotRepositoryS3 {
    /**
     * Specifies the path to the repository data within its bucket.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Name of the S3 bucket to use for snapshots.
     */
    bucket: pulumi.Input<string>;
    /**
     * Minimum threshold below which the chunk is uploaded using a single request.
     */
    bufferSize?: pulumi.Input<string>;
    /**
     * The S3 repository supports all S3 canned ACLs.
     */
    cannedAcl?: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * The name of the S3 client to use to connect to S3.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * When true, files are encrypted server-side using AES-256 algorithm.
     */
    serverSideEncryption?: pulumi.Input<boolean>;
    /**
     * Sets the S3 storage class for objects stored in the snapshot repository.
     */
    storageClass?: pulumi.Input<string>;
}

export interface SnapshotRepositoryUrl {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum number of retries for http and https URLs.
     */
    httpMaxRetries?: pulumi.Input<number>;
    /**
     * Maximum wait time for data transfers over a connection.
     */
    httpSocketTimeout?: pulumi.Input<string>;
    /**
     * Maximum number of snapshots the repository can contain.
     */
    maxNumberOfSnapshots?: pulumi.Input<number>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * URL location of the root of the shared filesystem repository.
     */
    url: pulumi.Input<string>;
}
export namespace config {
}
