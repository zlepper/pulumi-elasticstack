// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 *  $ pulumi import elasticstack:index/ingestPipeline:IngestPipeline my_ingest_pipeline <cluster_uuid>/<ingest pipeline name>
 * ```
 */
export class IngestPipeline extends pulumi.CustomResource {
    /**
     * Get an existing IngestPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IngestPipelineState, opts?: pulumi.CustomResourceOptions): IngestPipeline {
        return new IngestPipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/ingestPipeline:IngestPipeline';

    /**
     * Returns true if the given object is an instance of IngestPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IngestPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IngestPipeline.__pulumiType;
    }

    /**
     * Description of the ingest pipeline.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Elasticsearch connection configuration block.
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.IngestPipelineElasticsearchConnection | undefined>;
    /**
     * Optional user metadata about the index template.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * The name of the ingest pipeline.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
     */
    public readonly onFailures!: pulumi.Output<string[] | undefined>;
    /**
     * Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
     */
    public readonly processors!: pulumi.Output<string[]>;

    /**
     * Create a IngestPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IngestPipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IngestPipelineArgs | IngestPipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IngestPipelineState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onFailures"] = state ? state.onFailures : undefined;
            resourceInputs["processors"] = state ? state.processors : undefined;
        } else {
            const args = argsOrState as IngestPipelineArgs | undefined;
            if ((!args || args.processors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processors'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onFailures"] = args ? args.onFailures : undefined;
            resourceInputs["processors"] = args ? args.processors : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IngestPipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IngestPipeline resources.
 */
export interface IngestPipelineState {
    /**
     * Description of the ingest pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.IngestPipelineElasticsearchConnection>;
    /**
     * Optional user metadata about the index template.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name of the ingest pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
     */
    processors?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IngestPipeline resource.
 */
export interface IngestPipelineArgs {
    /**
     * Description of the ingest pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block.
     */
    elasticsearchConnection?: pulumi.Input<inputs.IngestPipelineElasticsearchConnection>;
    /**
     * Optional user metadata about the index template.
     */
    metadata?: pulumi.Input<string>;
    /**
     * The name of the ingest pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
     */
    processors: pulumi.Input<pulumi.Input<string>[]>;
}
