// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Executes another pipeline.
//
// The name of the current pipeline can be accessed from the `_ingest.pipeline` ingest metadata key.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/pipeline-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		appendTags, err := elasticstack.GetIngestProcessorAppend(ctx, &elasticstack.GetIngestProcessorAppendArgs{
// 			Field: "tags",
// 			Values: []string{
// 				"production",
// 				"{{{app}}}",
// 				"{{{owner}}}",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		pipelineA, err := elasticstack.NewIngestPipeline(ctx, "pipelineA", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(appendTags.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fingerprint, err := elasticstack.GetIngestProcessorFingerprint(ctx, &elasticstack.GetIngestProcessorFingerprintArgs{
// 			Fields: []string{
// 				"owner",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		pipeline := elasticstack.GetIngestProcessorPipelineOutput(ctx, elasticstack.GetIngestProcessorPipelineOutputArgs{
// 			Name: pipelineA.Name,
// 		}, nil)
// 		_, err = elasticstack.NewIngestPipeline(ctx, "pipelineB", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				pipeline.ApplyT(func(pipeline elasticstack.GetIngestProcessorPipelineResult) (*string, error) {
// 					return &pipeline.Json, nil
// 				}).(pulumi.StringPtrOutput),
// 				*pulumi.String(fingerprint.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetIngestProcessorPipeline(ctx *pulumi.Context, args *GetIngestProcessorPipelineArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorPipelineResult, error) {
	var rv GetIngestProcessorPipelineResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorPipeline:getIngestProcessorPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorPipeline.
type GetIngestProcessorPipelineArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// The name of the pipeline to execute.
	Name string `pulumi:"name"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
}

// A collection of values returned by getIngestProcessorPipeline.
type GetIngestProcessorPipelineResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Internal identifier of the resource.
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// The name of the pipeline to execute.
	Name string `pulumi:"name"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
}

func GetIngestProcessorPipelineOutput(ctx *pulumi.Context, args GetIngestProcessorPipelineOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorPipelineResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorPipelineResult, error) {
			args := v.(GetIngestProcessorPipelineArgs)
			r, err := GetIngestProcessorPipeline(ctx, &args, opts...)
			var s GetIngestProcessorPipelineResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorPipelineResultOutput)
}

// A collection of arguments for invoking getIngestProcessorPipeline.
type GetIngestProcessorPipelineOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// The name of the pipeline to execute.
	Name pulumi.StringInput `pulumi:"name"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (GetIngestProcessorPipelineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorPipelineArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorPipeline.
type GetIngestProcessorPipelineResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorPipelineResult)(nil)).Elem()
}

func (o GetIngestProcessorPipelineResultOutput) ToGetIngestProcessorPipelineResultOutput() GetIngestProcessorPipelineResultOutput {
	return o
}

func (o GetIngestProcessorPipelineResultOutput) ToGetIngestProcessorPipelineResultOutputWithContext(ctx context.Context) GetIngestProcessorPipelineResultOutput {
	return o
}

// Description of the processor.
func (o GetIngestProcessorPipelineResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Internal identifier of the resource.
func (o GetIngestProcessorPipelineResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o GetIngestProcessorPipelineResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o GetIngestProcessorPipelineResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorPipelineResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) string { return v.Json }).(pulumi.StringOutput)
}

// The name of the pipeline to execute.
func (o GetIngestProcessorPipelineResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) string { return v.Name }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o GetIngestProcessorPipelineResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Identifier for the processor.
func (o GetIngestProcessorPipelineResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorPipelineResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorPipelineResultOutput{})
}
