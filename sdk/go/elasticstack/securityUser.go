// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds and updates users in the native realm. These users are commonly referred to as native users. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
// 	"fmt"
//
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"env":    "testing",
// 			"open":   false,
// 			"number": 49,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err = elasticstack.NewSecurityUser(ctx, "user", &elasticstack.SecurityUserArgs{
// 			Username:     pulumi.String("testuser"),
// 			PasswordHash: pulumi.String(fmt.Sprintf("$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO")),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("kibana_user"),
// 			},
// 			Metadata: pulumi.String(json0),
// 			ElasticsearchConnection: &elasticstack.SecurityUserElasticsearchConnectionArgs{
// 				Endpoints: pulumi.StringArray{
// 					pulumi.String("http://localhost:9200"),
// 				},
// 				Username: pulumi.String("elastic"),
// 				Password: pulumi.String("changeme"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"env":    "testing",
// 			"open":   false,
// 			"number": 49,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		_, err = elasticstack.NewSecurityUser(ctx, "dev", &elasticstack.SecurityUserArgs{
// 			Username: pulumi.String("devuser"),
// 			Password: pulumi.String("1234567890"),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("kibana_user"),
// 			},
// 			Metadata: pulumi.String(json1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/securityUser:SecurityUser user <cluster_uuid>/elastic
// ```
type SecurityUser struct {
	pulumi.CustomResourceState

	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityUserElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// The email of the user.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The full name of the user.
	FullName pulumi.StringPtrOutput `pulumi:"fullName"`
	// Arbitrary metadata that you want to associate with the user.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrOutput `pulumi:"passwordHash"`
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSecurityUser registers a new resource with the given unique name, arguments, and options.
func NewSecurityUser(ctx *pulumi.Context,
	name string, args *SecurityUserArgs, opts ...pulumi.ResourceOption) (*SecurityUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PasswordHash != nil {
		args.PasswordHash = pulumi.ToSecret(args.PasswordHash).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"passwordHash",
	})
	opts = append(opts, secrets)
	var resource SecurityUser
	err := ctx.RegisterResource("elasticstack:index/securityUser:SecurityUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityUser gets an existing SecurityUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityUserState, opts ...pulumi.ResourceOption) (*SecurityUser, error) {
	var resource SecurityUser
	err := ctx.ReadResource("elasticstack:index/securityUser:SecurityUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityUser resources.
type securityUserState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecurityUserElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The email of the user.
	Email *string `pulumi:"email"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The full name of the user.
	FullName *string `pulumi:"fullName"`
	// Arbitrary metadata that you want to associate with the user.
	Metadata *string `pulumi:"metadata"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password *string `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash *string `pulumi:"passwordHash"`
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles []string `pulumi:"roles"`
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username *string `pulumi:"username"`
}

type SecurityUserState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityUserElasticsearchConnectionPtrInput
	// The email of the user.
	Email pulumi.StringPtrInput
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The full name of the user.
	FullName pulumi.StringPtrInput
	// Arbitrary metadata that you want to associate with the user.
	Metadata pulumi.StringPtrInput
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrInput
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrInput
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles pulumi.StringArrayInput
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username pulumi.StringPtrInput
}

func (SecurityUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityUserState)(nil)).Elem()
}

type securityUserArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecurityUserElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The email of the user.
	Email *string `pulumi:"email"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The full name of the user.
	FullName *string `pulumi:"fullName"`
	// Arbitrary metadata that you want to associate with the user.
	Metadata *string `pulumi:"metadata"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password *string `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash *string `pulumi:"passwordHash"`
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles []string `pulumi:"roles"`
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SecurityUser resource.
type SecurityUserArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityUserElasticsearchConnectionPtrInput
	// The email of the user.
	Email pulumi.StringPtrInput
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The full name of the user.
	FullName pulumi.StringPtrInput
	// Arbitrary metadata that you want to associate with the user.
	Metadata pulumi.StringPtrInput
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrInput
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrInput
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles pulumi.StringArrayInput
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username pulumi.StringInput
}

func (SecurityUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityUserArgs)(nil)).Elem()
}

type SecurityUserInput interface {
	pulumi.Input

	ToSecurityUserOutput() SecurityUserOutput
	ToSecurityUserOutputWithContext(ctx context.Context) SecurityUserOutput
}

func (*SecurityUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityUser)(nil)).Elem()
}

func (i *SecurityUser) ToSecurityUserOutput() SecurityUserOutput {
	return i.ToSecurityUserOutputWithContext(context.Background())
}

func (i *SecurityUser) ToSecurityUserOutputWithContext(ctx context.Context) SecurityUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityUserOutput)
}

// SecurityUserArrayInput is an input type that accepts SecurityUserArray and SecurityUserArrayOutput values.
// You can construct a concrete instance of `SecurityUserArrayInput` via:
//
//          SecurityUserArray{ SecurityUserArgs{...} }
type SecurityUserArrayInput interface {
	pulumi.Input

	ToSecurityUserArrayOutput() SecurityUserArrayOutput
	ToSecurityUserArrayOutputWithContext(context.Context) SecurityUserArrayOutput
}

type SecurityUserArray []SecurityUserInput

func (SecurityUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityUser)(nil)).Elem()
}

func (i SecurityUserArray) ToSecurityUserArrayOutput() SecurityUserArrayOutput {
	return i.ToSecurityUserArrayOutputWithContext(context.Background())
}

func (i SecurityUserArray) ToSecurityUserArrayOutputWithContext(ctx context.Context) SecurityUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityUserArrayOutput)
}

// SecurityUserMapInput is an input type that accepts SecurityUserMap and SecurityUserMapOutput values.
// You can construct a concrete instance of `SecurityUserMapInput` via:
//
//          SecurityUserMap{ "key": SecurityUserArgs{...} }
type SecurityUserMapInput interface {
	pulumi.Input

	ToSecurityUserMapOutput() SecurityUserMapOutput
	ToSecurityUserMapOutputWithContext(context.Context) SecurityUserMapOutput
}

type SecurityUserMap map[string]SecurityUserInput

func (SecurityUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityUser)(nil)).Elem()
}

func (i SecurityUserMap) ToSecurityUserMapOutput() SecurityUserMapOutput {
	return i.ToSecurityUserMapOutputWithContext(context.Background())
}

func (i SecurityUserMap) ToSecurityUserMapOutputWithContext(ctx context.Context) SecurityUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityUserMapOutput)
}

type SecurityUserOutput struct{ *pulumi.OutputState }

func (SecurityUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityUser)(nil)).Elem()
}

func (o SecurityUserOutput) ToSecurityUserOutput() SecurityUserOutput {
	return o
}

func (o SecurityUserOutput) ToSecurityUserOutputWithContext(ctx context.Context) SecurityUserOutput {
	return o
}

// Elasticsearch connection configuration block.
func (o SecurityUserOutput) ElasticsearchConnection() SecurityUserElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *SecurityUser) SecurityUserElasticsearchConnectionPtrOutput { return v.ElasticsearchConnection }).(SecurityUserElasticsearchConnectionPtrOutput)
}

// The email of the user.
func (o SecurityUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// Specifies whether the user is enabled. The default value is true.
func (o SecurityUserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The full name of the user.
func (o SecurityUserOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringPtrOutput { return v.FullName }).(pulumi.StringPtrOutput)
}

// Arbitrary metadata that you want to associate with the user.
func (o SecurityUserOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The user’s password. Passwords must be at least 6 characters long.
func (o SecurityUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
func (o SecurityUserOutput) PasswordHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringPtrOutput { return v.PasswordHash }).(pulumi.StringPtrOutput)
}

// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
func (o SecurityUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
func (o SecurityUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type SecurityUserArrayOutput struct{ *pulumi.OutputState }

func (SecurityUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityUser)(nil)).Elem()
}

func (o SecurityUserArrayOutput) ToSecurityUserArrayOutput() SecurityUserArrayOutput {
	return o
}

func (o SecurityUserArrayOutput) ToSecurityUserArrayOutputWithContext(ctx context.Context) SecurityUserArrayOutput {
	return o
}

func (o SecurityUserArrayOutput) Index(i pulumi.IntInput) SecurityUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityUser {
		return vs[0].([]*SecurityUser)[vs[1].(int)]
	}).(SecurityUserOutput)
}

type SecurityUserMapOutput struct{ *pulumi.OutputState }

func (SecurityUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityUser)(nil)).Elem()
}

func (o SecurityUserMapOutput) ToSecurityUserMapOutput() SecurityUserMapOutput {
	return o
}

func (o SecurityUserMapOutput) ToSecurityUserMapOutputWithContext(ctx context.Context) SecurityUserMapOutput {
	return o
}

func (o SecurityUserMapOutput) MapIndex(k pulumi.StringInput) SecurityUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityUser {
		return vs[0].(map[string]*SecurityUser)[vs[1].(string)]
	}).(SecurityUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityUserInput)(nil)).Elem(), &SecurityUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityUserArrayInput)(nil)).Elem(), SecurityUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityUserMapInput)(nil)).Elem(), SecurityUserMap{})
	pulumi.RegisterOutputType(SecurityUserOutput{})
	pulumi.RegisterOutputType(SecurityUserArrayOutput{})
	pulumi.RegisterOutputType(SecurityUserMapOutput{})
}
