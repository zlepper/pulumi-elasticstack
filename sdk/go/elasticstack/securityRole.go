// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds and updates roles in the native realm. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"version": 1,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		roleSecurityRole, err := elasticstack.NewSecurityRole(ctx, "roleSecurityRole", &elasticstack.SecurityRoleArgs{
// 			Clusters: pulumi.StringArray{
// 				pulumi.String("all"),
// 			},
// 			Indices: elasticstack.SecurityRoleIndexArray{
// 				&elasticstack.SecurityRoleIndexArgs{
// 					Names: pulumi.StringArray{
// 						pulumi.String("index1"),
// 						pulumi.String("index2"),
// 					},
// 					Privileges: pulumi.StringArray{
// 						pulumi.String("all"),
// 					},
// 				},
// 			},
// 			Applications: elasticstack.SecurityRoleApplicationArray{
// 				&elasticstack.SecurityRoleApplicationArgs{
// 					Application: pulumi.String("myapp"),
// 					Privileges: pulumi.StringArray{
// 						pulumi.String("admin"),
// 						pulumi.String("read"),
// 					},
// 					Resources: pulumi.StringArray{
// 						pulumi.String("*"),
// 					},
// 				},
// 			},
// 			RunAs: pulumi.StringArray{
// 				pulumi.String("other_user"),
// 			},
// 			Metadata: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("role", roleSecurityRole)
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/securityRole:SecurityRole my_role <cluster_uuid>/<role name>
// ```
type SecurityRole struct {
	pulumi.CustomResourceState

	// A list of application privilege entries.
	Applications SecurityRoleApplicationArrayOutput `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters pulumi.StringArrayOutput `pulumi:"clusters"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityRoleElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global pulumi.StringPtrOutput `pulumi:"global"`
	// A list of indices permissions entries.
	Indices SecurityRoleIndexArrayOutput `pulumi:"indices"`
	// Optional meta-data.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name of the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayOutput `pulumi:"runAs"`
}

// NewSecurityRole registers a new resource with the given unique name, arguments, and options.
func NewSecurityRole(ctx *pulumi.Context,
	name string, args *SecurityRoleArgs, opts ...pulumi.ResourceOption) (*SecurityRole, error) {
	if args == nil {
		args = &SecurityRoleArgs{}
	}

	var resource SecurityRole
	err := ctx.RegisterResource("elasticstack:index/securityRole:SecurityRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityRole gets an existing SecurityRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityRoleState, opts ...pulumi.ResourceOption) (*SecurityRole, error) {
	var resource SecurityRole
	err := ctx.ReadResource("elasticstack:index/securityRole:SecurityRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityRole resources.
type securityRoleState struct {
	// A list of application privilege entries.
	Applications []SecurityRoleApplication `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters []string `pulumi:"clusters"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecurityRoleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global *string `pulumi:"global"`
	// A list of indices permissions entries.
	Indices []SecurityRoleIndex `pulumi:"indices"`
	// Optional meta-data.
	Metadata *string `pulumi:"metadata"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs []string `pulumi:"runAs"`
}

type SecurityRoleState struct {
	// A list of application privilege entries.
	Applications SecurityRoleApplicationArrayInput
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters pulumi.StringArrayInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityRoleElasticsearchConnectionPtrInput
	// An object defining global privileges.
	Global pulumi.StringPtrInput
	// A list of indices permissions entries.
	Indices SecurityRoleIndexArrayInput
	// Optional meta-data.
	Metadata pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayInput
}

func (SecurityRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityRoleState)(nil)).Elem()
}

type securityRoleArgs struct {
	// A list of application privilege entries.
	Applications []SecurityRoleApplication `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters []string `pulumi:"clusters"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecurityRoleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global *string `pulumi:"global"`
	// A list of indices permissions entries.
	Indices []SecurityRoleIndex `pulumi:"indices"`
	// Optional meta-data.
	Metadata *string `pulumi:"metadata"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs []string `pulumi:"runAs"`
}

// The set of arguments for constructing a SecurityRole resource.
type SecurityRoleArgs struct {
	// A list of application privilege entries.
	Applications SecurityRoleApplicationArrayInput
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters pulumi.StringArrayInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityRoleElasticsearchConnectionPtrInput
	// An object defining global privileges.
	Global pulumi.StringPtrInput
	// A list of indices permissions entries.
	Indices SecurityRoleIndexArrayInput
	// Optional meta-data.
	Metadata pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayInput
}

func (SecurityRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityRoleArgs)(nil)).Elem()
}

type SecurityRoleInput interface {
	pulumi.Input

	ToSecurityRoleOutput() SecurityRoleOutput
	ToSecurityRoleOutputWithContext(ctx context.Context) SecurityRoleOutput
}

func (*SecurityRole) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityRole)(nil)).Elem()
}

func (i *SecurityRole) ToSecurityRoleOutput() SecurityRoleOutput {
	return i.ToSecurityRoleOutputWithContext(context.Background())
}

func (i *SecurityRole) ToSecurityRoleOutputWithContext(ctx context.Context) SecurityRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityRoleOutput)
}

// SecurityRoleArrayInput is an input type that accepts SecurityRoleArray and SecurityRoleArrayOutput values.
// You can construct a concrete instance of `SecurityRoleArrayInput` via:
//
//          SecurityRoleArray{ SecurityRoleArgs{...} }
type SecurityRoleArrayInput interface {
	pulumi.Input

	ToSecurityRoleArrayOutput() SecurityRoleArrayOutput
	ToSecurityRoleArrayOutputWithContext(context.Context) SecurityRoleArrayOutput
}

type SecurityRoleArray []SecurityRoleInput

func (SecurityRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityRole)(nil)).Elem()
}

func (i SecurityRoleArray) ToSecurityRoleArrayOutput() SecurityRoleArrayOutput {
	return i.ToSecurityRoleArrayOutputWithContext(context.Background())
}

func (i SecurityRoleArray) ToSecurityRoleArrayOutputWithContext(ctx context.Context) SecurityRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityRoleArrayOutput)
}

// SecurityRoleMapInput is an input type that accepts SecurityRoleMap and SecurityRoleMapOutput values.
// You can construct a concrete instance of `SecurityRoleMapInput` via:
//
//          SecurityRoleMap{ "key": SecurityRoleArgs{...} }
type SecurityRoleMapInput interface {
	pulumi.Input

	ToSecurityRoleMapOutput() SecurityRoleMapOutput
	ToSecurityRoleMapOutputWithContext(context.Context) SecurityRoleMapOutput
}

type SecurityRoleMap map[string]SecurityRoleInput

func (SecurityRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityRole)(nil)).Elem()
}

func (i SecurityRoleMap) ToSecurityRoleMapOutput() SecurityRoleMapOutput {
	return i.ToSecurityRoleMapOutputWithContext(context.Background())
}

func (i SecurityRoleMap) ToSecurityRoleMapOutputWithContext(ctx context.Context) SecurityRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityRoleMapOutput)
}

type SecurityRoleOutput struct{ *pulumi.OutputState }

func (SecurityRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityRole)(nil)).Elem()
}

func (o SecurityRoleOutput) ToSecurityRoleOutput() SecurityRoleOutput {
	return o
}

func (o SecurityRoleOutput) ToSecurityRoleOutputWithContext(ctx context.Context) SecurityRoleOutput {
	return o
}

// A list of application privilege entries.
func (o SecurityRoleOutput) Applications() SecurityRoleApplicationArrayOutput {
	return o.ApplyT(func(v *SecurityRole) SecurityRoleApplicationArrayOutput { return v.Applications }).(SecurityRoleApplicationArrayOutput)
}

// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
func (o SecurityRoleOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityRole) pulumi.StringArrayOutput { return v.Clusters }).(pulumi.StringArrayOutput)
}

// Elasticsearch connection configuration block.
func (o SecurityRoleOutput) ElasticsearchConnection() SecurityRoleElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *SecurityRole) SecurityRoleElasticsearchConnectionPtrOutput { return v.ElasticsearchConnection }).(SecurityRoleElasticsearchConnectionPtrOutput)
}

// An object defining global privileges.
func (o SecurityRoleOutput) Global() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityRole) pulumi.StringPtrOutput { return v.Global }).(pulumi.StringPtrOutput)
}

// A list of indices permissions entries.
func (o SecurityRoleOutput) Indices() SecurityRoleIndexArrayOutput {
	return o.ApplyT(func(v *SecurityRole) SecurityRoleIndexArrayOutput { return v.Indices }).(SecurityRoleIndexArrayOutput)
}

// Optional meta-data.
func (o SecurityRoleOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityRole) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The name of the role.
func (o SecurityRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of users that the owners of this role can impersonate.
func (o SecurityRoleOutput) RunAs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityRole) pulumi.StringArrayOutput { return v.RunAs }).(pulumi.StringArrayOutput)
}

type SecurityRoleArrayOutput struct{ *pulumi.OutputState }

func (SecurityRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityRole)(nil)).Elem()
}

func (o SecurityRoleArrayOutput) ToSecurityRoleArrayOutput() SecurityRoleArrayOutput {
	return o
}

func (o SecurityRoleArrayOutput) ToSecurityRoleArrayOutputWithContext(ctx context.Context) SecurityRoleArrayOutput {
	return o
}

func (o SecurityRoleArrayOutput) Index(i pulumi.IntInput) SecurityRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityRole {
		return vs[0].([]*SecurityRole)[vs[1].(int)]
	}).(SecurityRoleOutput)
}

type SecurityRoleMapOutput struct{ *pulumi.OutputState }

func (SecurityRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityRole)(nil)).Elem()
}

func (o SecurityRoleMapOutput) ToSecurityRoleMapOutput() SecurityRoleMapOutput {
	return o
}

func (o SecurityRoleMapOutput) ToSecurityRoleMapOutputWithContext(ctx context.Context) SecurityRoleMapOutput {
	return o
}

func (o SecurityRoleMapOutput) MapIndex(k pulumi.StringInput) SecurityRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityRole {
		return vs[0].(map[string]*SecurityRole)[vs[1].(string)]
	}).(SecurityRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityRoleInput)(nil)).Elem(), &SecurityRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityRoleArrayInput)(nil)).Elem(), SecurityRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityRoleMapInput)(nil)).Elem(), SecurityRoleMap{})
	pulumi.RegisterOutputType(SecurityRoleOutput{})
	pulumi.RegisterOutputType(SecurityRoleArrayOutput{})
	pulumi.RegisterOutputType(SecurityRoleMapOutput{})
}
