// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The geoip processor adds information about the geographical location of an IPv4 or IPv6 address.
//
// By default, the processor uses the GeoLite2 City, GeoLite2 Country, and GeoLite2 ASN GeoIP2 databases from MaxMind, shared under the CC BY-SA 4.0 license. Elasticsearch automatically downloads updates for these databases from the Elastic GeoIP endpoint: https://geoip.elastic.co/v1/database. To get download statistics for these updates, use the GeoIP stats API.
//
// If your cluster can’t connect to the Elastic GeoIP endpoint or you want to manage your own updates, [see Manage your own GeoIP2 database updates](https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html#manage-geoip-database-updates).
//
// If Elasticsearch can’t connect to the endpoint for 30 days all updated databases will become invalid. Elasticsearch will stop enriching documents with geoip data and will add tags: ["_geoip_expired_database"] field instead.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		geoip, err := elasticstack.GetIngestProcessorGeoip(ctx, &elasticstack.GetIngestProcessorGeoipArgs{
// 			Field: "ip",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIngestPipeline(ctx, "myIngestPipeline", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(geoip.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetIngestProcessorGeoip(ctx *pulumi.Context, args *GetIngestProcessorGeoipArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorGeoipResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetIngestProcessorGeoipResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorGeoip:getIngestProcessorGeoip", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorGeoip.
type GetIngestProcessorGeoipArgs struct {
	// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
	DatabaseFile *string `pulumi:"databaseFile"`
	// The field to get the ip address from for the geographical lookup.
	Field string `pulumi:"field"`
	// If `true` only first found geoip data will be returned, even if field contains array.
	FirstOnly *bool `pulumi:"firstOnly"`
	// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Controls what properties are added to the `targetField` based on the geoip lookup.
	Properties []string `pulumi:"properties"`
	// The field that will hold the geographical information looked up from the MaxMind database.
	TargetField *string `pulumi:"targetField"`
}

// A collection of values returned by getIngestProcessorGeoip.
type GetIngestProcessorGeoipResult struct {
	// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
	DatabaseFile *string `pulumi:"databaseFile"`
	// The field to get the ip address from for the geographical lookup.
	Field string `pulumi:"field"`
	// If `true` only first found geoip data will be returned, even if field contains array.
	FirstOnly *bool `pulumi:"firstOnly"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Controls what properties are added to the `targetField` based on the geoip lookup.
	Properties []string `pulumi:"properties"`
	// The field that will hold the geographical information looked up from the MaxMind database.
	TargetField *string `pulumi:"targetField"`
}

func GetIngestProcessorGeoipOutput(ctx *pulumi.Context, args GetIngestProcessorGeoipOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorGeoipResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorGeoipResult, error) {
			args := v.(GetIngestProcessorGeoipArgs)
			r, err := GetIngestProcessorGeoip(ctx, &args, opts...)
			var s GetIngestProcessorGeoipResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorGeoipResultOutput)
}

// A collection of arguments for invoking getIngestProcessorGeoip.
type GetIngestProcessorGeoipOutputArgs struct {
	// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
	DatabaseFile pulumi.StringPtrInput `pulumi:"databaseFile"`
	// The field to get the ip address from for the geographical lookup.
	Field pulumi.StringInput `pulumi:"field"`
	// If `true` only first found geoip data will be returned, even if field contains array.
	FirstOnly pulumi.BoolPtrInput `pulumi:"firstOnly"`
	// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Controls what properties are added to the `targetField` based on the geoip lookup.
	Properties pulumi.StringArrayInput `pulumi:"properties"`
	// The field that will hold the geographical information looked up from the MaxMind database.
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
}

func (GetIngestProcessorGeoipOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorGeoipArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorGeoip.
type GetIngestProcessorGeoipResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorGeoipResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorGeoipResult)(nil)).Elem()
}

func (o GetIngestProcessorGeoipResultOutput) ToGetIngestProcessorGeoipResultOutput() GetIngestProcessorGeoipResultOutput {
	return o
}

func (o GetIngestProcessorGeoipResultOutput) ToGetIngestProcessorGeoipResultOutputWithContext(ctx context.Context) GetIngestProcessorGeoipResultOutput {
	return o
}

// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
func (o GetIngestProcessorGeoipResultOutput) DatabaseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) *string { return v.DatabaseFile }).(pulumi.StringPtrOutput)
}

// The field to get the ip address from for the geographical lookup.
func (o GetIngestProcessorGeoipResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) string { return v.Field }).(pulumi.StringOutput)
}

// If `true` only first found geoip data will be returned, even if field contains array.
func (o GetIngestProcessorGeoipResultOutput) FirstOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) *bool { return v.FirstOnly }).(pulumi.BoolPtrOutput)
}

// Internal identifier of the resource
func (o GetIngestProcessorGeoipResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) string { return v.Id }).(pulumi.StringOutput)
}

// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
func (o GetIngestProcessorGeoipResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorGeoipResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) string { return v.Json }).(pulumi.StringOutput)
}

// Controls what properties are added to the `targetField` based on the geoip lookup.
func (o GetIngestProcessorGeoipResultOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) []string { return v.Properties }).(pulumi.StringArrayOutput)
}

// The field that will hold the geographical information looked up from the MaxMind database.
func (o GetIngestProcessorGeoipResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGeoipResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorGeoipResultOutput{})
}
