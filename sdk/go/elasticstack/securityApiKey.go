// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an API key for access without requiring basic authentication. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"role-a": map[string]interface{}{
// 				"cluster": []string{
// 					"all",
// 				},
// 				"indices": []map[string]interface{}{
// 					map[string]interface{}{
// 						"names": []string{
// 							"index-a*",
// 						},
// 						"privileges": []string{
// 							"read",
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"env":    "testing",
// 			"open":   false,
// 			"number": 49,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		apiKeySecurityApiKey, err := elasticstack.NewSecurityApiKey(ctx, "apiKeySecurityApiKey", &elasticstack.SecurityApiKeyArgs{
// 			RoleDescriptors: pulumi.String(json0),
// 			Expiration:      pulumi.String("1d"),
// 			Metadata:        pulumi.String(json1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("apiKey", apiKeySecurityApiKey)
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported due to the generated API key only being visible on create.
type SecurityApiKey struct {
	pulumi.CustomResourceState

	// Generated API Key.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityApiKeyElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// API key credentials which is the Base64-encoding of the UTF-8 representation of the id and apiKey joined by a colon (:).
	Encoded pulumi.StringOutput `pulumi:"encoded"`
	// Expiration time for the API key. By default, API keys never expire.
	Expiration pulumi.StringPtrOutput `pulumi:"expiration"`
	// Expiration time in milliseconds for the API key. By default, API keys never expire.
	ExpirationTimestamp pulumi.IntOutput `pulumi:"expirationTimestamp"`
	// Arbitrary metadata that you want to associate with the API key.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// Specifies the name for this API key.
	Name pulumi.StringOutput `pulumi:"name"`
	// Role descriptors for this API key.
	RoleDescriptors pulumi.StringPtrOutput `pulumi:"roleDescriptors"`
}

// NewSecurityApiKey registers a new resource with the given unique name, arguments, and options.
func NewSecurityApiKey(ctx *pulumi.Context,
	name string, args *SecurityApiKeyArgs, opts ...pulumi.ResourceOption) (*SecurityApiKey, error) {
	if args == nil {
		args = &SecurityApiKeyArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"encoded",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SecurityApiKey
	err := ctx.RegisterResource("elasticstack:index/securityApiKey:SecurityApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityApiKey gets an existing SecurityApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityApiKeyState, opts ...pulumi.ResourceOption) (*SecurityApiKey, error) {
	var resource SecurityApiKey
	err := ctx.ReadResource("elasticstack:index/securityApiKey:SecurityApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityApiKey resources.
type securityApiKeyState struct {
	// Generated API Key.
	ApiKey *string `pulumi:"apiKey"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecurityApiKeyElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// API key credentials which is the Base64-encoding of the UTF-8 representation of the id and apiKey joined by a colon (:).
	Encoded *string `pulumi:"encoded"`
	// Expiration time for the API key. By default, API keys never expire.
	Expiration *string `pulumi:"expiration"`
	// Expiration time in milliseconds for the API key. By default, API keys never expire.
	ExpirationTimestamp *int `pulumi:"expirationTimestamp"`
	// Arbitrary metadata that you want to associate with the API key.
	Metadata *string `pulumi:"metadata"`
	// Specifies the name for this API key.
	Name *string `pulumi:"name"`
	// Role descriptors for this API key.
	RoleDescriptors *string `pulumi:"roleDescriptors"`
}

type SecurityApiKeyState struct {
	// Generated API Key.
	ApiKey pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityApiKeyElasticsearchConnectionPtrInput
	// API key credentials which is the Base64-encoding of the UTF-8 representation of the id and apiKey joined by a colon (:).
	Encoded pulumi.StringPtrInput
	// Expiration time for the API key. By default, API keys never expire.
	Expiration pulumi.StringPtrInput
	// Expiration time in milliseconds for the API key. By default, API keys never expire.
	ExpirationTimestamp pulumi.IntPtrInput
	// Arbitrary metadata that you want to associate with the API key.
	Metadata pulumi.StringPtrInput
	// Specifies the name for this API key.
	Name pulumi.StringPtrInput
	// Role descriptors for this API key.
	RoleDescriptors pulumi.StringPtrInput
}

func (SecurityApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityApiKeyState)(nil)).Elem()
}

type securityApiKeyArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecurityApiKeyElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Expiration time for the API key. By default, API keys never expire.
	Expiration *string `pulumi:"expiration"`
	// Arbitrary metadata that you want to associate with the API key.
	Metadata *string `pulumi:"metadata"`
	// Specifies the name for this API key.
	Name *string `pulumi:"name"`
	// Role descriptors for this API key.
	RoleDescriptors *string `pulumi:"roleDescriptors"`
}

// The set of arguments for constructing a SecurityApiKey resource.
type SecurityApiKeyArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecurityApiKeyElasticsearchConnectionPtrInput
	// Expiration time for the API key. By default, API keys never expire.
	Expiration pulumi.StringPtrInput
	// Arbitrary metadata that you want to associate with the API key.
	Metadata pulumi.StringPtrInput
	// Specifies the name for this API key.
	Name pulumi.StringPtrInput
	// Role descriptors for this API key.
	RoleDescriptors pulumi.StringPtrInput
}

func (SecurityApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityApiKeyArgs)(nil)).Elem()
}

type SecurityApiKeyInput interface {
	pulumi.Input

	ToSecurityApiKeyOutput() SecurityApiKeyOutput
	ToSecurityApiKeyOutputWithContext(ctx context.Context) SecurityApiKeyOutput
}

func (*SecurityApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityApiKey)(nil)).Elem()
}

func (i *SecurityApiKey) ToSecurityApiKeyOutput() SecurityApiKeyOutput {
	return i.ToSecurityApiKeyOutputWithContext(context.Background())
}

func (i *SecurityApiKey) ToSecurityApiKeyOutputWithContext(ctx context.Context) SecurityApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityApiKeyOutput)
}

// SecurityApiKeyArrayInput is an input type that accepts SecurityApiKeyArray and SecurityApiKeyArrayOutput values.
// You can construct a concrete instance of `SecurityApiKeyArrayInput` via:
//
//          SecurityApiKeyArray{ SecurityApiKeyArgs{...} }
type SecurityApiKeyArrayInput interface {
	pulumi.Input

	ToSecurityApiKeyArrayOutput() SecurityApiKeyArrayOutput
	ToSecurityApiKeyArrayOutputWithContext(context.Context) SecurityApiKeyArrayOutput
}

type SecurityApiKeyArray []SecurityApiKeyInput

func (SecurityApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityApiKey)(nil)).Elem()
}

func (i SecurityApiKeyArray) ToSecurityApiKeyArrayOutput() SecurityApiKeyArrayOutput {
	return i.ToSecurityApiKeyArrayOutputWithContext(context.Background())
}

func (i SecurityApiKeyArray) ToSecurityApiKeyArrayOutputWithContext(ctx context.Context) SecurityApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityApiKeyArrayOutput)
}

// SecurityApiKeyMapInput is an input type that accepts SecurityApiKeyMap and SecurityApiKeyMapOutput values.
// You can construct a concrete instance of `SecurityApiKeyMapInput` via:
//
//          SecurityApiKeyMap{ "key": SecurityApiKeyArgs{...} }
type SecurityApiKeyMapInput interface {
	pulumi.Input

	ToSecurityApiKeyMapOutput() SecurityApiKeyMapOutput
	ToSecurityApiKeyMapOutputWithContext(context.Context) SecurityApiKeyMapOutput
}

type SecurityApiKeyMap map[string]SecurityApiKeyInput

func (SecurityApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityApiKey)(nil)).Elem()
}

func (i SecurityApiKeyMap) ToSecurityApiKeyMapOutput() SecurityApiKeyMapOutput {
	return i.ToSecurityApiKeyMapOutputWithContext(context.Background())
}

func (i SecurityApiKeyMap) ToSecurityApiKeyMapOutputWithContext(ctx context.Context) SecurityApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityApiKeyMapOutput)
}

type SecurityApiKeyOutput struct{ *pulumi.OutputState }

func (SecurityApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityApiKey)(nil)).Elem()
}

func (o SecurityApiKeyOutput) ToSecurityApiKeyOutput() SecurityApiKeyOutput {
	return o
}

func (o SecurityApiKeyOutput) ToSecurityApiKeyOutputWithContext(ctx context.Context) SecurityApiKeyOutput {
	return o
}

// Generated API Key.
func (o SecurityApiKeyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Elasticsearch connection configuration block.
func (o SecurityApiKeyOutput) ElasticsearchConnection() SecurityApiKeyElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *SecurityApiKey) SecurityApiKeyElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(SecurityApiKeyElasticsearchConnectionPtrOutput)
}

// API key credentials which is the Base64-encoding of the UTF-8 representation of the id and apiKey joined by a colon (:).
func (o SecurityApiKeyOutput) Encoded() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.StringOutput { return v.Encoded }).(pulumi.StringOutput)
}

// Expiration time for the API key. By default, API keys never expire.
func (o SecurityApiKeyOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.StringPtrOutput { return v.Expiration }).(pulumi.StringPtrOutput)
}

// Expiration time in milliseconds for the API key. By default, API keys never expire.
func (o SecurityApiKeyOutput) ExpirationTimestamp() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.IntOutput { return v.ExpirationTimestamp }).(pulumi.IntOutput)
}

// Arbitrary metadata that you want to associate with the API key.
func (o SecurityApiKeyOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// Specifies the name for this API key.
func (o SecurityApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Role descriptors for this API key.
func (o SecurityApiKeyOutput) RoleDescriptors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityApiKey) pulumi.StringPtrOutput { return v.RoleDescriptors }).(pulumi.StringPtrOutput)
}

type SecurityApiKeyArrayOutput struct{ *pulumi.OutputState }

func (SecurityApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityApiKey)(nil)).Elem()
}

func (o SecurityApiKeyArrayOutput) ToSecurityApiKeyArrayOutput() SecurityApiKeyArrayOutput {
	return o
}

func (o SecurityApiKeyArrayOutput) ToSecurityApiKeyArrayOutputWithContext(ctx context.Context) SecurityApiKeyArrayOutput {
	return o
}

func (o SecurityApiKeyArrayOutput) Index(i pulumi.IntInput) SecurityApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityApiKey {
		return vs[0].([]*SecurityApiKey)[vs[1].(int)]
	}).(SecurityApiKeyOutput)
}

type SecurityApiKeyMapOutput struct{ *pulumi.OutputState }

func (SecurityApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityApiKey)(nil)).Elem()
}

func (o SecurityApiKeyMapOutput) ToSecurityApiKeyMapOutput() SecurityApiKeyMapOutput {
	return o
}

func (o SecurityApiKeyMapOutput) ToSecurityApiKeyMapOutputWithContext(ctx context.Context) SecurityApiKeyMapOutput {
	return o
}

func (o SecurityApiKeyMapOutput) MapIndex(k pulumi.StringInput) SecurityApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityApiKey {
		return vs[0].(map[string]*SecurityApiKey)[vs[1].(string)]
	}).(SecurityApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityApiKeyInput)(nil)).Elem(), &SecurityApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityApiKeyArrayInput)(nil)).Elem(), SecurityApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityApiKeyMapInput)(nil)).Elem(), SecurityApiKeyMap{})
	pulumi.RegisterOutputType(SecurityApiKeyOutput{})
	pulumi.RegisterOutputType(SecurityApiKeyArrayOutput{})
	pulumi.RegisterOutputType(SecurityApiKeyMapOutput{})
}
