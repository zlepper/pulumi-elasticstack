// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves role mappings. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mapping, err := elasticstack.LookupSecurityRoleMapping(ctx, &elasticstack.LookupSecurityRoleMappingArgs{
// 			Name: "my_mapping",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("user", mapping.Name)
// 		return nil
// 	})
// }
// ```
func LookupSecurityRoleMapping(ctx *pulumi.Context, args *LookupSecurityRoleMappingArgs, opts ...pulumi.InvokeOption) (*LookupSecurityRoleMappingResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSecurityRoleMappingResult
	err := ctx.Invoke("elasticstack:index/getSecurityRoleMapping:getSecurityRoleMapping", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityRoleMapping.
type LookupSecurityRoleMappingArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *GetSecurityRoleMappingElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The distinct name that identifies the role mapping, used solely as an identifier.
	Name string `pulumi:"name"`
}

// A collection of values returned by getSecurityRoleMapping.
type LookupSecurityRoleMappingResult struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *GetSecurityRoleMappingElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Mappings that have `enabled` set to `false` are ignored when role mapping is performed.
	Enabled bool `pulumi:"enabled"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.
	Metadata string `pulumi:"metadata"`
	// The distinct name that identifies the role mapping, used solely as an identifier.
	Name string `pulumi:"name"`
	// A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.
	RoleTemplates string `pulumi:"roleTemplates"`
	// A list of role names that are granted to the users that match the role mapping rules.
	Roles []string `pulumi:"roles"`
	// The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.
	Rules string `pulumi:"rules"`
}

func LookupSecurityRoleMappingOutput(ctx *pulumi.Context, args LookupSecurityRoleMappingOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityRoleMappingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSecurityRoleMappingResult, error) {
			args := v.(LookupSecurityRoleMappingArgs)
			r, err := LookupSecurityRoleMapping(ctx, &args, opts...)
			var s LookupSecurityRoleMappingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSecurityRoleMappingResultOutput)
}

// A collection of arguments for invoking getSecurityRoleMapping.
type LookupSecurityRoleMappingOutputArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection GetSecurityRoleMappingElasticsearchConnectionPtrInput `pulumi:"elasticsearchConnection"`
	// The distinct name that identifies the role mapping, used solely as an identifier.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSecurityRoleMappingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityRoleMappingArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityRoleMapping.
type LookupSecurityRoleMappingResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityRoleMappingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityRoleMappingResult)(nil)).Elem()
}

func (o LookupSecurityRoleMappingResultOutput) ToLookupSecurityRoleMappingResultOutput() LookupSecurityRoleMappingResultOutput {
	return o
}

func (o LookupSecurityRoleMappingResultOutput) ToLookupSecurityRoleMappingResultOutputWithContext(ctx context.Context) LookupSecurityRoleMappingResultOutput {
	return o
}

// Elasticsearch connection configuration block.
func (o LookupSecurityRoleMappingResultOutput) ElasticsearchConnection() GetSecurityRoleMappingElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) *GetSecurityRoleMappingElasticsearchConnection {
		return v.ElasticsearchConnection
	}).(GetSecurityRoleMappingElasticsearchConnectionPtrOutput)
}

// Mappings that have `enabled` set to `false` are ignored when role mapping is performed.
func (o LookupSecurityRoleMappingResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Internal identifier of the resource
func (o LookupSecurityRoleMappingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) string { return v.Id }).(pulumi.StringOutput)
}

// Additional metadata that helps define which roles are assigned to each user. Keys beginning with `_` are reserved for system usage.
func (o LookupSecurityRoleMappingResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// The distinct name that identifies the role mapping, used solely as an identifier.
func (o LookupSecurityRoleMappingResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of mustache templates that will be evaluated to determine the roles names that should granted to the users that match the role mapping rules.
func (o LookupSecurityRoleMappingResultOutput) RoleTemplates() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) string { return v.RoleTemplates }).(pulumi.StringOutput)
}

// A list of role names that are granted to the users that match the role mapping rules.
func (o LookupSecurityRoleMappingResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The rules that determine which users should be matched by the mapping. A rule is a logical condition that is expressed by using a JSON DSL.
func (o LookupSecurityRoleMappingResultOutput) Rules() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleMappingResult) string { return v.Rules }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityRoleMappingResultOutput{})
}
