// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about an existing Elasticsearch role. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		roleSecurityRole, err := elasticstack.LookupSecurityRole(ctx, &elasticstack.LookupSecurityRoleArgs{
// 			Name: "testrole",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("role", roleSecurityRole.Name)
// 		return nil
// 	})
// }
// ```
func LookupSecurityRole(ctx *pulumi.Context, args *LookupSecurityRoleArgs, opts ...pulumi.InvokeOption) (*LookupSecurityRoleResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSecurityRoleResult
	err := ctx.Invoke("elasticstack:index/getSecurityRole:getSecurityRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityRole.
type LookupSecurityRoleArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *GetSecurityRoleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The name of the role.
	Name string `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs []string `pulumi:"runAs"`
}

// A collection of values returned by getSecurityRole.
type LookupSecurityRoleResult struct {
	// A list of application privilege entries.
	Applications []GetSecurityRoleApplication `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters []string `pulumi:"clusters"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *GetSecurityRoleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global string `pulumi:"global"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// A list of indices permissions entries.
	Indices []GetSecurityRoleIndex `pulumi:"indices"`
	// Optional meta-data.
	Metadata string `pulumi:"metadata"`
	// The name of the role.
	Name string `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs []string `pulumi:"runAs"`
}

func LookupSecurityRoleOutput(ctx *pulumi.Context, args LookupSecurityRoleOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSecurityRoleResult, error) {
			args := v.(LookupSecurityRoleArgs)
			r, err := LookupSecurityRole(ctx, &args, opts...)
			var s LookupSecurityRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSecurityRoleResultOutput)
}

// A collection of arguments for invoking getSecurityRole.
type LookupSecurityRoleOutputArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection GetSecurityRoleElasticsearchConnectionPtrInput `pulumi:"elasticsearchConnection"`
	// The name of the role.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayInput `pulumi:"runAs"`
}

func (LookupSecurityRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityRoleArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityRole.
type LookupSecurityRoleResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityRoleResult)(nil)).Elem()
}

func (o LookupSecurityRoleResultOutput) ToLookupSecurityRoleResultOutput() LookupSecurityRoleResultOutput {
	return o
}

func (o LookupSecurityRoleResultOutput) ToLookupSecurityRoleResultOutputWithContext(ctx context.Context) LookupSecurityRoleResultOutput {
	return o
}

// A list of application privilege entries.
func (o LookupSecurityRoleResultOutput) Applications() GetSecurityRoleApplicationArrayOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) []GetSecurityRoleApplication { return v.Applications }).(GetSecurityRoleApplicationArrayOutput)
}

// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
func (o LookupSecurityRoleResultOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) []string { return v.Clusters }).(pulumi.StringArrayOutput)
}

// Elasticsearch connection configuration block.
func (o LookupSecurityRoleResultOutput) ElasticsearchConnection() GetSecurityRoleElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) *GetSecurityRoleElasticsearchConnection {
		return v.ElasticsearchConnection
	}).(GetSecurityRoleElasticsearchConnectionPtrOutput)
}

// An object defining global privileges.
func (o LookupSecurityRoleResultOutput) Global() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) string { return v.Global }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o LookupSecurityRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of indices permissions entries.
func (o LookupSecurityRoleResultOutput) Indices() GetSecurityRoleIndexArrayOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) []GetSecurityRoleIndex { return v.Indices }).(GetSecurityRoleIndexArrayOutput)
}

// Optional meta-data.
func (o LookupSecurityRoleResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// The name of the role.
func (o LookupSecurityRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of users that the owners of this role can impersonate.
func (o LookupSecurityRoleResultOutput) RunAs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityRoleResult) []string { return v.RunAs }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityRoleResultOutput{})
}
