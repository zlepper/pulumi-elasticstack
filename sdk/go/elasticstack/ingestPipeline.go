// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/ingestPipeline:IngestPipeline my_ingest_pipeline <cluster_uuid>/<ingest pipeline name>
// ```
type IngestPipeline struct {
	pulumi.CustomResourceState

	// Description of the ingest pipeline.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection IngestPipelineElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the index template.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// The name of the ingest pipeline.
	Name pulumi.StringOutput `pulumi:"name"`
	// Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
	OnFailures pulumi.StringArrayOutput `pulumi:"onFailures"`
	// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
	Processors pulumi.StringArrayOutput `pulumi:"processors"`
}

// NewIngestPipeline registers a new resource with the given unique name, arguments, and options.
func NewIngestPipeline(ctx *pulumi.Context,
	name string, args *IngestPipelineArgs, opts ...pulumi.ResourceOption) (*IngestPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Processors == nil {
		return nil, errors.New("invalid value for required argument 'Processors'")
	}
	var resource IngestPipeline
	err := ctx.RegisterResource("elasticstack:index/ingestPipeline:IngestPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestPipeline gets an existing IngestPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestPipelineState, opts ...pulumi.ResourceOption) (*IngestPipeline, error) {
	var resource IngestPipeline
	err := ctx.ReadResource("elasticstack:index/ingestPipeline:IngestPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngestPipeline resources.
type ingestPipelineState struct {
	// Description of the ingest pipeline.
	Description *string `pulumi:"description"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *IngestPipelineElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the index template.
	Metadata *string `pulumi:"metadata"`
	// The name of the ingest pipeline.
	Name *string `pulumi:"name"`
	// Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
	OnFailures []string `pulumi:"onFailures"`
	// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
	Processors []string `pulumi:"processors"`
}

type IngestPipelineState struct {
	// Description of the ingest pipeline.
	Description pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection IngestPipelineElasticsearchConnectionPtrInput
	// Optional user metadata about the index template.
	Metadata pulumi.StringPtrInput
	// The name of the ingest pipeline.
	Name pulumi.StringPtrInput
	// Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
	OnFailures pulumi.StringArrayInput
	// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
	Processors pulumi.StringArrayInput
}

func (IngestPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestPipelineState)(nil)).Elem()
}

type ingestPipelineArgs struct {
	// Description of the ingest pipeline.
	Description *string `pulumi:"description"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *IngestPipelineElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the index template.
	Metadata *string `pulumi:"metadata"`
	// The name of the ingest pipeline.
	Name *string `pulumi:"name"`
	// Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
	OnFailures []string `pulumi:"onFailures"`
	// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
	Processors []string `pulumi:"processors"`
}

// The set of arguments for constructing a IngestPipeline resource.
type IngestPipelineArgs struct {
	// Description of the ingest pipeline.
	Description pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection IngestPipelineElasticsearchConnectionPtrInput
	// Optional user metadata about the index template.
	Metadata pulumi.StringPtrInput
	// The name of the ingest pipeline.
	Name pulumi.StringPtrInput
	// Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
	OnFailures pulumi.StringArrayInput
	// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
	Processors pulumi.StringArrayInput
}

func (IngestPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestPipelineArgs)(nil)).Elem()
}

type IngestPipelineInput interface {
	pulumi.Input

	ToIngestPipelineOutput() IngestPipelineOutput
	ToIngestPipelineOutputWithContext(ctx context.Context) IngestPipelineOutput
}

func (*IngestPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestPipeline)(nil)).Elem()
}

func (i *IngestPipeline) ToIngestPipelineOutput() IngestPipelineOutput {
	return i.ToIngestPipelineOutputWithContext(context.Background())
}

func (i *IngestPipeline) ToIngestPipelineOutputWithContext(ctx context.Context) IngestPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestPipelineOutput)
}

// IngestPipelineArrayInput is an input type that accepts IngestPipelineArray and IngestPipelineArrayOutput values.
// You can construct a concrete instance of `IngestPipelineArrayInput` via:
//
//          IngestPipelineArray{ IngestPipelineArgs{...} }
type IngestPipelineArrayInput interface {
	pulumi.Input

	ToIngestPipelineArrayOutput() IngestPipelineArrayOutput
	ToIngestPipelineArrayOutputWithContext(context.Context) IngestPipelineArrayOutput
}

type IngestPipelineArray []IngestPipelineInput

func (IngestPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngestPipeline)(nil)).Elem()
}

func (i IngestPipelineArray) ToIngestPipelineArrayOutput() IngestPipelineArrayOutput {
	return i.ToIngestPipelineArrayOutputWithContext(context.Background())
}

func (i IngestPipelineArray) ToIngestPipelineArrayOutputWithContext(ctx context.Context) IngestPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestPipelineArrayOutput)
}

// IngestPipelineMapInput is an input type that accepts IngestPipelineMap and IngestPipelineMapOutput values.
// You can construct a concrete instance of `IngestPipelineMapInput` via:
//
//          IngestPipelineMap{ "key": IngestPipelineArgs{...} }
type IngestPipelineMapInput interface {
	pulumi.Input

	ToIngestPipelineMapOutput() IngestPipelineMapOutput
	ToIngestPipelineMapOutputWithContext(context.Context) IngestPipelineMapOutput
}

type IngestPipelineMap map[string]IngestPipelineInput

func (IngestPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngestPipeline)(nil)).Elem()
}

func (i IngestPipelineMap) ToIngestPipelineMapOutput() IngestPipelineMapOutput {
	return i.ToIngestPipelineMapOutputWithContext(context.Background())
}

func (i IngestPipelineMap) ToIngestPipelineMapOutputWithContext(ctx context.Context) IngestPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestPipelineMapOutput)
}

type IngestPipelineOutput struct{ *pulumi.OutputState }

func (IngestPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestPipeline)(nil)).Elem()
}

func (o IngestPipelineOutput) ToIngestPipelineOutput() IngestPipelineOutput {
	return o
}

func (o IngestPipelineOutput) ToIngestPipelineOutputWithContext(ctx context.Context) IngestPipelineOutput {
	return o
}

// Description of the ingest pipeline.
func (o IngestPipelineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Elasticsearch connection configuration block.
func (o IngestPipelineOutput) ElasticsearchConnection() IngestPipelineElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *IngestPipeline) IngestPipelineElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(IngestPipelineElasticsearchConnectionPtrOutput)
}

// Optional user metadata about the index template.
func (o IngestPipelineOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// The name of the ingest pipeline.
func (o IngestPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Processors to run immediately after a processor failure. Each processor supports a processor-level `onFailure` value. If a processor without an `onFailure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document
func (o IngestPipelineOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringArrayOutput { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.
func (o IngestPipelineOutput) Processors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringArrayOutput { return v.Processors }).(pulumi.StringArrayOutput)
}

type IngestPipelineArrayOutput struct{ *pulumi.OutputState }

func (IngestPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngestPipeline)(nil)).Elem()
}

func (o IngestPipelineArrayOutput) ToIngestPipelineArrayOutput() IngestPipelineArrayOutput {
	return o
}

func (o IngestPipelineArrayOutput) ToIngestPipelineArrayOutputWithContext(ctx context.Context) IngestPipelineArrayOutput {
	return o
}

func (o IngestPipelineArrayOutput) Index(i pulumi.IntInput) IngestPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IngestPipeline {
		return vs[0].([]*IngestPipeline)[vs[1].(int)]
	}).(IngestPipelineOutput)
}

type IngestPipelineMapOutput struct{ *pulumi.OutputState }

func (IngestPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngestPipeline)(nil)).Elem()
}

func (o IngestPipelineMapOutput) ToIngestPipelineMapOutput() IngestPipelineMapOutput {
	return o
}

func (o IngestPipelineMapOutput) ToIngestPipelineMapOutputWithContext(ctx context.Context) IngestPipelineMapOutput {
	return o
}

func (o IngestPipelineMapOutput) MapIndex(k pulumi.StringInput) IngestPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IngestPipeline {
		return vs[0].(map[string]*IngestPipeline)[vs[1].(string)]
	}).(IngestPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngestPipelineInput)(nil)).Elem(), &IngestPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestPipelineArrayInput)(nil)).Elem(), IngestPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestPipelineMapInput)(nil)).Elem(), IngestPipelineMap{})
	pulumi.RegisterOutputType(IngestPipelineOutput{})
	pulumi.RegisterOutputType(IngestPipelineArrayOutput{})
	pulumi.RegisterOutputType(IngestPipelineMapOutput{})
}
