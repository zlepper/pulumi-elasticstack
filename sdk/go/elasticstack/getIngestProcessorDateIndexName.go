// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The purpose of this processor is to point documents to the right time based index based on a date or timestamp field in a document by using the date math index name support.
//
// The processor sets the _index metadata field with a date math index name expression based on the provided index name prefix, a date or timestamp field in the documents being processed and the provided date rounding.
//
// First, this processor fetches the date or timestamp from a field in the document being processed. Optionally, date formatting can be configured on how the fieldâ€™s value should be parsed into a date. Then this date, the provided index name prefix and the provided date rounding get formatted into a date math index name expression. Also here optionally date formatting can be specified on how the date should be formatted into a date math index name expression.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/date-index-name-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		dateIndexName, err := elasticstack.GetIngestProcessorDateIndexName(ctx, &elasticstack.GetIngestProcessorDateIndexNameArgs{
// 			Description:     pulumi.StringRef("monthly date-time index naming"),
// 			Field:           "date1",
// 			IndexNamePrefix: pulumi.StringRef("my-index-"),
// 			DateRounding:    "M",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIngestPipeline(ctx, "myIngestPipeline", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(dateIndexName.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetIngestProcessorDateIndexName(ctx *pulumi.Context, args *GetIngestProcessorDateIndexNameArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorDateIndexNameResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetIngestProcessorDateIndexNameResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorDateIndexName:getIngestProcessorDateIndexName", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorDateIndexName.
type GetIngestProcessorDateIndexNameArgs struct {
	// An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.
	DateFormats []string `pulumi:"dateFormats"`
	// How to round the date when formatting the date into the index name.
	DateRounding string `pulumi:"dateRounding"`
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The field to get the date or timestamp from.
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// The format to be used when printing the parsed date into the index name.
	IndexNameFormat *string `pulumi:"indexNameFormat"`
	// A prefix of the index name to be prepended before the printed date.
	IndexNamePrefix *string `pulumi:"indexNamePrefix"`
	// The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.
	Locale *string `pulumi:"locale"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.
	Timezone *string `pulumi:"timezone"`
}

// A collection of values returned by getIngestProcessorDateIndexName.
type GetIngestProcessorDateIndexNameResult struct {
	// An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.
	DateFormats []string `pulumi:"dateFormats"`
	// How to round the date when formatting the date into the index name.
	DateRounding string `pulumi:"dateRounding"`
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The field to get the date or timestamp from.
	Field string `pulumi:"field"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// The format to be used when printing the parsed date into the index name.
	IndexNameFormat *string `pulumi:"indexNameFormat"`
	// A prefix of the index name to be prepended before the printed date.
	IndexNamePrefix *string `pulumi:"indexNamePrefix"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.
	Locale *string `pulumi:"locale"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.
	Timezone *string `pulumi:"timezone"`
}

func GetIngestProcessorDateIndexNameOutput(ctx *pulumi.Context, args GetIngestProcessorDateIndexNameOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorDateIndexNameResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorDateIndexNameResult, error) {
			args := v.(GetIngestProcessorDateIndexNameArgs)
			r, err := GetIngestProcessorDateIndexName(ctx, &args, opts...)
			var s GetIngestProcessorDateIndexNameResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorDateIndexNameResultOutput)
}

// A collection of arguments for invoking getIngestProcessorDateIndexName.
type GetIngestProcessorDateIndexNameOutputArgs struct {
	// An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.
	DateFormats pulumi.StringArrayInput `pulumi:"dateFormats"`
	// How to round the date when formatting the date into the index name.
	DateRounding pulumi.StringInput `pulumi:"dateRounding"`
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The field to get the date or timestamp from.
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// The format to be used when printing the parsed date into the index name.
	IndexNameFormat pulumi.StringPtrInput `pulumi:"indexNameFormat"`
	// A prefix of the index name to be prepended before the printed date.
	IndexNamePrefix pulumi.StringPtrInput `pulumi:"indexNamePrefix"`
	// The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.
	Locale pulumi.StringPtrInput `pulumi:"locale"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (GetIngestProcessorDateIndexNameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorDateIndexNameArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorDateIndexName.
type GetIngestProcessorDateIndexNameResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorDateIndexNameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorDateIndexNameResult)(nil)).Elem()
}

func (o GetIngestProcessorDateIndexNameResultOutput) ToGetIngestProcessorDateIndexNameResultOutput() GetIngestProcessorDateIndexNameResultOutput {
	return o
}

func (o GetIngestProcessorDateIndexNameResultOutput) ToGetIngestProcessorDateIndexNameResultOutputWithContext(ctx context.Context) GetIngestProcessorDateIndexNameResultOutput {
	return o
}

// An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.
func (o GetIngestProcessorDateIndexNameResultOutput) DateFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) []string { return v.DateFormats }).(pulumi.StringArrayOutput)
}

// How to round the date when formatting the date into the index name.
func (o GetIngestProcessorDateIndexNameResultOutput) DateRounding() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) string { return v.DateRounding }).(pulumi.StringOutput)
}

// Description of the processor.
func (o GetIngestProcessorDateIndexNameResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The field to get the date or timestamp from.
func (o GetIngestProcessorDateIndexNameResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o GetIngestProcessorDateIndexNameResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o GetIngestProcessorDateIndexNameResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o GetIngestProcessorDateIndexNameResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// The format to be used when printing the parsed date into the index name.
func (o GetIngestProcessorDateIndexNameResultOutput) IndexNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.IndexNameFormat }).(pulumi.StringPtrOutput)
}

// A prefix of the index name to be prepended before the printed date.
func (o GetIngestProcessorDateIndexNameResultOutput) IndexNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.IndexNamePrefix }).(pulumi.StringPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorDateIndexNameResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) string { return v.Json }).(pulumi.StringOutput)
}

// The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.
func (o GetIngestProcessorDateIndexNameResultOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.Locale }).(pulumi.StringPtrOutput)
}

// Handle failures for the processor.
func (o GetIngestProcessorDateIndexNameResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Identifier for the processor.
func (o GetIngestProcessorDateIndexNameResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.
func (o GetIngestProcessorDateIndexNameResultOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorDateIndexNameResult) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorDateIndexNameResultOutput{})
}
