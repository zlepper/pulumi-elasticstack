// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := elasticstack.NewSecuritySystemUser(ctx, "kibanaSystem", &elasticstack.SecuritySystemUserArgs{
// 			ElasticsearchConnection: &elasticstack.SecuritySystemUserElasticsearchConnectionArgs{
// 				Endpoints: pulumi.StringArray{
// 					pulumi.String("http://localhost:9200"),
// 				},
// 				Password: pulumi.String("changeme"),
// 				Username: pulumi.String("elastic"),
// 			},
// 			PasswordHash: pulumi.String(fmt.Sprintf("$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO")),
// 			Username:     pulumi.String("kibana_system"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SecuritySystemUser struct {
	pulumi.CustomResourceState

	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecuritySystemUserElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrOutput `pulumi:"passwordHash"`
	// An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSecuritySystemUser registers a new resource with the given unique name, arguments, and options.
func NewSecuritySystemUser(ctx *pulumi.Context,
	name string, args *SecuritySystemUserArgs, opts ...pulumi.ResourceOption) (*SecuritySystemUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PasswordHash != nil {
		args.PasswordHash = pulumi.ToSecret(args.PasswordHash).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"passwordHash",
	})
	opts = append(opts, secrets)
	var resource SecuritySystemUser
	err := ctx.RegisterResource("elasticstack:index/securitySystemUser:SecuritySystemUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecuritySystemUser gets an existing SecuritySystemUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecuritySystemUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecuritySystemUserState, opts ...pulumi.ResourceOption) (*SecuritySystemUser, error) {
	var resource SecuritySystemUser
	err := ctx.ReadResource("elasticstack:index/securitySystemUser:SecuritySystemUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecuritySystemUser resources.
type securitySystemUserState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecuritySystemUserElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password *string `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash *string `pulumi:"passwordHash"`
	// An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
	Username *string `pulumi:"username"`
}

type SecuritySystemUserState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecuritySystemUserElasticsearchConnectionPtrInput
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrInput
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrInput
	// An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
	Username pulumi.StringPtrInput
}

func (SecuritySystemUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*securitySystemUserState)(nil)).Elem()
}

type securitySystemUserArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *SecuritySystemUserElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password *string `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash *string `pulumi:"passwordHash"`
	// An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SecuritySystemUser resource.
type SecuritySystemUserArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection SecuritySystemUserElasticsearchConnectionPtrInput
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrInput
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrInput
	// An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
	Username pulumi.StringInput
}

func (SecuritySystemUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securitySystemUserArgs)(nil)).Elem()
}

type SecuritySystemUserInput interface {
	pulumi.Input

	ToSecuritySystemUserOutput() SecuritySystemUserOutput
	ToSecuritySystemUserOutputWithContext(ctx context.Context) SecuritySystemUserOutput
}

func (*SecuritySystemUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySystemUser)(nil)).Elem()
}

func (i *SecuritySystemUser) ToSecuritySystemUserOutput() SecuritySystemUserOutput {
	return i.ToSecuritySystemUserOutputWithContext(context.Background())
}

func (i *SecuritySystemUser) ToSecuritySystemUserOutputWithContext(ctx context.Context) SecuritySystemUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySystemUserOutput)
}

// SecuritySystemUserArrayInput is an input type that accepts SecuritySystemUserArray and SecuritySystemUserArrayOutput values.
// You can construct a concrete instance of `SecuritySystemUserArrayInput` via:
//
//          SecuritySystemUserArray{ SecuritySystemUserArgs{...} }
type SecuritySystemUserArrayInput interface {
	pulumi.Input

	ToSecuritySystemUserArrayOutput() SecuritySystemUserArrayOutput
	ToSecuritySystemUserArrayOutputWithContext(context.Context) SecuritySystemUserArrayOutput
}

type SecuritySystemUserArray []SecuritySystemUserInput

func (SecuritySystemUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecuritySystemUser)(nil)).Elem()
}

func (i SecuritySystemUserArray) ToSecuritySystemUserArrayOutput() SecuritySystemUserArrayOutput {
	return i.ToSecuritySystemUserArrayOutputWithContext(context.Background())
}

func (i SecuritySystemUserArray) ToSecuritySystemUserArrayOutputWithContext(ctx context.Context) SecuritySystemUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySystemUserArrayOutput)
}

// SecuritySystemUserMapInput is an input type that accepts SecuritySystemUserMap and SecuritySystemUserMapOutput values.
// You can construct a concrete instance of `SecuritySystemUserMapInput` via:
//
//          SecuritySystemUserMap{ "key": SecuritySystemUserArgs{...} }
type SecuritySystemUserMapInput interface {
	pulumi.Input

	ToSecuritySystemUserMapOutput() SecuritySystemUserMapOutput
	ToSecuritySystemUserMapOutputWithContext(context.Context) SecuritySystemUserMapOutput
}

type SecuritySystemUserMap map[string]SecuritySystemUserInput

func (SecuritySystemUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecuritySystemUser)(nil)).Elem()
}

func (i SecuritySystemUserMap) ToSecuritySystemUserMapOutput() SecuritySystemUserMapOutput {
	return i.ToSecuritySystemUserMapOutputWithContext(context.Background())
}

func (i SecuritySystemUserMap) ToSecuritySystemUserMapOutputWithContext(ctx context.Context) SecuritySystemUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySystemUserMapOutput)
}

type SecuritySystemUserOutput struct{ *pulumi.OutputState }

func (SecuritySystemUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySystemUser)(nil)).Elem()
}

func (o SecuritySystemUserOutput) ToSecuritySystemUserOutput() SecuritySystemUserOutput {
	return o
}

func (o SecuritySystemUserOutput) ToSecuritySystemUserOutputWithContext(ctx context.Context) SecuritySystemUserOutput {
	return o
}

// Elasticsearch connection configuration block.
func (o SecuritySystemUserOutput) ElasticsearchConnection() SecuritySystemUserElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *SecuritySystemUser) SecuritySystemUserElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(SecuritySystemUserElasticsearchConnectionPtrOutput)
}

// Specifies whether the user is enabled. The default value is true.
func (o SecuritySystemUserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecuritySystemUser) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The user’s password. Passwords must be at least 6 characters long.
func (o SecuritySystemUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecuritySystemUser) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
func (o SecuritySystemUserOutput) PasswordHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecuritySystemUser) pulumi.StringPtrOutput { return v.PasswordHash }).(pulumi.StringPtrOutput)
}

// An identifier for the system user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
func (o SecuritySystemUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SecuritySystemUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type SecuritySystemUserArrayOutput struct{ *pulumi.OutputState }

func (SecuritySystemUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecuritySystemUser)(nil)).Elem()
}

func (o SecuritySystemUserArrayOutput) ToSecuritySystemUserArrayOutput() SecuritySystemUserArrayOutput {
	return o
}

func (o SecuritySystemUserArrayOutput) ToSecuritySystemUserArrayOutputWithContext(ctx context.Context) SecuritySystemUserArrayOutput {
	return o
}

func (o SecuritySystemUserArrayOutput) Index(i pulumi.IntInput) SecuritySystemUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecuritySystemUser {
		return vs[0].([]*SecuritySystemUser)[vs[1].(int)]
	}).(SecuritySystemUserOutput)
}

type SecuritySystemUserMapOutput struct{ *pulumi.OutputState }

func (SecuritySystemUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecuritySystemUser)(nil)).Elem()
}

func (o SecuritySystemUserMapOutput) ToSecuritySystemUserMapOutput() SecuritySystemUserMapOutput {
	return o
}

func (o SecuritySystemUserMapOutput) ToSecuritySystemUserMapOutputWithContext(ctx context.Context) SecuritySystemUserMapOutput {
	return o
}

func (o SecuritySystemUserMapOutput) MapIndex(k pulumi.StringInput) SecuritySystemUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecuritySystemUser {
		return vs[0].(map[string]*SecuritySystemUser)[vs[1].(string)]
	}).(SecuritySystemUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritySystemUserInput)(nil)).Elem(), &SecuritySystemUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritySystemUserArrayInput)(nil)).Elem(), SecuritySystemUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritySystemUserMapInput)(nil)).Elem(), SecuritySystemUserMap{})
	pulumi.RegisterOutputType(SecuritySystemUserOutput{})
	pulumi.RegisterOutputType(SecuritySystemUserArrayOutput{})
	pulumi.RegisterOutputType(SecuritySystemUserMapOutput{})
}
