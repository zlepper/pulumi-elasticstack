// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html
//
// ## Import
//
// You can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too You can later adjust the index configuration to account for those imported settings
//
// ```sh
//  $ pulumi import elasticstack:index/index:Index my_index <cluster_uuid>/<index_name>
// ```
type Index struct {
	pulumi.CustomResourceState

	// Aliases for the index.
	Aliases IndexAliasArrayOutput `pulumi:"aliases"`
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer pulumi.StringPtrOutput `pulumi:"analysisAnalyzer"`
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter pulumi.StringPtrOutput `pulumi:"analysisCharFilter"`
	// A JSON string describing the filters applied to the index.
	AnalysisFilter pulumi.StringPtrOutput `pulumi:"analysisFilter"`
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer pulumi.StringPtrOutput `pulumi:"analysisNormalizer"`
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer pulumi.StringPtrOutput `pulumi:"analysisTokenizer"`
	// The maximum number of tokens that can be produced using _analyze API.
	AnalyzeMaxTokenCount pulumi.IntPtrOutput `pulumi:"analyzeMaxTokenCount"`
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas pulumi.StringPtrOutput `pulumi:"autoExpandReplicas"`
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata pulumi.BoolPtrOutput `pulumi:"blocksMetadata"`
	// Set to `true` to disable read operations against the index.
	BlocksRead pulumi.BoolPtrOutput `pulumi:"blocksRead"`
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly pulumi.BoolPtrOutput `pulumi:"blocksReadOnly"`
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete pulumi.BoolPtrOutput `pulumi:"blocksReadOnlyAllowDelete"`
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite pulumi.BoolPtrOutput `pulumi:"blocksWrite"`
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec pulumi.StringPtrOutput `pulumi:"codec"`
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline pulumi.StringPtrOutput `pulumi:"defaultPipeline"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection IndexElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
	FinalPipeline pulumi.StringPtrOutput `pulumi:"finalPipeline"`
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes pulumi.StringPtrOutput `pulumi:"gcDeletes"`
	// The maximum number of characters that will be analyzed for a highlight request.
	HighlightMaxAnalyzedOffset pulumi.IntPtrOutput `pulumi:"highlightMaxAnalyzedOffset"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel pulumi.StringPtrOutput `pulumi:"indexingSlowlogLevel"`
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource pulumi.StringPtrOutput `pulumi:"indexingSlowlogSource"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexDebug"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexInfo"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexTrace"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexWarn"`
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly pulumi.BoolPtrOutput `pulumi:"loadFixedBitsetFiltersEagerly"`
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings pulumi.StringPtrOutput `pulumi:"mappings"`
	// The maximum number of `docvalueFields` that are allowed in a query.
	MaxDocvalueFieldsSearch pulumi.IntPtrOutput `pulumi:"maxDocvalueFieldsSearch"`
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
	MaxInnerResultWindow pulumi.IntPtrOutput `pulumi:"maxInnerResultWindow"`
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
	MaxNgramDiff pulumi.IntPtrOutput `pulumi:"maxNgramDiff"`
	// Maximum number of refresh listeners available on each shard of the index.
	MaxRefreshListeners pulumi.IntPtrOutput `pulumi:"maxRefreshListeners"`
	// The maximum length of regex that can be used in Regexp Query.
	MaxRegexLength pulumi.IntPtrOutput `pulumi:"maxRegexLength"`
	// The maximum value of `windowSize` for `rescore` requests in searches of this index.
	MaxRescoreWindow pulumi.IntPtrOutput `pulumi:"maxRescoreWindow"`
	// The maximum value of `from + size` for searches to this index.
	MaxResultWindow pulumi.IntPtrOutput `pulumi:"maxResultWindow"`
	// The maximum number of `scriptFields` that are allowed in a query.
	MaxScriptFields pulumi.IntPtrOutput `pulumi:"maxScriptFields"`
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
	MaxShingleDiff pulumi.IntPtrOutput `pulumi:"maxShingleDiff"`
	// The maximum number of terms that can be used in Terms Query.
	MaxTermsCount pulumi.IntPtrOutput `pulumi:"maxTermsCount"`
	// Name of the index you wish to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of shard replicas.
	NumberOfReplicas pulumi.IntOutput `pulumi:"numberOfReplicas"`
	// Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
	NumberOfRoutingShards pulumi.IntPtrOutput `pulumi:"numberOfRoutingShards"`
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards pulumi.IntPtrOutput `pulumi:"numberOfShards"`
	// Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
	QueryDefaultFields pulumi.StringArrayOutput `pulumi:"queryDefaultFields"`
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval pulumi.StringPtrOutput `pulumi:"refreshInterval"`
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable pulumi.StringPtrOutput `pulumi:"routingAllocationEnable"`
	// The number of shards a custom routing value can go to. This can be set only on creation.
	RoutingPartitionSize pulumi.IntPtrOutput `pulumi:"routingPartitionSize"`
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable pulumi.StringPtrOutput `pulumi:"routingRebalanceEnable"`
	// How long a shard can not receive a search or get request until itâ€™s considered search idle.
	SearchIdleAfter pulumi.StringPtrOutput `pulumi:"searchIdleAfter"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel pulumi.StringPtrOutput `pulumi:"searchSlowlogLevel"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchWarn"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryWarn"`
	// DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	//
	// Deprecated: Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
	Settings IndexSettingsPtrOutput `pulumi:"settings"`
	// All raw settings fetched from the cluster.
	SettingsRaw pulumi.StringOutput `pulumi:"settingsRaw"`
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup pulumi.StringPtrOutput `pulumi:"shardCheckOnStartup"`
	// The field to sort shards in this index by.
	SortFields pulumi.StringArrayOutput `pulumi:"sortFields"`
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrders pulumi.StringArrayOutput `pulumi:"sortOrders"`
	// Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
	UnassignedNodeLeftDelayedTimeout pulumi.StringPtrOutput `pulumi:"unassignedNodeLeftDelayedTimeout"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		args = &IndexArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("elasticstack:index/index:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("elasticstack:index/index:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
	// Aliases for the index.
	Aliases []IndexAlias `pulumi:"aliases"`
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer *string `pulumi:"analysisAnalyzer"`
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter *string `pulumi:"analysisCharFilter"`
	// A JSON string describing the filters applied to the index.
	AnalysisFilter *string `pulumi:"analysisFilter"`
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer *string `pulumi:"analysisNormalizer"`
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer *string `pulumi:"analysisTokenizer"`
	// The maximum number of tokens that can be produced using _analyze API.
	AnalyzeMaxTokenCount *int `pulumi:"analyzeMaxTokenCount"`
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas *string `pulumi:"autoExpandReplicas"`
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata *bool `pulumi:"blocksMetadata"`
	// Set to `true` to disable read operations against the index.
	BlocksRead *bool `pulumi:"blocksRead"`
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly *bool `pulumi:"blocksReadOnly"`
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete *bool `pulumi:"blocksReadOnlyAllowDelete"`
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite *bool `pulumi:"blocksWrite"`
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec *string `pulumi:"codec"`
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline *string `pulumi:"defaultPipeline"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *IndexElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
	FinalPipeline *string `pulumi:"finalPipeline"`
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes *string `pulumi:"gcDeletes"`
	// The maximum number of characters that will be analyzed for a highlight request.
	HighlightMaxAnalyzedOffset *int `pulumi:"highlightMaxAnalyzedOffset"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel *string `pulumi:"indexingSlowlogLevel"`
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource *string `pulumi:"indexingSlowlogSource"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug *string `pulumi:"indexingSlowlogThresholdIndexDebug"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo *string `pulumi:"indexingSlowlogThresholdIndexInfo"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace *string `pulumi:"indexingSlowlogThresholdIndexTrace"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn *string `pulumi:"indexingSlowlogThresholdIndexWarn"`
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly *bool `pulumi:"loadFixedBitsetFiltersEagerly"`
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings *string `pulumi:"mappings"`
	// The maximum number of `docvalueFields` that are allowed in a query.
	MaxDocvalueFieldsSearch *int `pulumi:"maxDocvalueFieldsSearch"`
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
	MaxInnerResultWindow *int `pulumi:"maxInnerResultWindow"`
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
	MaxNgramDiff *int `pulumi:"maxNgramDiff"`
	// Maximum number of refresh listeners available on each shard of the index.
	MaxRefreshListeners *int `pulumi:"maxRefreshListeners"`
	// The maximum length of regex that can be used in Regexp Query.
	MaxRegexLength *int `pulumi:"maxRegexLength"`
	// The maximum value of `windowSize` for `rescore` requests in searches of this index.
	MaxRescoreWindow *int `pulumi:"maxRescoreWindow"`
	// The maximum value of `from + size` for searches to this index.
	MaxResultWindow *int `pulumi:"maxResultWindow"`
	// The maximum number of `scriptFields` that are allowed in a query.
	MaxScriptFields *int `pulumi:"maxScriptFields"`
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
	MaxShingleDiff *int `pulumi:"maxShingleDiff"`
	// The maximum number of terms that can be used in Terms Query.
	MaxTermsCount *int `pulumi:"maxTermsCount"`
	// Name of the index you wish to create.
	Name *string `pulumi:"name"`
	// Number of shard replicas.
	NumberOfReplicas *int `pulumi:"numberOfReplicas"`
	// Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
	NumberOfRoutingShards *int `pulumi:"numberOfRoutingShards"`
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards *int `pulumi:"numberOfShards"`
	// Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
	QueryDefaultFields []string `pulumi:"queryDefaultFields"`
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable *string `pulumi:"routingAllocationEnable"`
	// The number of shards a custom routing value can go to. This can be set only on creation.
	RoutingPartitionSize *int `pulumi:"routingPartitionSize"`
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable *string `pulumi:"routingRebalanceEnable"`
	// How long a shard can not receive a search or get request until itâ€™s considered search idle.
	SearchIdleAfter *string `pulumi:"searchIdleAfter"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel *string `pulumi:"searchSlowlogLevel"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug *string `pulumi:"searchSlowlogThresholdFetchDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo *string `pulumi:"searchSlowlogThresholdFetchInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace *string `pulumi:"searchSlowlogThresholdFetchTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn *string `pulumi:"searchSlowlogThresholdFetchWarn"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug *string `pulumi:"searchSlowlogThresholdQueryDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo *string `pulumi:"searchSlowlogThresholdQueryInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace *string `pulumi:"searchSlowlogThresholdQueryTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn *string `pulumi:"searchSlowlogThresholdQueryWarn"`
	// DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	//
	// Deprecated: Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
	Settings *IndexSettings `pulumi:"settings"`
	// All raw settings fetched from the cluster.
	SettingsRaw *string `pulumi:"settingsRaw"`
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup *string `pulumi:"shardCheckOnStartup"`
	// The field to sort shards in this index by.
	SortFields []string `pulumi:"sortFields"`
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrders []string `pulumi:"sortOrders"`
	// Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
	UnassignedNodeLeftDelayedTimeout *string `pulumi:"unassignedNodeLeftDelayedTimeout"`
}

type IndexState struct {
	// Aliases for the index.
	Aliases IndexAliasArrayInput
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer pulumi.StringPtrInput
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter pulumi.StringPtrInput
	// A JSON string describing the filters applied to the index.
	AnalysisFilter pulumi.StringPtrInput
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer pulumi.StringPtrInput
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer pulumi.StringPtrInput
	// The maximum number of tokens that can be produced using _analyze API.
	AnalyzeMaxTokenCount pulumi.IntPtrInput
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas pulumi.StringPtrInput
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata pulumi.BoolPtrInput
	// Set to `true` to disable read operations against the index.
	BlocksRead pulumi.BoolPtrInput
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly pulumi.BoolPtrInput
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete pulumi.BoolPtrInput
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite pulumi.BoolPtrInput
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec pulumi.StringPtrInput
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection IndexElasticsearchConnectionPtrInput
	// Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
	FinalPipeline pulumi.StringPtrInput
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes pulumi.StringPtrInput
	// The maximum number of characters that will be analyzed for a highlight request.
	HighlightMaxAnalyzedOffset pulumi.IntPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel pulumi.StringPtrInput
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn pulumi.StringPtrInput
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly pulumi.BoolPtrInput
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings pulumi.StringPtrInput
	// The maximum number of `docvalueFields` that are allowed in a query.
	MaxDocvalueFieldsSearch pulumi.IntPtrInput
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
	MaxInnerResultWindow pulumi.IntPtrInput
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
	MaxNgramDiff pulumi.IntPtrInput
	// Maximum number of refresh listeners available on each shard of the index.
	MaxRefreshListeners pulumi.IntPtrInput
	// The maximum length of regex that can be used in Regexp Query.
	MaxRegexLength pulumi.IntPtrInput
	// The maximum value of `windowSize` for `rescore` requests in searches of this index.
	MaxRescoreWindow pulumi.IntPtrInput
	// The maximum value of `from + size` for searches to this index.
	MaxResultWindow pulumi.IntPtrInput
	// The maximum number of `scriptFields` that are allowed in a query.
	MaxScriptFields pulumi.IntPtrInput
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
	MaxShingleDiff pulumi.IntPtrInput
	// The maximum number of terms that can be used in Terms Query.
	MaxTermsCount pulumi.IntPtrInput
	// Name of the index you wish to create.
	Name pulumi.StringPtrInput
	// Number of shard replicas.
	NumberOfReplicas pulumi.IntPtrInput
	// Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
	NumberOfRoutingShards pulumi.IntPtrInput
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards pulumi.IntPtrInput
	// Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
	QueryDefaultFields pulumi.StringArrayInput
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval pulumi.StringPtrInput
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable pulumi.StringPtrInput
	// The number of shards a custom routing value can go to. This can be set only on creation.
	RoutingPartitionSize pulumi.IntPtrInput
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable pulumi.StringPtrInput
	// How long a shard can not receive a search or get request until itâ€™s considered search idle.
	SearchIdleAfter pulumi.StringPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn pulumi.StringPtrInput
	// DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	//
	// Deprecated: Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
	Settings IndexSettingsPtrInput
	// All raw settings fetched from the cluster.
	SettingsRaw pulumi.StringPtrInput
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup pulumi.StringPtrInput
	// The field to sort shards in this index by.
	SortFields pulumi.StringArrayInput
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrders pulumi.StringArrayInput
	// Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
	UnassignedNodeLeftDelayedTimeout pulumi.StringPtrInput
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// Aliases for the index.
	Aliases []IndexAlias `pulumi:"aliases"`
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer *string `pulumi:"analysisAnalyzer"`
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter *string `pulumi:"analysisCharFilter"`
	// A JSON string describing the filters applied to the index.
	AnalysisFilter *string `pulumi:"analysisFilter"`
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer *string `pulumi:"analysisNormalizer"`
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer *string `pulumi:"analysisTokenizer"`
	// The maximum number of tokens that can be produced using _analyze API.
	AnalyzeMaxTokenCount *int `pulumi:"analyzeMaxTokenCount"`
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas *string `pulumi:"autoExpandReplicas"`
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata *bool `pulumi:"blocksMetadata"`
	// Set to `true` to disable read operations against the index.
	BlocksRead *bool `pulumi:"blocksRead"`
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly *bool `pulumi:"blocksReadOnly"`
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete *bool `pulumi:"blocksReadOnlyAllowDelete"`
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite *bool `pulumi:"blocksWrite"`
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec *string `pulumi:"codec"`
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline *string `pulumi:"defaultPipeline"`
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *IndexElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
	FinalPipeline *string `pulumi:"finalPipeline"`
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes *string `pulumi:"gcDeletes"`
	// The maximum number of characters that will be analyzed for a highlight request.
	HighlightMaxAnalyzedOffset *int `pulumi:"highlightMaxAnalyzedOffset"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel *string `pulumi:"indexingSlowlogLevel"`
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource *string `pulumi:"indexingSlowlogSource"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug *string `pulumi:"indexingSlowlogThresholdIndexDebug"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo *string `pulumi:"indexingSlowlogThresholdIndexInfo"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace *string `pulumi:"indexingSlowlogThresholdIndexTrace"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn *string `pulumi:"indexingSlowlogThresholdIndexWarn"`
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly *bool `pulumi:"loadFixedBitsetFiltersEagerly"`
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings *string `pulumi:"mappings"`
	// The maximum number of `docvalueFields` that are allowed in a query.
	MaxDocvalueFieldsSearch *int `pulumi:"maxDocvalueFieldsSearch"`
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
	MaxInnerResultWindow *int `pulumi:"maxInnerResultWindow"`
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
	MaxNgramDiff *int `pulumi:"maxNgramDiff"`
	// Maximum number of refresh listeners available on each shard of the index.
	MaxRefreshListeners *int `pulumi:"maxRefreshListeners"`
	// The maximum length of regex that can be used in Regexp Query.
	MaxRegexLength *int `pulumi:"maxRegexLength"`
	// The maximum value of `windowSize` for `rescore` requests in searches of this index.
	MaxRescoreWindow *int `pulumi:"maxRescoreWindow"`
	// The maximum value of `from + size` for searches to this index.
	MaxResultWindow *int `pulumi:"maxResultWindow"`
	// The maximum number of `scriptFields` that are allowed in a query.
	MaxScriptFields *int `pulumi:"maxScriptFields"`
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
	MaxShingleDiff *int `pulumi:"maxShingleDiff"`
	// The maximum number of terms that can be used in Terms Query.
	MaxTermsCount *int `pulumi:"maxTermsCount"`
	// Name of the index you wish to create.
	Name *string `pulumi:"name"`
	// Number of shard replicas.
	NumberOfReplicas *int `pulumi:"numberOfReplicas"`
	// Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
	NumberOfRoutingShards *int `pulumi:"numberOfRoutingShards"`
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards *int `pulumi:"numberOfShards"`
	// Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
	QueryDefaultFields []string `pulumi:"queryDefaultFields"`
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable *string `pulumi:"routingAllocationEnable"`
	// The number of shards a custom routing value can go to. This can be set only on creation.
	RoutingPartitionSize *int `pulumi:"routingPartitionSize"`
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable *string `pulumi:"routingRebalanceEnable"`
	// How long a shard can not receive a search or get request until itâ€™s considered search idle.
	SearchIdleAfter *string `pulumi:"searchIdleAfter"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel *string `pulumi:"searchSlowlogLevel"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug *string `pulumi:"searchSlowlogThresholdFetchDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo *string `pulumi:"searchSlowlogThresholdFetchInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace *string `pulumi:"searchSlowlogThresholdFetchTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn *string `pulumi:"searchSlowlogThresholdFetchWarn"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug *string `pulumi:"searchSlowlogThresholdQueryDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo *string `pulumi:"searchSlowlogThresholdQueryInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace *string `pulumi:"searchSlowlogThresholdQueryTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn *string `pulumi:"searchSlowlogThresholdQueryWarn"`
	// DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	//
	// Deprecated: Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
	Settings *IndexSettings `pulumi:"settings"`
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup *string `pulumi:"shardCheckOnStartup"`
	// The field to sort shards in this index by.
	SortFields []string `pulumi:"sortFields"`
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrders []string `pulumi:"sortOrders"`
	// Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
	UnassignedNodeLeftDelayedTimeout *string `pulumi:"unassignedNodeLeftDelayedTimeout"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// Aliases for the index.
	Aliases IndexAliasArrayInput
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer pulumi.StringPtrInput
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter pulumi.StringPtrInput
	// A JSON string describing the filters applied to the index.
	AnalysisFilter pulumi.StringPtrInput
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer pulumi.StringPtrInput
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer pulumi.StringPtrInput
	// The maximum number of tokens that can be produced using _analyze API.
	AnalyzeMaxTokenCount pulumi.IntPtrInput
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas pulumi.StringPtrInput
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata pulumi.BoolPtrInput
	// Set to `true` to disable read operations against the index.
	BlocksRead pulumi.BoolPtrInput
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly pulumi.BoolPtrInput
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete pulumi.BoolPtrInput
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite pulumi.BoolPtrInput
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec pulumi.StringPtrInput
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline pulumi.StringPtrInput
	// Elasticsearch connection configuration block.
	ElasticsearchConnection IndexElasticsearchConnectionPtrInput
	// Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
	FinalPipeline pulumi.StringPtrInput
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes pulumi.StringPtrInput
	// The maximum number of characters that will be analyzed for a highlight request.
	HighlightMaxAnalyzedOffset pulumi.IntPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel pulumi.StringPtrInput
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn pulumi.StringPtrInput
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly pulumi.BoolPtrInput
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings pulumi.StringPtrInput
	// The maximum number of `docvalueFields` that are allowed in a query.
	MaxDocvalueFieldsSearch pulumi.IntPtrInput
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
	MaxInnerResultWindow pulumi.IntPtrInput
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
	MaxNgramDiff pulumi.IntPtrInput
	// Maximum number of refresh listeners available on each shard of the index.
	MaxRefreshListeners pulumi.IntPtrInput
	// The maximum length of regex that can be used in Regexp Query.
	MaxRegexLength pulumi.IntPtrInput
	// The maximum value of `windowSize` for `rescore` requests in searches of this index.
	MaxRescoreWindow pulumi.IntPtrInput
	// The maximum value of `from + size` for searches to this index.
	MaxResultWindow pulumi.IntPtrInput
	// The maximum number of `scriptFields` that are allowed in a query.
	MaxScriptFields pulumi.IntPtrInput
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
	MaxShingleDiff pulumi.IntPtrInput
	// The maximum number of terms that can be used in Terms Query.
	MaxTermsCount pulumi.IntPtrInput
	// Name of the index you wish to create.
	Name pulumi.StringPtrInput
	// Number of shard replicas.
	NumberOfReplicas pulumi.IntPtrInput
	// Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
	NumberOfRoutingShards pulumi.IntPtrInput
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards pulumi.IntPtrInput
	// Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
	QueryDefaultFields pulumi.StringArrayInput
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval pulumi.StringPtrInput
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable pulumi.StringPtrInput
	// The number of shards a custom routing value can go to. This can be set only on creation.
	RoutingPartitionSize pulumi.IntPtrInput
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable pulumi.StringPtrInput
	// How long a shard can not receive a search or get request until itâ€™s considered search idle.
	SearchIdleAfter pulumi.StringPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn pulumi.StringPtrInput
	// DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	//
	// Deprecated: Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
	Settings IndexSettingsPtrInput
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup pulumi.StringPtrInput
	// The field to sort shards in this index by.
	SortFields pulumi.StringArrayInput
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrders pulumi.StringArrayInput
	// Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
	UnassignedNodeLeftDelayedTimeout pulumi.StringPtrInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//          IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//          IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// Aliases for the index.
func (o IndexOutput) Aliases() IndexAliasArrayOutput {
	return o.ApplyT(func(v *Index) IndexAliasArrayOutput { return v.Aliases }).(IndexAliasArrayOutput)
}

// A JSON string describing the analyzers applied to the index.
func (o IndexOutput) AnalysisAnalyzer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisAnalyzer }).(pulumi.StringPtrOutput)
}

// A JSON string describing the charFilters applied to the index.
func (o IndexOutput) AnalysisCharFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisCharFilter }).(pulumi.StringPtrOutput)
}

// A JSON string describing the filters applied to the index.
func (o IndexOutput) AnalysisFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisFilter }).(pulumi.StringPtrOutput)
}

// A JSON string describing the normalizers applied to the index.
func (o IndexOutput) AnalysisNormalizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisNormalizer }).(pulumi.StringPtrOutput)
}

// A JSON string describing the tokenizers applied to the index.
func (o IndexOutput) AnalysisTokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisTokenizer }).(pulumi.StringPtrOutput)
}

// The maximum number of tokens that can be produced using _analyze API.
func (o IndexOutput) AnalyzeMaxTokenCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.AnalyzeMaxTokenCount }).(pulumi.IntPtrOutput)
}

// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
func (o IndexOutput) AutoExpandReplicas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AutoExpandReplicas }).(pulumi.StringPtrOutput)
}

// Set to `true` to disable index metadata reads and writes.
func (o IndexOutput) BlocksMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksMetadata }).(pulumi.BoolPtrOutput)
}

// Set to `true` to disable read operations against the index.
func (o IndexOutput) BlocksRead() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksRead }).(pulumi.BoolPtrOutput)
}

// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
func (o IndexOutput) BlocksReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksReadOnly }).(pulumi.BoolPtrOutput)
}

// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
func (o IndexOutput) BlocksReadOnlyAllowDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksReadOnlyAllowDelete }).(pulumi.BoolPtrOutput)
}

// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
func (o IndexOutput) BlocksWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksWrite }).(pulumi.BoolPtrOutput)
}

// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
func (o IndexOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.Codec }).(pulumi.StringPtrOutput)
}

// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
func (o IndexOutput) DefaultPipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.DefaultPipeline }).(pulumi.StringPtrOutput)
}

// Elasticsearch connection configuration block.
func (o IndexOutput) ElasticsearchConnection() IndexElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *Index) IndexElasticsearchConnectionPtrOutput { return v.ElasticsearchConnection }).(IndexElasticsearchConnectionPtrOutput)
}

// Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist. The final pipeline always runs after the request pipeline (if specified) and the default pipeline (if it exists). The special pipeline name _none indicates no ingest pipeline will run.
func (o IndexOutput) FinalPipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.FinalPipeline }).(pulumi.StringPtrOutput)
}

// The length of time that a deleted document's version number remains available for further versioned operations.
func (o IndexOutput) GcDeletes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.GcDeletes }).(pulumi.StringPtrOutput)
}

// The maximum number of characters that will be analyzed for a highlight request.
func (o IndexOutput) HighlightMaxAnalyzedOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.HighlightMaxAnalyzedOffset }).(pulumi.IntPtrOutput)
}

// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
func (o IndexOutput) IndexingSlowlogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogLevel }).(pulumi.StringPtrOutput)
}

// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
func (o IndexOutput) IndexingSlowlogSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogSource }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
func (o IndexOutput) IndexingSlowlogThresholdIndexDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexDebug }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
func (o IndexOutput) IndexingSlowlogThresholdIndexInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexInfo }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
func (o IndexOutput) IndexingSlowlogThresholdIndexTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexTrace }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
func (o IndexOutput) IndexingSlowlogThresholdIndexWarn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexWarn }).(pulumi.StringPtrOutput)
}

// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
func (o IndexOutput) LoadFixedBitsetFiltersEagerly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.LoadFixedBitsetFiltersEagerly }).(pulumi.BoolPtrOutput)
}

// Mapping for fields in the index.
// If specified, this mapping can include: field names, [field data types](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), [mapping parameters](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
func (o IndexOutput) Mappings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.Mappings }).(pulumi.StringPtrOutput)
}

// The maximum number of `docvalueFields` that are allowed in a query.
func (o IndexOutput) MaxDocvalueFieldsSearch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxDocvalueFieldsSearch }).(pulumi.IntPtrOutput)
}

// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index.
func (o IndexOutput) MaxInnerResultWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxInnerResultWindow }).(pulumi.IntPtrOutput)
}

// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter.
func (o IndexOutput) MaxNgramDiff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxNgramDiff }).(pulumi.IntPtrOutput)
}

// Maximum number of refresh listeners available on each shard of the index.
func (o IndexOutput) MaxRefreshListeners() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxRefreshListeners }).(pulumi.IntPtrOutput)
}

// The maximum length of regex that can be used in Regexp Query.
func (o IndexOutput) MaxRegexLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxRegexLength }).(pulumi.IntPtrOutput)
}

// The maximum value of `windowSize` for `rescore` requests in searches of this index.
func (o IndexOutput) MaxRescoreWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxRescoreWindow }).(pulumi.IntPtrOutput)
}

// The maximum value of `from + size` for searches to this index.
func (o IndexOutput) MaxResultWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxResultWindow }).(pulumi.IntPtrOutput)
}

// The maximum number of `scriptFields` that are allowed in a query.
func (o IndexOutput) MaxScriptFields() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxScriptFields }).(pulumi.IntPtrOutput)
}

// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter.
func (o IndexOutput) MaxShingleDiff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxShingleDiff }).(pulumi.IntPtrOutput)
}

// The maximum number of terms that can be used in Terms Query.
func (o IndexOutput) MaxTermsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MaxTermsCount }).(pulumi.IntPtrOutput)
}

// Name of the index you wish to create.
func (o IndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of shard replicas.
func (o IndexOutput) NumberOfReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v *Index) pulumi.IntOutput { return v.NumberOfReplicas }).(pulumi.IntOutput)
}

// Value used with number*of*shards to route documents to a primary shard. This can be set only on creation.
func (o IndexOutput) NumberOfRoutingShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.NumberOfRoutingShards }).(pulumi.IntPtrOutput)
}

// Number of shards for the index. This can be set only on creation.
func (o IndexOutput) NumberOfShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.NumberOfShards }).(pulumi.IntPtrOutput)
}

// Wildcard (*) patterns matching one or more fields. Defaults to '*', which matches all fields eligible for term-level queries, excluding metadata fields.
func (o IndexOutput) QueryDefaultFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Index) pulumi.StringArrayOutput { return v.QueryDefaultFields }).(pulumi.StringArrayOutput)
}

// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
func (o IndexOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
func (o IndexOutput) RoutingAllocationEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RoutingAllocationEnable }).(pulumi.StringPtrOutput)
}

// The number of shards a custom routing value can go to. This can be set only on creation.
func (o IndexOutput) RoutingPartitionSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.RoutingPartitionSize }).(pulumi.IntPtrOutput)
}

// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
func (o IndexOutput) RoutingRebalanceEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RoutingRebalanceEnable }).(pulumi.StringPtrOutput)
}

// How long a shard can not receive a search or get request until itâ€™s considered search idle.
func (o IndexOutput) SearchIdleAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchIdleAfter }).(pulumi.StringPtrOutput)
}

// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
func (o IndexOutput) SearchSlowlogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogLevel }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
func (o IndexOutput) SearchSlowlogThresholdFetchDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchDebug }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
func (o IndexOutput) SearchSlowlogThresholdFetchInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchInfo }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
func (o IndexOutput) SearchSlowlogThresholdFetchTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchTrace }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
func (o IndexOutput) SearchSlowlogThresholdFetchWarn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchWarn }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
func (o IndexOutput) SearchSlowlogThresholdQueryDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryDebug }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
func (o IndexOutput) SearchSlowlogThresholdQueryInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryInfo }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
func (o IndexOutput) SearchSlowlogThresholdQueryTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryTrace }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
func (o IndexOutput) SearchSlowlogThresholdQueryWarn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryWarn }).(pulumi.StringPtrOutput)
}

// DEPRECATED: Please use dedicated setting field. Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
//
// Deprecated: Using settings makes it easier to misconfigure.  Use dedicated field for the each setting instead.
func (o IndexOutput) Settings() IndexSettingsPtrOutput {
	return o.ApplyT(func(v *Index) IndexSettingsPtrOutput { return v.Settings }).(IndexSettingsPtrOutput)
}

// All raw settings fetched from the cluster.
func (o IndexOutput) SettingsRaw() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.SettingsRaw }).(pulumi.StringOutput)
}

// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
func (o IndexOutput) ShardCheckOnStartup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.ShardCheckOnStartup }).(pulumi.StringPtrOutput)
}

// The field to sort shards in this index by.
func (o IndexOutput) SortFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Index) pulumi.StringArrayOutput { return v.SortFields }).(pulumi.StringArrayOutput)
}

// The direction to sort shards in. Accepts `asc`, `desc`.
func (o IndexOutput) SortOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Index) pulumi.StringArrayOutput { return v.SortOrders }).(pulumi.StringArrayOutput)
}

// Time to delay the allocation of replica shards which become unassigned because a node has left, in time units, e.g. `10s`
func (o IndexOutput) UnassignedNodeLeftDelayedTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.UnassignedNodeLeftDelayedTimeout }).(pulumi.StringPtrOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
