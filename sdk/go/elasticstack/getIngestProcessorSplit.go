// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Splits a field into an array using a separator character. Only works on string fields.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/split-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		split, err := elasticstack.GetIngestProcessorSplit(ctx, &elasticstack.GetIngestProcessorSplitArgs{
// 			Field:     "my_field",
// 			Separator: "\\s+",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIngestPipeline(ctx, "myIngestPipeline", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(split.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetIngestProcessorSplit(ctx *pulumi.Context, args *GetIngestProcessorSplitArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorSplitResult, error) {
	var rv GetIngestProcessorSplitResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorSplit:getIngestProcessorSplit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorSplit.
type GetIngestProcessorSplitArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The field to split
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Preserves empty trailing fields, if any.
	PreserveTrailing *bool `pulumi:"preserveTrailing"`
	// A regex which matches the separator, eg `,` or `\s+`
	Separator string `pulumi:"separator"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place.
	TargetField *string `pulumi:"targetField"`
}

// A collection of values returned by getIngestProcessorSplit.
type GetIngestProcessorSplitResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The field to split
	Field string `pulumi:"field"`
	// Internal identifier of the resource.
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Preserves empty trailing fields, if any.
	PreserveTrailing *bool `pulumi:"preserveTrailing"`
	// A regex which matches the separator, eg `,` or `\s+`
	Separator string `pulumi:"separator"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place.
	TargetField *string `pulumi:"targetField"`
}

func GetIngestProcessorSplitOutput(ctx *pulumi.Context, args GetIngestProcessorSplitOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorSplitResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorSplitResult, error) {
			args := v.(GetIngestProcessorSplitArgs)
			r, err := GetIngestProcessorSplit(ctx, &args, opts...)
			var s GetIngestProcessorSplitResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorSplitResultOutput)
}

// A collection of arguments for invoking getIngestProcessorSplit.
type GetIngestProcessorSplitOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The field to split
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Preserves empty trailing fields, if any.
	PreserveTrailing pulumi.BoolPtrInput `pulumi:"preserveTrailing"`
	// A regex which matches the separator, eg `,` or `\s+`
	Separator pulumi.StringInput `pulumi:"separator"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place.
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
}

func (GetIngestProcessorSplitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorSplitArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorSplit.
type GetIngestProcessorSplitResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorSplitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorSplitResult)(nil)).Elem()
}

func (o GetIngestProcessorSplitResultOutput) ToGetIngestProcessorSplitResultOutput() GetIngestProcessorSplitResultOutput {
	return o
}

func (o GetIngestProcessorSplitResultOutput) ToGetIngestProcessorSplitResultOutputWithContext(ctx context.Context) GetIngestProcessorSplitResultOutput {
	return o
}

// Description of the processor.
func (o GetIngestProcessorSplitResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The field to split
func (o GetIngestProcessorSplitResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource.
func (o GetIngestProcessorSplitResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o GetIngestProcessorSplitResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o GetIngestProcessorSplitResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
func (o GetIngestProcessorSplitResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorSplitResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o GetIngestProcessorSplitResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Preserves empty trailing fields, if any.
func (o GetIngestProcessorSplitResultOutput) PreserveTrailing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *bool { return v.PreserveTrailing }).(pulumi.BoolPtrOutput)
}

// A regex which matches the separator, eg `,` or `\s+`
func (o GetIngestProcessorSplitResultOutput) Separator() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) string { return v.Separator }).(pulumi.StringOutput)
}

// Identifier for the processor.
func (o GetIngestProcessorSplitResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The field to assign the converted value to, by default `field` is updated in-place.
func (o GetIngestProcessorSplitResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorSplitResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorSplitResultOutput{})
}
