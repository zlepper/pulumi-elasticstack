// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates a component template. Component templates are building blocks for constructing index templates that specify index mappings, settings, and aliases. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"number_of_shards": "3",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		myTemplateComponentTemplate, err := elasticstack.NewComponentTemplate(ctx, "myTemplateComponentTemplate", &elasticstack.ComponentTemplateArgs{
// 			Template: &elasticstack.ComponentTemplateTemplateArgs{
// 				Aliases: elasticstack.ComponentTemplateTemplateAliasArray{
// 					&elasticstack.ComponentTemplateTemplateAliasArgs{
// 						Name: pulumi.String("my_template_test"),
// 					},
// 				},
// 				Settings: pulumi.String(json0),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIndexTemplate(ctx, "myTemplateIndexTemplate", &elasticstack.IndexTemplateArgs{
// 			IndexPatterns: pulumi.StringArray{
// 				pulumi.String("stream*"),
// 			},
// 			ComposedOfs: pulumi.StringArray{
// 				myTemplateComponentTemplate.Name,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/componentTemplate:ComponentTemplate my_template <cluster_uuid>/<component_name>
// ```
type ComponentTemplate struct {
	pulumi.CustomResourceState

	// Elasticsearch connection configuration block.
	ElasticsearchConnection ComponentTemplateElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the component template.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// Name of the component template to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ComponentTemplateTemplateOutput `pulumi:"template"`
	// Version number used to manage component templates externally.
	Version pulumi.IntPtrOutput `pulumi:"version"`
}

// NewComponentTemplate registers a new resource with the given unique name, arguments, and options.
func NewComponentTemplate(ctx *pulumi.Context,
	name string, args *ComponentTemplateArgs, opts ...pulumi.ResourceOption) (*ComponentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	var resource ComponentTemplate
	err := ctx.RegisterResource("elasticstack:index/componentTemplate:ComponentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponentTemplate gets an existing ComponentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentTemplateState, opts ...pulumi.ResourceOption) (*ComponentTemplate, error) {
	var resource ComponentTemplate
	err := ctx.ReadResource("elasticstack:index/componentTemplate:ComponentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComponentTemplate resources.
type componentTemplateState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ComponentTemplateElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the component template.
	Metadata *string `pulumi:"metadata"`
	// Name of the component template to create.
	Name *string `pulumi:"name"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template *ComponentTemplateTemplate `pulumi:"template"`
	// Version number used to manage component templates externally.
	Version *int `pulumi:"version"`
}

type ComponentTemplateState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ComponentTemplateElasticsearchConnectionPtrInput
	// Optional user metadata about the component template.
	Metadata pulumi.StringPtrInput
	// Name of the component template to create.
	Name pulumi.StringPtrInput
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ComponentTemplateTemplatePtrInput
	// Version number used to manage component templates externally.
	Version pulumi.IntPtrInput
}

func (ComponentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentTemplateState)(nil)).Elem()
}

type componentTemplateArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ComponentTemplateElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the component template.
	Metadata *string `pulumi:"metadata"`
	// Name of the component template to create.
	Name *string `pulumi:"name"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ComponentTemplateTemplate `pulumi:"template"`
	// Version number used to manage component templates externally.
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a ComponentTemplate resource.
type ComponentTemplateArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ComponentTemplateElasticsearchConnectionPtrInput
	// Optional user metadata about the component template.
	Metadata pulumi.StringPtrInput
	// Name of the component template to create.
	Name pulumi.StringPtrInput
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ComponentTemplateTemplateInput
	// Version number used to manage component templates externally.
	Version pulumi.IntPtrInput
}

func (ComponentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentTemplateArgs)(nil)).Elem()
}

type ComponentTemplateInput interface {
	pulumi.Input

	ToComponentTemplateOutput() ComponentTemplateOutput
	ToComponentTemplateOutputWithContext(ctx context.Context) ComponentTemplateOutput
}

func (*ComponentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTemplate)(nil)).Elem()
}

func (i *ComponentTemplate) ToComponentTemplateOutput() ComponentTemplateOutput {
	return i.ToComponentTemplateOutputWithContext(context.Background())
}

func (i *ComponentTemplate) ToComponentTemplateOutputWithContext(ctx context.Context) ComponentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTemplateOutput)
}

// ComponentTemplateArrayInput is an input type that accepts ComponentTemplateArray and ComponentTemplateArrayOutput values.
// You can construct a concrete instance of `ComponentTemplateArrayInput` via:
//
//          ComponentTemplateArray{ ComponentTemplateArgs{...} }
type ComponentTemplateArrayInput interface {
	pulumi.Input

	ToComponentTemplateArrayOutput() ComponentTemplateArrayOutput
	ToComponentTemplateArrayOutputWithContext(context.Context) ComponentTemplateArrayOutput
}

type ComponentTemplateArray []ComponentTemplateInput

func (ComponentTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentTemplate)(nil)).Elem()
}

func (i ComponentTemplateArray) ToComponentTemplateArrayOutput() ComponentTemplateArrayOutput {
	return i.ToComponentTemplateArrayOutputWithContext(context.Background())
}

func (i ComponentTemplateArray) ToComponentTemplateArrayOutputWithContext(ctx context.Context) ComponentTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTemplateArrayOutput)
}

// ComponentTemplateMapInput is an input type that accepts ComponentTemplateMap and ComponentTemplateMapOutput values.
// You can construct a concrete instance of `ComponentTemplateMapInput` via:
//
//          ComponentTemplateMap{ "key": ComponentTemplateArgs{...} }
type ComponentTemplateMapInput interface {
	pulumi.Input

	ToComponentTemplateMapOutput() ComponentTemplateMapOutput
	ToComponentTemplateMapOutputWithContext(context.Context) ComponentTemplateMapOutput
}

type ComponentTemplateMap map[string]ComponentTemplateInput

func (ComponentTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentTemplate)(nil)).Elem()
}

func (i ComponentTemplateMap) ToComponentTemplateMapOutput() ComponentTemplateMapOutput {
	return i.ToComponentTemplateMapOutputWithContext(context.Background())
}

func (i ComponentTemplateMap) ToComponentTemplateMapOutputWithContext(ctx context.Context) ComponentTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTemplateMapOutput)
}

type ComponentTemplateOutput struct{ *pulumi.OutputState }

func (ComponentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTemplate)(nil)).Elem()
}

func (o ComponentTemplateOutput) ToComponentTemplateOutput() ComponentTemplateOutput {
	return o
}

func (o ComponentTemplateOutput) ToComponentTemplateOutputWithContext(ctx context.Context) ComponentTemplateOutput {
	return o
}

// Elasticsearch connection configuration block.
func (o ComponentTemplateOutput) ElasticsearchConnection() ComponentTemplateElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *ComponentTemplate) ComponentTemplateElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(ComponentTemplateElasticsearchConnectionPtrOutput)
}

// Optional user metadata about the component template.
func (o ComponentTemplateOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTemplate) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Name of the component template to create.
func (o ComponentTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
func (o ComponentTemplateOutput) Template() ComponentTemplateTemplateOutput {
	return o.ApplyT(func(v *ComponentTemplate) ComponentTemplateTemplateOutput { return v.Template }).(ComponentTemplateTemplateOutput)
}

// Version number used to manage component templates externally.
func (o ComponentTemplateOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComponentTemplate) pulumi.IntPtrOutput { return v.Version }).(pulumi.IntPtrOutput)
}

type ComponentTemplateArrayOutput struct{ *pulumi.OutputState }

func (ComponentTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentTemplate)(nil)).Elem()
}

func (o ComponentTemplateArrayOutput) ToComponentTemplateArrayOutput() ComponentTemplateArrayOutput {
	return o
}

func (o ComponentTemplateArrayOutput) ToComponentTemplateArrayOutputWithContext(ctx context.Context) ComponentTemplateArrayOutput {
	return o
}

func (o ComponentTemplateArrayOutput) Index(i pulumi.IntInput) ComponentTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComponentTemplate {
		return vs[0].([]*ComponentTemplate)[vs[1].(int)]
	}).(ComponentTemplateOutput)
}

type ComponentTemplateMapOutput struct{ *pulumi.OutputState }

func (ComponentTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentTemplate)(nil)).Elem()
}

func (o ComponentTemplateMapOutput) ToComponentTemplateMapOutput() ComponentTemplateMapOutput {
	return o
}

func (o ComponentTemplateMapOutput) ToComponentTemplateMapOutputWithContext(ctx context.Context) ComponentTemplateMapOutput {
	return o
}

func (o ComponentTemplateMapOutput) MapIndex(k pulumi.StringInput) ComponentTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComponentTemplate {
		return vs[0].(map[string]*ComponentTemplate)[vs[1].(string)]
	}).(ComponentTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTemplateInput)(nil)).Elem(), &ComponentTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTemplateArrayInput)(nil)).Elem(), ComponentTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTemplateMapInput)(nil)).Elem(), ComponentTemplateMap{})
	pulumi.RegisterOutputType(ComponentTemplateOutput{})
	pulumi.RegisterOutputType(ComponentTemplateArrayOutput{})
	pulumi.RegisterOutputType(ComponentTemplateMapOutput{})
}
