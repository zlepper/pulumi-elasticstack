// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Helper data source to which can be used to extract fields from CSV line out of a single text field within a document. Any empty field in CSV will be skipped.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/csv-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		csv, err := elasticstack.GetIngestProcessorCsv(ctx, &elasticstack.GetIngestProcessorCsvArgs{
// 			Field: "my_field",
// 			TargetFields: []string{
// 				"field1",
// 				"field2",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIngestPipeline(ctx, "myIngestPipeline", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(csv.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// If the `trim` option is enabled then any whitespace in the beginning and in the end of each unquoted field will be trimmed. For example with configuration above, a value of A, B will result in field field2 having value {nbsp}B (with space at the beginning). If trim is enabled A, B will result in field field2 having value B (no whitespace). Quoted fields will be left untouched.
func GetIngestProcessorCsv(ctx *pulumi.Context, args *GetIngestProcessorCsvArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorCsvResult, error) {
	var rv GetIngestProcessorCsvResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorCsv:getIngestProcessorCsv", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorCsv.
type GetIngestProcessorCsvArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Value used to fill empty fields, empty fields will be skipped if this is not provided.
	EmptyValue *string `pulumi:"emptyValue"`
	// The field to extract data from.
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Quote used in CSV, has to be single character string
	Quote *string `pulumi:"quote"`
	// Separator used in CSV, has to be single character string.
	Separator *string `pulumi:"separator"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The array of fields to assign extracted values to.
	TargetFields []string `pulumi:"targetFields"`
	// Trim whitespaces in unquoted fields.
	Trim *bool `pulumi:"trim"`
}

// A collection of values returned by getIngestProcessorCsv.
type GetIngestProcessorCsvResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Value used to fill empty fields, empty fields will be skipped if this is not provided.
	EmptyValue *string `pulumi:"emptyValue"`
	// The field to extract data from.
	Field string `pulumi:"field"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Quote used in CSV, has to be single character string
	Quote *string `pulumi:"quote"`
	// Separator used in CSV, has to be single character string.
	Separator *string `pulumi:"separator"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The array of fields to assign extracted values to.
	TargetFields []string `pulumi:"targetFields"`
	// Trim whitespaces in unquoted fields.
	Trim *bool `pulumi:"trim"`
}

func GetIngestProcessorCsvOutput(ctx *pulumi.Context, args GetIngestProcessorCsvOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorCsvResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorCsvResult, error) {
			args := v.(GetIngestProcessorCsvArgs)
			r, err := GetIngestProcessorCsv(ctx, &args, opts...)
			var s GetIngestProcessorCsvResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorCsvResultOutput)
}

// A collection of arguments for invoking getIngestProcessorCsv.
type GetIngestProcessorCsvOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Value used to fill empty fields, empty fields will be skipped if this is not provided.
	EmptyValue pulumi.StringPtrInput `pulumi:"emptyValue"`
	// The field to extract data from.
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Quote used in CSV, has to be single character string
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// Separator used in CSV, has to be single character string.
	Separator pulumi.StringPtrInput `pulumi:"separator"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The array of fields to assign extracted values to.
	TargetFields pulumi.StringArrayInput `pulumi:"targetFields"`
	// Trim whitespaces in unquoted fields.
	Trim pulumi.BoolPtrInput `pulumi:"trim"`
}

func (GetIngestProcessorCsvOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorCsvArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorCsv.
type GetIngestProcessorCsvResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorCsvResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorCsvResult)(nil)).Elem()
}

func (o GetIngestProcessorCsvResultOutput) ToGetIngestProcessorCsvResultOutput() GetIngestProcessorCsvResultOutput {
	return o
}

func (o GetIngestProcessorCsvResultOutput) ToGetIngestProcessorCsvResultOutputWithContext(ctx context.Context) GetIngestProcessorCsvResultOutput {
	return o
}

// Description of the processor.
func (o GetIngestProcessorCsvResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Value used to fill empty fields, empty fields will be skipped if this is not provided.
func (o GetIngestProcessorCsvResultOutput) EmptyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *string { return v.EmptyValue }).(pulumi.StringPtrOutput)
}

// The field to extract data from.
func (o GetIngestProcessorCsvResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o GetIngestProcessorCsvResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o GetIngestProcessorCsvResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o GetIngestProcessorCsvResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
func (o GetIngestProcessorCsvResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorCsvResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o GetIngestProcessorCsvResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Quote used in CSV, has to be single character string
func (o GetIngestProcessorCsvResultOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// Separator used in CSV, has to be single character string.
func (o GetIngestProcessorCsvResultOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

// Identifier for the processor.
func (o GetIngestProcessorCsvResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The array of fields to assign extracted values to.
func (o GetIngestProcessorCsvResultOutput) TargetFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) []string { return v.TargetFields }).(pulumi.StringArrayOutput)
}

// Trim whitespaces in unquoted fields.
func (o GetIngestProcessorCsvResultOutput) Trim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorCsvResult) *bool { return v.Trim }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorCsvResultOutput{})
}
