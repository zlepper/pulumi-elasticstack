// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
type ClusterSettings struct {
	pulumi.CustomResourceState

	// Elasticsearch connection configuration block.
	ElasticsearchConnection ClusterSettingsElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Settings will apply across restarts.
	Persistent ClusterSettingsPersistentPtrOutput `pulumi:"persistent"`
	// Settings do not survive a full cluster restart.
	Transient ClusterSettingsTransientPtrOutput `pulumi:"transient"`
}

// NewClusterSettings registers a new resource with the given unique name, arguments, and options.
func NewClusterSettings(ctx *pulumi.Context,
	name string, args *ClusterSettingsArgs, opts ...pulumi.ResourceOption) (*ClusterSettings, error) {
	if args == nil {
		args = &ClusterSettingsArgs{}
	}

	var resource ClusterSettings
	err := ctx.RegisterResource("elasticstack:index/clusterSettings:ClusterSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSettings gets an existing ClusterSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSettingsState, opts ...pulumi.ResourceOption) (*ClusterSettings, error) {
	var resource ClusterSettings
	err := ctx.ReadResource("elasticstack:index/clusterSettings:ClusterSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSettings resources.
type clusterSettingsState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ClusterSettingsElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Settings will apply across restarts.
	Persistent *ClusterSettingsPersistent `pulumi:"persistent"`
	// Settings do not survive a full cluster restart.
	Transient *ClusterSettingsTransient `pulumi:"transient"`
}

type ClusterSettingsState struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ClusterSettingsElasticsearchConnectionPtrInput
	// Settings will apply across restarts.
	Persistent ClusterSettingsPersistentPtrInput
	// Settings do not survive a full cluster restart.
	Transient ClusterSettingsTransientPtrInput
}

func (ClusterSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSettingsState)(nil)).Elem()
}

type clusterSettingsArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection *ClusterSettingsElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Settings will apply across restarts.
	Persistent *ClusterSettingsPersistent `pulumi:"persistent"`
	// Settings do not survive a full cluster restart.
	Transient *ClusterSettingsTransient `pulumi:"transient"`
}

// The set of arguments for constructing a ClusterSettings resource.
type ClusterSettingsArgs struct {
	// Elasticsearch connection configuration block.
	ElasticsearchConnection ClusterSettingsElasticsearchConnectionPtrInput
	// Settings will apply across restarts.
	Persistent ClusterSettingsPersistentPtrInput
	// Settings do not survive a full cluster restart.
	Transient ClusterSettingsTransientPtrInput
}

func (ClusterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSettingsArgs)(nil)).Elem()
}

type ClusterSettingsInput interface {
	pulumi.Input

	ToClusterSettingsOutput() ClusterSettingsOutput
	ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput
}

func (*ClusterSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSettings)(nil)).Elem()
}

func (i *ClusterSettings) ToClusterSettingsOutput() ClusterSettingsOutput {
	return i.ToClusterSettingsOutputWithContext(context.Background())
}

func (i *ClusterSettings) ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsOutput)
}

// ClusterSettingsArrayInput is an input type that accepts ClusterSettingsArray and ClusterSettingsArrayOutput values.
// You can construct a concrete instance of `ClusterSettingsArrayInput` via:
//
//          ClusterSettingsArray{ ClusterSettingsArgs{...} }
type ClusterSettingsArrayInput interface {
	pulumi.Input

	ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput
	ToClusterSettingsArrayOutputWithContext(context.Context) ClusterSettingsArrayOutput
}

type ClusterSettingsArray []ClusterSettingsInput

func (ClusterSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSettings)(nil)).Elem()
}

func (i ClusterSettingsArray) ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput {
	return i.ToClusterSettingsArrayOutputWithContext(context.Background())
}

func (i ClusterSettingsArray) ToClusterSettingsArrayOutputWithContext(ctx context.Context) ClusterSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsArrayOutput)
}

// ClusterSettingsMapInput is an input type that accepts ClusterSettingsMap and ClusterSettingsMapOutput values.
// You can construct a concrete instance of `ClusterSettingsMapInput` via:
//
//          ClusterSettingsMap{ "key": ClusterSettingsArgs{...} }
type ClusterSettingsMapInput interface {
	pulumi.Input

	ToClusterSettingsMapOutput() ClusterSettingsMapOutput
	ToClusterSettingsMapOutputWithContext(context.Context) ClusterSettingsMapOutput
}

type ClusterSettingsMap map[string]ClusterSettingsInput

func (ClusterSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSettings)(nil)).Elem()
}

func (i ClusterSettingsMap) ToClusterSettingsMapOutput() ClusterSettingsMapOutput {
	return i.ToClusterSettingsMapOutputWithContext(context.Background())
}

func (i ClusterSettingsMap) ToClusterSettingsMapOutputWithContext(ctx context.Context) ClusterSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsMapOutput)
}

type ClusterSettingsOutput struct{ *pulumi.OutputState }

func (ClusterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsOutput) ToClusterSettingsOutput() ClusterSettingsOutput {
	return o
}

func (o ClusterSettingsOutput) ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput {
	return o
}

// Elasticsearch connection configuration block.
func (o ClusterSettingsOutput) ElasticsearchConnection() ClusterSettingsElasticsearchConnectionPtrOutput {
	return o.ApplyT(func(v *ClusterSettings) ClusterSettingsElasticsearchConnectionPtrOutput {
		return v.ElasticsearchConnection
	}).(ClusterSettingsElasticsearchConnectionPtrOutput)
}

// Settings will apply across restarts.
func (o ClusterSettingsOutput) Persistent() ClusterSettingsPersistentPtrOutput {
	return o.ApplyT(func(v *ClusterSettings) ClusterSettingsPersistentPtrOutput { return v.Persistent }).(ClusterSettingsPersistentPtrOutput)
}

// Settings do not survive a full cluster restart.
func (o ClusterSettingsOutput) Transient() ClusterSettingsTransientPtrOutput {
	return o.ApplyT(func(v *ClusterSettings) ClusterSettingsTransientPtrOutput { return v.Transient }).(ClusterSettingsTransientPtrOutput)
}

type ClusterSettingsArrayOutput struct{ *pulumi.OutputState }

func (ClusterSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsArrayOutput) ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput {
	return o
}

func (o ClusterSettingsArrayOutput) ToClusterSettingsArrayOutputWithContext(ctx context.Context) ClusterSettingsArrayOutput {
	return o
}

func (o ClusterSettingsArrayOutput) Index(i pulumi.IntInput) ClusterSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterSettings {
		return vs[0].([]*ClusterSettings)[vs[1].(int)]
	}).(ClusterSettingsOutput)
}

type ClusterSettingsMapOutput struct{ *pulumi.OutputState }

func (ClusterSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsMapOutput) ToClusterSettingsMapOutput() ClusterSettingsMapOutput {
	return o
}

func (o ClusterSettingsMapOutput) ToClusterSettingsMapOutputWithContext(ctx context.Context) ClusterSettingsMapOutput {
	return o
}

func (o ClusterSettingsMapOutput) MapIndex(k pulumi.StringInput) ClusterSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterSettings {
		return vs[0].(map[string]*ClusterSettings)[vs[1].(string)]
	}).(ClusterSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsInput)(nil)).Elem(), &ClusterSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsArrayInput)(nil)).Elem(), ClusterSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsMapInput)(nil)).Elem(), ClusterSettingsMap{})
	pulumi.RegisterOutputType(ClusterSettingsOutput{})
	pulumi.RegisterOutputType(ClusterSettingsArrayOutput{})
	pulumi.RegisterOutputType(ClusterSettingsMapOutput{})
}
