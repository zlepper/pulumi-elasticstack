// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Helper data source to which can be used to convert a field in the currently ingested document to a different type, such as converting a string to an integer. If the field value is an array, all members will be converted.
//
// The supported types include: `integer`, `long`, `float`, `double`, `string`, `boolean`, `ip`, and `auto`.
//
// Specifying `boolean` will set the field to true if its string value is equal to true (ignore case), to false if its string value is equal to false (ignore case), or it will throw an exception otherwise.
//
// Specifying `ip` will set the target field to the value of `field` if it contains a valid IPv4 or IPv6 address that can be indexed into an IP field type.
//
// Specifying `auto` will attempt to convert the string-valued `field` into the closest non-string, non-IP type. For example, a field whose value is "true" will be converted to its respective boolean type: true. Do note that float takes precedence of double in auto. A value of "242.15" will "automatically" be converted to 242.15 of type `float`. If a provided field cannot be appropriately converted, the processor will still process successfully and leave the field value as-is. In such a case, `targetField` will be updated with the unconverted field value.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/convert-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		convert, err := elasticstack.GetIngestProcessorConvert(ctx, &elasticstack.GetIngestProcessorConvertArgs{
// 			Description: pulumi.StringRef("converts the content of the id field to an integer"),
// 			Field:       "id",
// 			Type:        "integer",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIngestPipeline(ctx, "myIngestPipeline", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(convert.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetIngestProcessorConvert(ctx *pulumi.Context, args *GetIngestProcessorConvertArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorConvertResult, error) {
	var rv GetIngestProcessorConvertResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorConvert:getIngestProcessorConvert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorConvert.
type GetIngestProcessorConvertArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The field whose value is to be converted.
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to.
	TargetField *string `pulumi:"targetField"`
	// The type to convert the existing value to
	Type string `pulumi:"type"`
}

// A collection of values returned by getIngestProcessorConvert.
type GetIngestProcessorConvertResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The field whose value is to be converted.
	Field string `pulumi:"field"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to.
	TargetField *string `pulumi:"targetField"`
	// The type to convert the existing value to
	Type string `pulumi:"type"`
}

func GetIngestProcessorConvertOutput(ctx *pulumi.Context, args GetIngestProcessorConvertOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorConvertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorConvertResult, error) {
			args := v.(GetIngestProcessorConvertArgs)
			r, err := GetIngestProcessorConvert(ctx, &args, opts...)
			var s GetIngestProcessorConvertResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorConvertResultOutput)
}

// A collection of arguments for invoking getIngestProcessorConvert.
type GetIngestProcessorConvertOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The field whose value is to be converted.
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The field to assign the converted value to.
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
	// The type to convert the existing value to
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetIngestProcessorConvertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorConvertArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorConvert.
type GetIngestProcessorConvertResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorConvertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorConvertResult)(nil)).Elem()
}

func (o GetIngestProcessorConvertResultOutput) ToGetIngestProcessorConvertResultOutput() GetIngestProcessorConvertResultOutput {
	return o
}

func (o GetIngestProcessorConvertResultOutput) ToGetIngestProcessorConvertResultOutputWithContext(ctx context.Context) GetIngestProcessorConvertResultOutput {
	return o
}

// Description of the processor.
func (o GetIngestProcessorConvertResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The field whose value is to be converted.
func (o GetIngestProcessorConvertResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o GetIngestProcessorConvertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o GetIngestProcessorConvertResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o GetIngestProcessorConvertResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
func (o GetIngestProcessorConvertResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorConvertResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o GetIngestProcessorConvertResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Identifier for the processor.
func (o GetIngestProcessorConvertResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The field to assign the converted value to.
func (o GetIngestProcessorConvertResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

// The type to convert the existing value to
func (o GetIngestProcessorConvertResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorConvertResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorConvertResultOutput{})
}
