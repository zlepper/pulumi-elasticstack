// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Extracts structured fields out of a single text field within a document. You choose which field to extract matched fields from, as well as the grok pattern you expect will match. A grok pattern is like a regular expression that supports aliased expressions that can be reused.
//
// This processor comes packaged with many [reusable patterns](https://github.com/elastic/elasticsearch/blob/master/libs/grok/src/main/resources/patterns).
//
// If you need help building patterns to match your logs, you will find the [Grok Debugger](https://www.elastic.co/guide/en/kibana/master/xpack-grokdebugger.html) tool quite useful! [The Grok Constructor](https://grokconstructor.appspot.com/) is also a useful tool.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/grok-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/zlepper/pulumi-elasticstack/sdk/go/elasticstack"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		grok, err := elasticstack.GetIngestProcessorGrok(ctx, &elasticstack.GetIngestProcessorGrokArgs{
// 			Field: "message",
// 			Patterns: []string{
// 				fmt.Sprintf("%vFAVORITE_DOG:pet}", "%{"),
// 				fmt.Sprintf("%vFAVORITE_CAT:pet}", "%{"),
// 			},
// 			PatternDefinitions: map[string]interface{}{
// 				"FAVORITE_DOG": "beagle",
// 				"FAVORITE_CAT": "burmese",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewIngestPipeline(ctx, "myIngestPipeline", &elasticstack.IngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				*pulumi.String(grok.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetIngestProcessorGrok(ctx *pulumi.Context, args *GetIngestProcessorGrokArgs, opts ...pulumi.InvokeOption) (*GetIngestProcessorGrokResult, error) {
	var rv GetIngestProcessorGrokResult
	err := ctx.Invoke("elasticstack:index/getIngestProcessorGrok:getIngestProcessorGrok", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIngestProcessorGrok.
type GetIngestProcessorGrokArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.
	EcsCompatibility *string `pulumi:"ecsCompatibility"`
	// The field to use for grok expression parsing
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.
	PatternDefinitions map[string]string `pulumi:"patternDefinitions"`
	// An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.
	Patterns []string `pulumi:"patterns"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.
	TraceMatch *bool `pulumi:"traceMatch"`
}

// A collection of values returned by getIngestProcessorGrok.
type GetIngestProcessorGrokResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.
	EcsCompatibility *string `pulumi:"ecsCompatibility"`
	// The field to use for grok expression parsing
	Field string `pulumi:"field"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.
	PatternDefinitions map[string]string `pulumi:"patternDefinitions"`
	// An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.
	Patterns []string `pulumi:"patterns"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.
	TraceMatch *bool `pulumi:"traceMatch"`
}

func GetIngestProcessorGrokOutput(ctx *pulumi.Context, args GetIngestProcessorGrokOutputArgs, opts ...pulumi.InvokeOption) GetIngestProcessorGrokResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIngestProcessorGrokResult, error) {
			args := v.(GetIngestProcessorGrokArgs)
			r, err := GetIngestProcessorGrok(ctx, &args, opts...)
			var s GetIngestProcessorGrokResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIngestProcessorGrokResultOutput)
}

// A collection of arguments for invoking getIngestProcessorGrok.
type GetIngestProcessorGrokOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.
	EcsCompatibility pulumi.StringPtrInput `pulumi:"ecsCompatibility"`
	// The field to use for grok expression parsing
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.
	PatternDefinitions pulumi.StringMapInput `pulumi:"patternDefinitions"`
	// An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.
	Patterns pulumi.StringArrayInput `pulumi:"patterns"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.
	TraceMatch pulumi.BoolPtrInput `pulumi:"traceMatch"`
}

func (GetIngestProcessorGrokOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorGrokArgs)(nil)).Elem()
}

// A collection of values returned by getIngestProcessorGrok.
type GetIngestProcessorGrokResultOutput struct{ *pulumi.OutputState }

func (GetIngestProcessorGrokResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIngestProcessorGrokResult)(nil)).Elem()
}

func (o GetIngestProcessorGrokResultOutput) ToGetIngestProcessorGrokResultOutput() GetIngestProcessorGrokResultOutput {
	return o
}

func (o GetIngestProcessorGrokResultOutput) ToGetIngestProcessorGrokResultOutputWithContext(ctx context.Context) GetIngestProcessorGrokResultOutput {
	return o
}

// Description of the processor.
func (o GetIngestProcessorGrokResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.
func (o GetIngestProcessorGrokResultOutput) EcsCompatibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *string { return v.EcsCompatibility }).(pulumi.StringPtrOutput)
}

// The field to use for grok expression parsing
func (o GetIngestProcessorGrokResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o GetIngestProcessorGrokResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o GetIngestProcessorGrokResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o GetIngestProcessorGrokResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document
func (o GetIngestProcessorGrokResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o GetIngestProcessorGrokResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o GetIngestProcessorGrokResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.
func (o GetIngestProcessorGrokResultOutput) PatternDefinitions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) map[string]string { return v.PatternDefinitions }).(pulumi.StringMapOutput)
}

// An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.
func (o GetIngestProcessorGrokResultOutput) Patterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) []string { return v.Patterns }).(pulumi.StringArrayOutput)
}

// Identifier for the processor.
func (o GetIngestProcessorGrokResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.
func (o GetIngestProcessorGrokResultOutput) TraceMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIngestProcessorGrokResult) *bool { return v.TraceMatch }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIngestProcessorGrokResultOutput{})
}
