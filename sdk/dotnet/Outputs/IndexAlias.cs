// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack.Outputs
{

    [OutputType]
    public sealed class IndexAlias
    {
        /// <summary>
        /// Query used to limit documents the alias can access.
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.
        /// </summary>
        public readonly string? IndexRouting;
        /// <summary>
        /// If true, the alias is hidden.
        /// </summary>
        public readonly bool? IsHidden;
        /// <summary>
        /// If true, the index is the write index for the alias.
        /// </summary>
        public readonly bool? IsWriteIndex;
        /// <summary>
        /// Index alias name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Value used to route indexing and search operations to a specific shard.
        /// </summary>
        public readonly string? Routing;
        /// <summary>
        /// Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.
        /// </summary>
        public readonly string? SearchRouting;

        [OutputConstructor]
        private IndexAlias(
            string? filter,

            string? indexRouting,

            bool? isHidden,

            bool? isWriteIndex,

            string name,

            string? routing,

            string? searchRouting)
        {
            Filter = filter;
            IndexRouting = indexRouting;
            IsHidden = isHidden;
            IsWriteIndex = isWriteIndex;
            Name = name;
            Routing = routing;
            SearchRouting = searchRouting;
        }
    }
}
