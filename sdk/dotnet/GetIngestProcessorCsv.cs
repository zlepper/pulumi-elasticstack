// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    public static class GetIngestProcessorCsv
    {
        /// <summary>
        /// Helper data source to which can be used to extract fields from CSV line out of a single text field within a document. Any empty field in CSV will be skipped.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/csv-processor.html
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var csv = Elasticstack.GetIngestProcessorCsv.Invoke(new()
        ///     {
        ///         Field = "my_field",
        ///         TargetFields = new[]
        ///         {
        ///             "field1",
        ///             "field2",
        ///         },
        ///     });
        /// 
        ///     var myIngestPipeline = new Elasticstack.IngestPipeline("myIngestPipeline", new()
        ///     {
        ///         Processors = new[]
        ///         {
        ///             csv.Apply(getIngestProcessorCsvResult =&gt; getIngestProcessorCsvResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// If the `trim` option is enabled then any whitespace in the beginning and in the end of each unquoted field will be trimmed. For example with configuration above, a value of A, B will result in field field2 having value {nbsp}B (with space at the beginning). If trim is enabled A, B will result in field field2 having value B (no whitespace). Quoted fields will be left untouched.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIngestProcessorCsvResult> InvokeAsync(GetIngestProcessorCsvArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIngestProcessorCsvResult>("elasticstack:index/getIngestProcessorCsv:getIngestProcessorCsv", args ?? new GetIngestProcessorCsvArgs(), options.WithDefaults());

        /// <summary>
        /// Helper data source to which can be used to extract fields from CSV line out of a single text field within a document. Any empty field in CSV will be skipped.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/csv-processor.html
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var csv = Elasticstack.GetIngestProcessorCsv.Invoke(new()
        ///     {
        ///         Field = "my_field",
        ///         TargetFields = new[]
        ///         {
        ///             "field1",
        ///             "field2",
        ///         },
        ///     });
        /// 
        ///     var myIngestPipeline = new Elasticstack.IngestPipeline("myIngestPipeline", new()
        ///     {
        ///         Processors = new[]
        ///         {
        ///             csv.Apply(getIngestProcessorCsvResult =&gt; getIngestProcessorCsvResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// If the `trim` option is enabled then any whitespace in the beginning and in the end of each unquoted field will be trimmed. For example with configuration above, a value of A, B will result in field field2 having value {nbsp}B (with space at the beginning). If trim is enabled A, B will result in field field2 having value B (no whitespace). Quoted fields will be left untouched.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIngestProcessorCsvResult> Invoke(GetIngestProcessorCsvInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIngestProcessorCsvResult>("elasticstack:index/getIngestProcessorCsv:getIngestProcessorCsv", args ?? new GetIngestProcessorCsvInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIngestProcessorCsvArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Value used to fill empty fields, empty fields will be skipped if this is not provided.
        /// </summary>
        [Input("emptyValue")]
        public string? EmptyValue { get; set; }

        /// <summary>
        /// The field to extract data from.
        /// </summary>
        [Input("field", required: true)]
        public string Field { get; set; } = null!;

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public string? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public bool? IgnoreFailure { get; set; }

        /// <summary>
        /// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
        /// </summary>
        [Input("ignoreMissing")]
        public bool? IgnoreMissing { get; set; }

        [Input("onFailures")]
        private List<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public List<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new List<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Quote used in CSV, has to be single character string
        /// </summary>
        [Input("quote")]
        public string? Quote { get; set; }

        /// <summary>
        /// Separator used in CSV, has to be single character string.
        /// </summary>
        [Input("separator")]
        public string? Separator { get; set; }

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        [Input("targetFields", required: true)]
        private List<string>? _targetFields;

        /// <summary>
        /// The array of fields to assign extracted values to.
        /// </summary>
        public List<string> TargetFields
        {
            get => _targetFields ?? (_targetFields = new List<string>());
            set => _targetFields = value;
        }

        /// <summary>
        /// Trim whitespaces in unquoted fields.
        /// </summary>
        [Input("trim")]
        public bool? Trim { get; set; }

        public GetIngestProcessorCsvArgs()
        {
        }
        public static new GetIngestProcessorCsvArgs Empty => new GetIngestProcessorCsvArgs();
    }

    public sealed class GetIngestProcessorCsvInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Value used to fill empty fields, empty fields will be skipped if this is not provided.
        /// </summary>
        [Input("emptyValue")]
        public Input<string>? EmptyValue { get; set; }

        /// <summary>
        /// The field to extract data from.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public Input<string>? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public Input<bool>? IgnoreFailure { get; set; }

        /// <summary>
        /// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
        /// </summary>
        [Input("ignoreMissing")]
        public Input<bool>? IgnoreMissing { get; set; }

        [Input("onFailures")]
        private InputList<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public InputList<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new InputList<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Quote used in CSV, has to be single character string
        /// </summary>
        [Input("quote")]
        public Input<string>? Quote { get; set; }

        /// <summary>
        /// Separator used in CSV, has to be single character string.
        /// </summary>
        [Input("separator")]
        public Input<string>? Separator { get; set; }

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        [Input("targetFields", required: true)]
        private InputList<string>? _targetFields;

        /// <summary>
        /// The array of fields to assign extracted values to.
        /// </summary>
        public InputList<string> TargetFields
        {
            get => _targetFields ?? (_targetFields = new InputList<string>());
            set => _targetFields = value;
        }

        /// <summary>
        /// Trim whitespaces in unquoted fields.
        /// </summary>
        [Input("trim")]
        public Input<bool>? Trim { get; set; }

        public GetIngestProcessorCsvInvokeArgs()
        {
        }
        public static new GetIngestProcessorCsvInvokeArgs Empty => new GetIngestProcessorCsvInvokeArgs();
    }


    [OutputType]
    public sealed class GetIngestProcessorCsvResult
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Value used to fill empty fields, empty fields will be skipped if this is not provided.
        /// </summary>
        public readonly string? EmptyValue;
        /// <summary>
        /// The field to extract data from.
        /// </summary>
        public readonly string Field;
        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        public readonly string? If;
        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        public readonly bool? IgnoreFailure;
        /// <summary>
        /// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
        /// </summary>
        public readonly bool? IgnoreMissing;
        /// <summary>
        /// JSON representation of this data source.
        /// </summary>
        public readonly string Json;
        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public readonly ImmutableArray<string> OnFailures;
        /// <summary>
        /// Quote used in CSV, has to be single character string
        /// </summary>
        public readonly string? Quote;
        /// <summary>
        /// Separator used in CSV, has to be single character string.
        /// </summary>
        public readonly string? Separator;
        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// The array of fields to assign extracted values to.
        /// </summary>
        public readonly ImmutableArray<string> TargetFields;
        /// <summary>
        /// Trim whitespaces in unquoted fields.
        /// </summary>
        public readonly bool? Trim;

        [OutputConstructor]
        private GetIngestProcessorCsvResult(
            string? description,

            string? emptyValue,

            string field,

            string id,

            string? @if,

            bool? ignoreFailure,

            bool? ignoreMissing,

            string json,

            ImmutableArray<string> onFailures,

            string? quote,

            string? separator,

            string? tag,

            ImmutableArray<string> targetFields,

            bool? trim)
        {
            Description = description;
            EmptyValue = emptyValue;
            Field = field;
            Id = id;
            If = @if;
            IgnoreFailure = ignoreFailure;
            IgnoreMissing = ignoreMissing;
            Json = json;
            OnFailures = onFailures;
            Quote = quote;
            Separator = separator;
            Tag = tag;
            TargetFields = targetFields;
            Trim = trim;
        }
    }
}
