// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack.Inputs
{

    public sealed class ProviderElasticsearchArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("caData")]
        public Input<string>? CaData { get; set; }

        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        [Input("certData")]
        public Input<string>? CertData { get; set; }

        [Input("certFile")]
        public Input<string>? CertFile { get; set; }

        [Input("endpoints")]
        private InputList<string>? _endpoints;
        public InputList<string> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _endpoints = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        [Input("keyData")]
        private Input<string>? _keyData;
        public Input<string>? KeyData
        {
            get => _keyData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keyFile")]
        public Input<string>? KeyFile { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProviderElasticsearchArgs()
        {
        }
        public static new ProviderElasticsearchArgs Empty => new ProviderElasticsearchArgs();
    }
}
