// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    public static class GetIngestProcessorSplit
    {
        /// <summary>
        /// Splits a field into an array using a separator character. Only works on string fields.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/split-processor.html
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var split = Elasticstack.GetIngestProcessorSplit.Invoke(new()
        ///     {
        ///         Field = "my_field",
        ///         Separator = "\\s+",
        ///     });
        /// 
        ///     var myIngestPipeline = new Elasticstack.IngestPipeline("myIngestPipeline", new()
        ///     {
        ///         Processors = new[]
        ///         {
        ///             split.Apply(getIngestProcessorSplitResult =&gt; getIngestProcessorSplitResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIngestProcessorSplitResult> InvokeAsync(GetIngestProcessorSplitArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIngestProcessorSplitResult>("elasticstack:index/getIngestProcessorSplit:getIngestProcessorSplit", args ?? new GetIngestProcessorSplitArgs(), options.WithDefaults());

        /// <summary>
        /// Splits a field into an array using a separator character. Only works on string fields.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/split-processor.html
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var split = Elasticstack.GetIngestProcessorSplit.Invoke(new()
        ///     {
        ///         Field = "my_field",
        ///         Separator = "\\s+",
        ///     });
        /// 
        ///     var myIngestPipeline = new Elasticstack.IngestPipeline("myIngestPipeline", new()
        ///     {
        ///         Processors = new[]
        ///         {
        ///             split.Apply(getIngestProcessorSplitResult =&gt; getIngestProcessorSplitResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIngestProcessorSplitResult> Invoke(GetIngestProcessorSplitInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIngestProcessorSplitResult>("elasticstack:index/getIngestProcessorSplit:getIngestProcessorSplit", args ?? new GetIngestProcessorSplitInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIngestProcessorSplitArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The field to split
        /// </summary>
        [Input("field", required: true)]
        public string Field { get; set; } = null!;

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public string? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public bool? IgnoreFailure { get; set; }

        /// <summary>
        /// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
        /// </summary>
        [Input("ignoreMissing")]
        public bool? IgnoreMissing { get; set; }

        [Input("onFailures")]
        private List<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public List<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new List<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Preserves empty trailing fields, if any.
        /// </summary>
        [Input("preserveTrailing")]
        public bool? PreserveTrailing { get; set; }

        /// <summary>
        /// A regex which matches the separator, eg `,` or `\s+`
        /// </summary>
        [Input("separator", required: true)]
        public string Separator { get; set; } = null!;

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        /// <summary>
        /// The field to assign the converted value to, by default `field` is updated in-place.
        /// </summary>
        [Input("targetField")]
        public string? TargetField { get; set; }

        public GetIngestProcessorSplitArgs()
        {
        }
        public static new GetIngestProcessorSplitArgs Empty => new GetIngestProcessorSplitArgs();
    }

    public sealed class GetIngestProcessorSplitInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The field to split
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public Input<string>? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public Input<bool>? IgnoreFailure { get; set; }

        /// <summary>
        /// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
        /// </summary>
        [Input("ignoreMissing")]
        public Input<bool>? IgnoreMissing { get; set; }

        [Input("onFailures")]
        private InputList<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public InputList<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new InputList<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Preserves empty trailing fields, if any.
        /// </summary>
        [Input("preserveTrailing")]
        public Input<bool>? PreserveTrailing { get; set; }

        /// <summary>
        /// A regex which matches the separator, eg `,` or `\s+`
        /// </summary>
        [Input("separator", required: true)]
        public Input<string> Separator { get; set; } = null!;

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// The field to assign the converted value to, by default `field` is updated in-place.
        /// </summary>
        [Input("targetField")]
        public Input<string>? TargetField { get; set; }

        public GetIngestProcessorSplitInvokeArgs()
        {
        }
        public static new GetIngestProcessorSplitInvokeArgs Empty => new GetIngestProcessorSplitInvokeArgs();
    }


    [OutputType]
    public sealed class GetIngestProcessorSplitResult
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The field to split
        /// </summary>
        public readonly string Field;
        /// <summary>
        /// Internal identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        public readonly string? If;
        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        public readonly bool? IgnoreFailure;
        /// <summary>
        /// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
        /// </summary>
        public readonly bool? IgnoreMissing;
        /// <summary>
        /// JSON representation of this data source.
        /// </summary>
        public readonly string Json;
        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public readonly ImmutableArray<string> OnFailures;
        /// <summary>
        /// Preserves empty trailing fields, if any.
        /// </summary>
        public readonly bool? PreserveTrailing;
        /// <summary>
        /// A regex which matches the separator, eg `,` or `\s+`
        /// </summary>
        public readonly string Separator;
        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// The field to assign the converted value to, by default `field` is updated in-place.
        /// </summary>
        public readonly string? TargetField;

        [OutputConstructor]
        private GetIngestProcessorSplitResult(
            string? description,

            string field,

            string id,

            string? @if,

            bool? ignoreFailure,

            bool? ignoreMissing,

            string json,

            ImmutableArray<string> onFailures,

            bool? preserveTrailing,

            string separator,

            string? tag,

            string? targetField)
        {
            Description = description;
            Field = field;
            Id = id;
            If = @if;
            IgnoreFailure = ignoreFailure;
            IgnoreMissing = ignoreMissing;
            Json = json;
            OnFailures = onFailures;
            PreserveTrailing = preserveTrailing;
            Separator = separator;
            Tag = tag;
            TargetField = targetField;
        }
    }
}
