// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    public static class GetIngestProcessorJson
    {
        /// <summary>
        /// Converts a JSON string into a structured JSON object.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/json-processor.html
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var jsonProc = Elasticstack.GetIngestProcessorJson.Invoke(new()
        ///     {
        ///         Field = "string_source",
        ///         TargetField = "json_target",
        ///     });
        /// 
        ///     var myIngestPipeline = new Elasticstack.IngestPipeline("myIngestPipeline", new()
        ///     {
        ///         Processors = new[]
        ///         {
        ///             jsonProc.Apply(getIngestProcessorJsonResult =&gt; getIngestProcessorJsonResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIngestProcessorJsonResult> InvokeAsync(GetIngestProcessorJsonArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIngestProcessorJsonResult>("elasticstack:index/getIngestProcessorJson:getIngestProcessorJson", args ?? new GetIngestProcessorJsonArgs(), options.WithDefaults());

        /// <summary>
        /// Converts a JSON string into a structured JSON object.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/json-processor.html
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var jsonProc = Elasticstack.GetIngestProcessorJson.Invoke(new()
        ///     {
        ///         Field = "string_source",
        ///         TargetField = "json_target",
        ///     });
        /// 
        ///     var myIngestPipeline = new Elasticstack.IngestPipeline("myIngestPipeline", new()
        ///     {
        ///         Processors = new[]
        ///         {
        ///             jsonProc.Apply(getIngestProcessorJsonResult =&gt; getIngestProcessorJsonResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIngestProcessorJsonResult> Invoke(GetIngestProcessorJsonInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIngestProcessorJsonResult>("elasticstack:index/getIngestProcessorJson:getIngestProcessorJson", args ?? new GetIngestProcessorJsonInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIngestProcessorJsonArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.
        /// </summary>
        [Input("addToRoot")]
        public bool? AddToRoot { get; set; }

        /// <summary>
        /// When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.
        /// </summary>
        [Input("addToRootConflictStrategy")]
        public string? AddToRootConflictStrategy { get; set; }

        /// <summary>
        /// When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.
        /// </summary>
        [Input("allowDuplicateKeys")]
        public bool? AllowDuplicateKeys { get; set; }

        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The field to be parsed.
        /// </summary>
        [Input("field", required: true)]
        public string Field { get; set; } = null!;

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public string? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public bool? IgnoreFailure { get; set; }

        [Input("onFailures")]
        private List<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public List<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new List<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        /// <summary>
        /// The field that the converted structured object will be written into. Any existing content in this field will be overwritten.
        /// </summary>
        [Input("targetField")]
        public string? TargetField { get; set; }

        public GetIngestProcessorJsonArgs()
        {
        }
        public static new GetIngestProcessorJsonArgs Empty => new GetIngestProcessorJsonArgs();
    }

    public sealed class GetIngestProcessorJsonInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.
        /// </summary>
        [Input("addToRoot")]
        public Input<bool>? AddToRoot { get; set; }

        /// <summary>
        /// When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.
        /// </summary>
        [Input("addToRootConflictStrategy")]
        public Input<string>? AddToRootConflictStrategy { get; set; }

        /// <summary>
        /// When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.
        /// </summary>
        [Input("allowDuplicateKeys")]
        public Input<bool>? AllowDuplicateKeys { get; set; }

        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The field to be parsed.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public Input<string>? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public Input<bool>? IgnoreFailure { get; set; }

        [Input("onFailures")]
        private InputList<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public InputList<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new InputList<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// The field that the converted structured object will be written into. Any existing content in this field will be overwritten.
        /// </summary>
        [Input("targetField")]
        public Input<string>? TargetField { get; set; }

        public GetIngestProcessorJsonInvokeArgs()
        {
        }
        public static new GetIngestProcessorJsonInvokeArgs Empty => new GetIngestProcessorJsonInvokeArgs();
    }


    [OutputType]
    public sealed class GetIngestProcessorJsonResult
    {
        /// <summary>
        /// Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.
        /// </summary>
        public readonly bool? AddToRoot;
        /// <summary>
        /// When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.
        /// </summary>
        public readonly string? AddToRootConflictStrategy;
        /// <summary>
        /// When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.
        /// </summary>
        public readonly bool? AllowDuplicateKeys;
        /// <summary>
        /// Description of the processor.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The field to be parsed.
        /// </summary>
        public readonly string Field;
        /// <summary>
        /// Internal identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        public readonly string? If;
        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        public readonly bool? IgnoreFailure;
        /// <summary>
        /// JSON representation of this data source.
        /// </summary>
        public readonly string Json;
        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public readonly ImmutableArray<string> OnFailures;
        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// The field that the converted structured object will be written into. Any existing content in this field will be overwritten.
        /// </summary>
        public readonly string? TargetField;

        [OutputConstructor]
        private GetIngestProcessorJsonResult(
            bool? addToRoot,

            string? addToRootConflictStrategy,

            bool? allowDuplicateKeys,

            string? description,

            string field,

            string id,

            string? @if,

            bool? ignoreFailure,

            string json,

            ImmutableArray<string> onFailures,

            string? tag,

            string? targetField)
        {
            AddToRoot = addToRoot;
            AddToRootConflictStrategy = addToRootConflictStrategy;
            AllowDuplicateKeys = allowDuplicateKeys;
            Description = description;
            Field = field;
            Id = id;
            If = @if;
            IgnoreFailure = ignoreFailure;
            Json = json;
            OnFailures = onFailures;
            Tag = tag;
            TargetField = targetField;
        }
    }
}
